
./Debug/ascii_display.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define B_RW 0x02
#define B_RS 0x01

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9cc 	bl	200003a0 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x)
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *GPIO_ODR_LOW;
2000001c:	4a0c      	ldr	r2, [pc, #48]	; (20000050 <ascii_ctrl_bit_set+0x40>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7812      	ldrb	r2, [r2, #0]
20000024:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x ); //Varför ettställa B_select?
20000026:	1dfa      	adds	r2, r7, #7
20000028:	187b      	adds	r3, r7, r1
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	4313      	orrs	r3, r2
20000030:	b2da      	uxtb	r2, r3
20000032:	0008      	movs	r0, r1
20000034:	187b      	adds	r3, r7, r1
20000036:	2104      	movs	r1, #4
20000038:	430a      	orrs	r2, r1
2000003a:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
2000003c:	4a04      	ldr	r2, [pc, #16]	; (20000050 <ascii_ctrl_bit_set+0x40>)
2000003e:	0001      	movs	r1, r0
20000040:	187b      	adds	r3, r7, r1
20000042:	781b      	ldrb	r3, [r3, #0]
20000044:	7013      	strb	r3, [r2, #0]
}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	46bd      	mov	sp, r7
2000004a:	b004      	add	sp, #16
2000004c:	bd80      	pop	{r7, pc}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	40021014 	andmi	r1, r2, r4, lsl r0

20000054 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	0002      	movs	r2, r0
2000005c:	1dfb      	adds	r3, r7, #7
2000005e:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *GPIO_ODR_LOW;
20000060:	4a0d      	ldr	r2, [pc, #52]	; (20000098 <ascii_ctrl_bit_clear+0x44>)
20000062:	210f      	movs	r1, #15
20000064:	187b      	adds	r3, r7, r1
20000066:	7812      	ldrb	r2, [r2, #0]
20000068:	701a      	strb	r2, [r3, #0]
	c &= (B_SELECT | ~x); //~ bildar 1-komplement
2000006a:	1dfb      	adds	r3, r7, #7
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	b25b      	sxtb	r3, r3
20000070:	43db      	mvns	r3, r3
20000072:	b25b      	sxtb	r3, r3
20000074:	2204      	movs	r2, #4
20000076:	4313      	orrs	r3, r2
20000078:	b25b      	sxtb	r3, r3
2000007a:	187a      	adds	r2, r7, r1
2000007c:	7812      	ldrb	r2, [r2, #0]
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	187b      	adds	r3, r7, r1
20000086:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
20000088:	4a03      	ldr	r2, [pc, #12]	; (20000098 <ascii_ctrl_bit_clear+0x44>)
2000008a:	187b      	adds	r3, r7, r1
2000008c:	781b      	ldrb	r3, [r3, #0]
2000008e:	7013      	strb	r3, [r2, #0]
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	b004      	add	sp, #16
20000096:	bd80      	pop	{r7, pc}
20000098:	40021014 	andmi	r1, r2, r4, lsl r0

2000009c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
2000009c:	b580      	push	{r7, lr}
2000009e:	b082      	sub	sp, #8
200000a0:	af00      	add	r7, sp, #0
200000a2:	0002      	movs	r2, r0
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set( B_E );
200000a8:	2040      	movs	r0, #64	; 0x40
200000aa:	f7ff ffb1 	bl	20000010 <ascii_ctrl_bit_set>
	*GPIO_ODR_HIGH = byte;
200000ae:	4a06      	ldr	r2, [pc, #24]	; (200000c8 <ascii_write_controller+0x2c>)
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200000b6:	f000 f8b7 	bl	20000228 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);	//Ska delay vara före eller efter detta?
200000ba:	2040      	movs	r0, #64	; 0x40
200000bc:	f7ff ffca 	bl	20000054 <ascii_ctrl_bit_clear>
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	b002      	add	sp, #8
200000c6:	bd80      	pop	{r7, pc}
200000c8:	40021015 	andmi	r1, r2, r5, lsl r0

200000cc <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
	unsigned char rv;
	ascii_ctrl_bit_set( B_E );
200000d2:	2040      	movs	r0, #64	; 0x40
200000d4:	f7ff ff9c 	bl	20000010 <ascii_ctrl_bit_set>
	delay_250ns();
200000d8:	f000 f8a6 	bl	20000228 <delay_250ns>
	delay_250ns();
200000dc:	f000 f8a4 	bl	20000228 <delay_250ns>
	rv = *GPIO_IDR_HIGH;
200000e0:	4a06      	ldr	r2, [pc, #24]	; (200000fc <ascii_read_controller+0x30>)
200000e2:	1dfb      	adds	r3, r7, #7
200000e4:	7812      	ldrb	r2, [r2, #0]
200000e6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_E );
200000e8:	2040      	movs	r0, #64	; 0x40
200000ea:	f7ff ffb3 	bl	20000054 <ascii_ctrl_bit_clear>
	return rv;
200000ee:	1dfb      	adds	r3, r7, #7
200000f0:	781b      	ldrb	r3, [r3, #0]
	
}
200000f2:	0018      	movs	r0, r3
200000f4:	46bd      	mov	sp, r7
200000f6:	b002      	add	sp, #8
200000f8:	bd80      	pop	{r7, pc}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	40021011 	andmi	r1, r2, r1, lsl r0

20000100 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
20000100:	b580      	push	{r7, lr}
20000102:	b082      	sub	sp, #8
20000104:	af00      	add	r7, sp, #0
20000106:	0002      	movs	r2, r0
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000010c:	2001      	movs	r0, #1
2000010e:	f7ff ffa1 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000112:	2002      	movs	r0, #2
20000114:	f7ff ff9e 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000118:	1dfb      	adds	r3, r7, #7
2000011a:	781b      	ldrb	r3, [r3, #0]
2000011c:	0018      	movs	r0, r3
2000011e:	f7ff ffbd 	bl	2000009c <ascii_write_controller>
	
}
20000122:	46c0      	nop			; (mov r8, r8)
20000124:	46bd      	mov	sp, r7
20000126:	b002      	add	sp, #8
20000128:	bd80      	pop	{r7, pc}

2000012a <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
2000012a:	b580      	push	{r7, lr}
2000012c:	b082      	sub	sp, #8
2000012e:	af00      	add	r7, sp, #0
20000130:	0002      	movs	r2, r0
20000132:	1dfb      	adds	r3, r7, #7
20000134:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000136:	2001      	movs	r0, #1
20000138:	f7ff ff6a 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000013c:	2002      	movs	r0, #2
2000013e:	f7ff ff89 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000142:	1dfb      	adds	r3, r7, #7
20000144:	781b      	ldrb	r3, [r3, #0]
20000146:	0018      	movs	r0, r3
20000148:	f7ff ffa8 	bl	2000009c <ascii_write_controller>
}
2000014c:	46c0      	nop			; (mov r8, r8)
2000014e:	46bd      	mov	sp, r7
20000150:	b002      	add	sp, #8
20000152:	bd80      	pop	{r7, pc}

20000154 <ascii_read_status>:



unsigned char ascii_read_status(void)
{
20000154:	b590      	push	{r4, r7, lr}
20000156:	b083      	sub	sp, #12
20000158:	af00      	add	r7, sp, #0
	unsigned char rv;
	*GPIO_MODER &= 0x00005555;
2000015a:	4b0e      	ldr	r3, [pc, #56]	; (20000194 <ascii_read_status+0x40>)
2000015c:	681a      	ldr	r2, [r3, #0]
2000015e:	4b0d      	ldr	r3, [pc, #52]	; (20000194 <ascii_read_status+0x40>)
20000160:	490d      	ldr	r1, [pc, #52]	; (20000198 <ascii_read_status+0x44>)
20000162:	400a      	ands	r2, r1
20000164:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000166:	2002      	movs	r0, #2
20000168:	f7ff ff52 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
2000016c:	2001      	movs	r0, #1
2000016e:	f7ff ff71 	bl	20000054 <ascii_ctrl_bit_clear>
	rv = ascii_read_controller();
20000172:	1dfc      	adds	r4, r7, #7
20000174:	f7ff ffaa 	bl	200000cc <ascii_read_controller>
20000178:	0003      	movs	r3, r0
2000017a:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER |= 0x55555555;
2000017c:	4b05      	ldr	r3, [pc, #20]	; (20000194 <ascii_read_status+0x40>)
2000017e:	681a      	ldr	r2, [r3, #0]
20000180:	4b04      	ldr	r3, [pc, #16]	; (20000194 <ascii_read_status+0x40>)
20000182:	4906      	ldr	r1, [pc, #24]	; (2000019c <ascii_read_status+0x48>)
20000184:	430a      	orrs	r2, r1
20000186:	601a      	str	r2, [r3, #0]
	return rv;
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
}
2000018c:	0018      	movs	r0, r3
2000018e:	46bd      	mov	sp, r7
20000190:	b003      	add	sp, #12
20000192:	bd90      	pop	{r4, r7, pc}
20000194:	40021000 	andmi	r1, r2, r0
20000198:	00005555 	andeq	r5, r0, r5, asr r5
2000019c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001a0 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
200001a0:	b590      	push	{r4, r7, lr}
200001a2:	b083      	sub	sp, #12
200001a4:	af00      	add	r7, sp, #0
	unsigned char rv;
	*GPIO_MODER &= 0x00005555;
200001a6:	4b0e      	ldr	r3, [pc, #56]	; (200001e0 <ascii_read_data+0x40>)
200001a8:	681a      	ldr	r2, [r3, #0]
200001aa:	4b0d      	ldr	r3, [pc, #52]	; (200001e0 <ascii_read_data+0x40>)
200001ac:	490d      	ldr	r1, [pc, #52]	; (200001e4 <ascii_read_data+0x44>)
200001ae:	400a      	ands	r2, r1
200001b0:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200001b2:	2001      	movs	r0, #1
200001b4:	f7ff ff2c 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200001b8:	2002      	movs	r0, #2
200001ba:	f7ff ff29 	bl	20000010 <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
200001be:	1dfc      	adds	r4, r7, #7
200001c0:	f7ff ff84 	bl	200000cc <ascii_read_controller>
200001c4:	0003      	movs	r3, r0
200001c6:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER |= 0x55555555;
200001c8:	4b05      	ldr	r3, [pc, #20]	; (200001e0 <ascii_read_data+0x40>)
200001ca:	681a      	ldr	r2, [r3, #0]
200001cc:	4b04      	ldr	r3, [pc, #16]	; (200001e0 <ascii_read_data+0x40>)
200001ce:	4906      	ldr	r1, [pc, #24]	; (200001e8 <ascii_read_data+0x48>)
200001d0:	430a      	orrs	r2, r1
200001d2:	601a      	str	r2, [r3, #0]
	return rv;
200001d4:	1dfb      	adds	r3, r7, #7
200001d6:	781b      	ldrb	r3, [r3, #0]
}
200001d8:	0018      	movs	r0, r3
200001da:	46bd      	mov	sp, r7
200001dc:	b003      	add	sp, #12
200001de:	bd90      	pop	{r4, r7, pc}
200001e0:	40021000 	andmi	r1, r2, r0
200001e4:	00005555 	andeq	r5, r0, r5, asr r5
200001e8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001ec <delay_milli>:

void delay_milli(int ms)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	6078      	str	r0, [r7, #4]
	while(ms > 0)
200001f4:	e002      	b.n	200001fc <delay_milli+0x10>
	{
	#ifndef SIMULATOR
	delay_micro(1000);
	#endif
	ms--;
200001f6:	687b      	ldr	r3, [r7, #4]
200001f8:	3b01      	subs	r3, #1
200001fa:	607b      	str	r3, [r7, #4]
	while(ms > 0)
200001fc:	687b      	ldr	r3, [r7, #4]
200001fe:	2b00      	cmp	r3, #0
20000200:	dcf9      	bgt.n	200001f6 <delay_milli+0xa>
	}
}
20000202:	46c0      	nop			; (mov r8, r8)
20000204:	46bd      	mov	sp, r7
20000206:	b002      	add	sp, #8
20000208:	bd80      	pop	{r7, pc}

2000020a <delay_micro>:

void delay_micro(int us)
{
2000020a:	b580      	push	{r7, lr}
2000020c:	b082      	sub	sp, #8
2000020e:	af00      	add	r7, sp, #0
20000210:	6078      	str	r0, [r7, #4]
	while(us > 0)
20000212:	e002      	b.n	2000021a <delay_micro+0x10>
	delay_250ns();
	delay_250ns();
	delay_250ns();
	delay_250ns();
	#endif
	us--;
20000214:	687b      	ldr	r3, [r7, #4]
20000216:	3b01      	subs	r3, #1
20000218:	607b      	str	r3, [r7, #4]
	while(us > 0)
2000021a:	687b      	ldr	r3, [r7, #4]
2000021c:	2b00      	cmp	r3, #0
2000021e:	dcf9      	bgt.n	20000214 <delay_micro+0xa>
	}
}
20000220:	46c0      	nop			; (mov r8, r8)
20000222:	46bd      	mov	sp, r7
20000224:	b002      	add	sp, #8
20000226:	bd80      	pop	{r7, pc}

20000228 <delay_250ns>:

void delay_250ns(void)
{
20000228:	b580      	push	{r7, lr}
2000022a:	b082      	sub	sp, #8
2000022c:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000022e:	4b10      	ldr	r3, [pc, #64]	; (20000270 <delay_250ns+0x48>)
20000230:	2200      	movs	r2, #0
20000232:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 0x29; //0x2A - 1
20000234:	4b0f      	ldr	r3, [pc, #60]	; (20000274 <delay_250ns+0x4c>)
20000236:	2229      	movs	r2, #41	; 0x29
20000238:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0x0;
2000023a:	4b0f      	ldr	r3, [pc, #60]	; (20000278 <delay_250ns+0x50>)
2000023c:	2200      	movs	r2, #0
2000023e:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000240:	4b0b      	ldr	r3, [pc, #44]	; (20000270 <delay_250ns+0x48>)
20000242:	2205      	movs	r2, #5
20000244:	601a      	str	r2, [r3, #0]
	unsigned int ctrl = *STK_CTRL & 0x10000;
20000246:	4b0a      	ldr	r3, [pc, #40]	; (20000270 <delay_250ns+0x48>)
20000248:	681a      	ldr	r2, [r3, #0]
2000024a:	2380      	movs	r3, #128	; 0x80
2000024c:	025b      	lsls	r3, r3, #9
2000024e:	4013      	ands	r3, r2
20000250:	607b      	str	r3, [r7, #4]
	while((*STK_CTRL & 0x10000) == 0);
20000252:	46c0      	nop			; (mov r8, r8)
20000254:	4b06      	ldr	r3, [pc, #24]	; (20000270 <delay_250ns+0x48>)
20000256:	681a      	ldr	r2, [r3, #0]
20000258:	2380      	movs	r3, #128	; 0x80
2000025a:	025b      	lsls	r3, r3, #9
2000025c:	4013      	ands	r3, r2
2000025e:	d0f9      	beq.n	20000254 <delay_250ns+0x2c>
	*STK_CTRL= 0;
20000260:	4b03      	ldr	r3, [pc, #12]	; (20000270 <delay_250ns+0x48>)
20000262:	2200      	movs	r2, #0
20000264:	601a      	str	r2, [r3, #0]
	
}
20000266:	46c0      	nop			; (mov r8, r8)
20000268:	46bd      	mov	sp, r7
2000026a:	b002      	add	sp, #8
2000026c:	bd80      	pop	{r7, pc}
2000026e:	46c0      	nop			; (mov r8, r8)
20000270:	e000e010 	and	lr, r0, r0, lsl r0
20000274:	e000e014 	and	lr, r0, r4, lsl r0
20000278:	e000e018 	and	lr, r0, r8, lsl r0

2000027c <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
2000027c:	b580      	push	{r7, lr}
2000027e:	b082      	sub	sp, #8
20000280:	af00      	add	r7, sp, #0
20000282:	0002      	movs	r2, r0
20000284:	1dfb      	adds	r3, r7, #7
20000286:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000288:	46c0      	nop			; (mov r8, r8)
2000028a:	f7ff ff63 	bl	20000154 <ascii_read_status>
2000028e:	0003      	movs	r3, r0
20000290:	001a      	movs	r2, r3
20000292:	2380      	movs	r3, #128	; 0x80
20000294:	4013      	ands	r3, r2
20000296:	2b80      	cmp	r3, #128	; 0x80
20000298:	d0f7      	beq.n	2000028a <ascii_write_char+0xe>
	delay_micro(8);
2000029a:	2008      	movs	r0, #8
2000029c:	f7ff ffb5 	bl	2000020a <delay_micro>
	ascii_write_data(c);
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	0018      	movs	r0, r3
200002a6:	f7ff ff40 	bl	2000012a <ascii_write_data>
	delay_micro(45);
200002aa:	202d      	movs	r0, #45	; 0x2d
200002ac:	f7ff ffad 	bl	2000020a <delay_micro>
}
200002b0:	46c0      	nop			; (mov r8, r8)
200002b2:	46bd      	mov	sp, r7
200002b4:	b002      	add	sp, #8
200002b6:	bd80      	pop	{r7, pc}

200002b8 <ascii_gotoxy>:

void ascii_gotoxy(int row, int col)
{
200002b8:	b580      	push	{r7, lr}
200002ba:	b084      	sub	sp, #16
200002bc:	af00      	add	r7, sp, #0
200002be:	6078      	str	r0, [r7, #4]
200002c0:	6039      	str	r1, [r7, #0]
	unsigned int adress;
	adress = row -1;
200002c2:	687b      	ldr	r3, [r7, #4]
200002c4:	3b01      	subs	r3, #1
200002c6:	60fb      	str	r3, [r7, #12]
	if(col == 2)
200002c8:	683b      	ldr	r3, [r7, #0]
200002ca:	2b02      	cmp	r3, #2
200002cc:	d102      	bne.n	200002d4 <ascii_gotoxy+0x1c>
	{
		adress = adress + 0x40;
200002ce:	68fb      	ldr	r3, [r7, #12]
200002d0:	3340      	adds	r3, #64	; 0x40
200002d2:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80|adress);
200002d4:	68fb      	ldr	r3, [r7, #12]
200002d6:	b2db      	uxtb	r3, r3
200002d8:	2280      	movs	r2, #128	; 0x80
200002da:	4252      	negs	r2, r2
200002dc:	4313      	orrs	r3, r2
200002de:	b2db      	uxtb	r3, r3
200002e0:	0018      	movs	r0, r3
200002e2:	f7ff ff0d 	bl	20000100 <ascii_write_cmd>
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b004      	add	sp, #16
200002ec:	bd80      	pop	{r7, pc}

200002ee <ascii_init>:

void ascii_init(void)
{
200002ee:	b580      	push	{r7, lr}
200002f0:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	f7ff ff2e 	bl	20000154 <ascii_read_status>
200002f8:	0003      	movs	r3, r0
200002fa:	001a      	movs	r2, r3
200002fc:	2380      	movs	r3, #128	; 0x80
200002fe:	4013      	ands	r3, r2
20000300:	2b80      	cmp	r3, #128	; 0x80
20000302:	d0f7      	beq.n	200002f4 <ascii_init+0x6>
	delay_micro(8);
20000304:	2008      	movs	r0, #8
20000306:	f7ff ff80 	bl	2000020a <delay_micro>
	ascii_write_cmd(0x38); //00111000
2000030a:	2038      	movs	r0, #56	; 0x38
2000030c:	f7ff fef8 	bl	20000100 <ascii_write_cmd>
	delay_micro(40);
20000310:	2028      	movs	r0, #40	; 0x28
20000312:	f7ff ff7a 	bl	2000020a <delay_micro>
	
	while((ascii_read_status() & 0x80) == 0x80){}
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	f7ff ff1c 	bl	20000154 <ascii_read_status>
2000031c:	0003      	movs	r3, r0
2000031e:	001a      	movs	r2, r3
20000320:	2380      	movs	r3, #128	; 0x80
20000322:	4013      	ands	r3, r2
20000324:	2b80      	cmp	r3, #128	; 0x80
20000326:	d0f7      	beq.n	20000318 <ascii_init+0x2a>
	delay_micro(8);
20000328:	2008      	movs	r0, #8
2000032a:	f7ff ff6e 	bl	2000020a <delay_micro>
	ascii_write_cmd(0x0D); //00001110
2000032e:	200d      	movs	r0, #13
20000330:	f7ff fee6 	bl	20000100 <ascii_write_cmd>
	delay_micro(40);
20000334:	2028      	movs	r0, #40	; 0x28
20000336:	f7ff ff68 	bl	2000020a <delay_micro>
	
	while((ascii_read_status() & 0x80) == 0x80){}
2000033a:	46c0      	nop			; (mov r8, r8)
2000033c:	f7ff ff0a 	bl	20000154 <ascii_read_status>
20000340:	0003      	movs	r3, r0
20000342:	001a      	movs	r2, r3
20000344:	2380      	movs	r3, #128	; 0x80
20000346:	4013      	ands	r3, r2
20000348:	2b80      	cmp	r3, #128	; 0x80
2000034a:	d0f7      	beq.n	2000033c <ascii_init+0x4e>
	delay_micro(8);
2000034c:	2008      	movs	r0, #8
2000034e:	f7ff ff5c 	bl	2000020a <delay_micro>
	ascii_write_cmd(1);
20000352:	2001      	movs	r0, #1
20000354:	f7ff fed4 	bl	20000100 <ascii_write_cmd>
	delay_milli(2);
20000358:	2002      	movs	r0, #2
2000035a:	f7ff ff47 	bl	200001ec <delay_milli>
	
	while((ascii_read_status() & 0x80) == 0x80){}
2000035e:	46c0      	nop			; (mov r8, r8)
20000360:	f7ff fef8 	bl	20000154 <ascii_read_status>
20000364:	0003      	movs	r3, r0
20000366:	001a      	movs	r2, r3
20000368:	2380      	movs	r3, #128	; 0x80
2000036a:	4013      	ands	r3, r2
2000036c:	2b80      	cmp	r3, #128	; 0x80
2000036e:	d0f7      	beq.n	20000360 <ascii_init+0x72>
	delay_micro(8);
20000370:	2008      	movs	r0, #8
20000372:	f7ff ff4a 	bl	2000020a <delay_micro>
	ascii_write_cmd(0x06); //Rätt? Increment? 00000100
20000376:	2006      	movs	r0, #6
20000378:	f7ff fec2 	bl	20000100 <ascii_write_cmd>
	delay_micro(39);
2000037c:	2027      	movs	r0, #39	; 0x27
2000037e:	f7ff ff44 	bl	2000020a <delay_micro>
}
20000382:	46c0      	nop			; (mov r8, r8)
20000384:	46bd      	mov	sp, r7
20000386:	bd80      	pop	{r7, pc}

20000388 <init_app>:

void init_app(void)
{
20000388:	b580      	push	{r7, lr}
2000038a:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55555555;
2000038c:	4b02      	ldr	r3, [pc, #8]	; (20000398 <init_app+0x10>)
2000038e:	4a03      	ldr	r2, [pc, #12]	; (2000039c <init_app+0x14>)
20000390:	601a      	str	r2, [r3, #0]
}
20000392:	46c0      	nop			; (mov r8, r8)
20000394:	46bd      	mov	sp, r7
20000396:	bd80      	pop	{r7, pc}
20000398:	40021000 	andmi	r1, r2, r0
2000039c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003a0 <main>:

int main(int argc, char **argv)
{
200003a0:	b5b0      	push	{r4, r5, r7, lr}
200003a2:	b08c      	sub	sp, #48	; 0x30
200003a4:	af00      	add	r7, sp, #0
200003a6:	6078      	str	r0, [r7, #4]
200003a8:	6039      	str	r1, [r7, #0]
	
	//ascii_ctrl_bit_set(0x01)
	char *s;
	char test1[] = "If you can dream it";
200003aa:	2418      	movs	r4, #24
200003ac:	193b      	adds	r3, r7, r4
200003ae:	4a1e      	ldr	r2, [pc, #120]	; (20000428 <main+0x88>)
200003b0:	ca23      	ldmia	r2!, {r0, r1, r5}
200003b2:	c323      	stmia	r3!, {r0, r1, r5}
200003b4:	ca03      	ldmia	r2!, {r0, r1}
200003b6:	c303      	stmia	r3!, {r0, r1}
	char test2[] = "You can do it!";
200003b8:	2308      	movs	r3, #8
200003ba:	18fb      	adds	r3, r7, r3
200003bc:	4a1b      	ldr	r2, [pc, #108]	; (2000042c <main+0x8c>)
200003be:	ca23      	ldmia	r2!, {r0, r1, r5}
200003c0:	c323      	stmia	r3!, {r0, r1, r5}
200003c2:	8811      	ldrh	r1, [r2, #0]
200003c4:	8019      	strh	r1, [r3, #0]
200003c6:	7892      	ldrb	r2, [r2, #2]
200003c8:	709a      	strb	r2, [r3, #2]
	
	init_app();
200003ca:	f7ff ffdd 	bl	20000388 <init_app>
	ascii_init();
200003ce:	f7ff ff8e 	bl	200002ee <ascii_init>
	ascii_gotoxy(1,1);
200003d2:	2101      	movs	r1, #1
200003d4:	2001      	movs	r0, #1
200003d6:	f7ff ff6f 	bl	200002b8 <ascii_gotoxy>
	s = test1;
200003da:	193b      	adds	r3, r7, r4
200003dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(*s)
200003de:	e006      	b.n	200003ee <main+0x4e>
	{
		ascii_write_char(*s++);
200003e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200003e2:	1c5a      	adds	r2, r3, #1
200003e4:	62fa      	str	r2, [r7, #44]	; 0x2c
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	0018      	movs	r0, r3
200003ea:	f7ff ff47 	bl	2000027c <ascii_write_char>
	while(*s)
200003ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	2b00      	cmp	r3, #0
200003f4:	d1f4      	bne.n	200003e0 <main+0x40>
	}
	ascii_gotoxy(1,2);
200003f6:	2102      	movs	r1, #2
200003f8:	2001      	movs	r0, #1
200003fa:	f7ff ff5d 	bl	200002b8 <ascii_gotoxy>
	s = test2;
200003fe:	2308      	movs	r3, #8
20000400:	18fb      	adds	r3, r7, r3
20000402:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(*s)
20000404:	e006      	b.n	20000414 <main+0x74>
	{
		ascii_write_char(*s++);
20000406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000408:	1c5a      	adds	r2, r3, #1
2000040a:	62fa      	str	r2, [r7, #44]	; 0x2c
2000040c:	781b      	ldrb	r3, [r3, #0]
2000040e:	0018      	movs	r0, r3
20000410:	f7ff ff34 	bl	2000027c <ascii_write_char>
	while(*s)
20000414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000416:	781b      	ldrb	r3, [r3, #0]
20000418:	2b00      	cmp	r3, #0
2000041a:	d1f4      	bne.n	20000406 <main+0x66>
	}
	return 0;
2000041c:	2300      	movs	r3, #0
	
}
2000041e:	0018      	movs	r0, r3
20000420:	46bd      	mov	sp, r7
20000422:	b00c      	add	sp, #48	; 0x30
20000424:	bdb0      	pop	{r4, r5, r7, pc}
20000426:	46c0      	nop			; (mov r8, r8)
20000428:	20000430 	andcs	r0, r0, r0, lsr r4
2000042c:	20000444 	andcs	r0, r0, r4, asr #8
20000430:	79206649 	stmdbvc	r0!, {r0, r3, r6, r9, sl, sp, lr}
20000434:	6320756f 			; <UNDEFINED> instruction: 0x6320756f
20000438:	64206e61 	strtvs	r6, [r0], #-3681	; 0xfffff19f
2000043c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
20000440:	00746920 	rsbseq	r6, r4, r0, lsr #18
20000444:	20756f59 	rsbscs	r6, r5, r9, asr pc
20000448:	206e6163 	rsbcs	r6, lr, r3, ror #2
2000044c:	69206f64 	stmdbvs	r0!, {r2, r5, r6, r8, r9, sl, fp, sp, lr}
20000450:	00002174 	andeq	r2, r0, r4, ror r1

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000031e 	andeq	r0, r0, lr, lsl r3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000000c 	andeq	r0, r0, ip
  10:	0001ac0c 	andeq	sl, r1, ip, lsl #24
  14:	0000c600 	andeq	ip, r0, r0, lsl #12
	...
  24:	01910200 	orrseq	r0, r1, r0, lsl #4
  28:	c3010000 	movwgt	r0, #4096	; 0x1000
  2c:	00000083 	andeq	r0, r0, r3, lsl #1
  30:	200003a0 	andcs	r0, r0, r0, lsr #7
  34:	00000090 	muleq	r0, r0, r0
  38:	00839c01 	addeq	r9, r3, r1, lsl #24
  3c:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
  40:	01000001 	tsteq	r0, r1
  44:	000083c3 	andeq	r8, r0, r3, asr #7
  48:	44910200 	ldrmi	r0, [r1], #512	; 0x200
  4c:	00023b03 	andeq	r3, r2, r3, lsl #22
  50:	8ac30100 	bhi	ff0c0458 <main+0xdf0c00b8>
  54:	02000000 	andeq	r0, r0, #0
  58:	73044091 	movwvc	r4, #16529	; 0x4091
  5c:	90c70100 	sbcls	r0, r7, r0, lsl #2
  60:	02000000 	andeq	r0, r0, #0
  64:	fa056c91 	blx	15b2b0 <startup-0x1fea4d50>
  68:	01000001 	tsteq	r0, r1
  6c:	00009dc8 	andeq	r9, r0, r8, asr #27
  70:	58910200 	ldmpl	r1, {r9}
  74:	00020005 	andeq	r0, r2, r5
  78:	b4c90100 	strblt	r0, [r9], #256	; 0x100
  7c:	02000000 	andeq	r0, r0, #0
  80:	06004891 			; <UNDEFINED> instruction: 0x06004891
  84:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  88:	04070074 	streq	r0, [r7], #-116	; 0xffffff8c
  8c:	00000090 	muleq	r0, r0, r0
  90:	00960407 	addseq	r0, r6, r7, lsl #8
  94:	01080000 	mrseq	r0, (UNDEF: 8)
  98:	00018c08 	andeq	r8, r1, r8, lsl #24
  9c:	00960900 	addseq	r0, r6, r0, lsl #18
  a0:	00ad0000 	adceq	r0, sp, r0
  a4:	ad0a0000 	stcge	0, cr0, [sl, #-0]
  a8:	13000000 	movwne	r0, #0
  ac:	07040800 	streq	r0, [r4, -r0, lsl #16]
  b0:	000000a4 	andeq	r0, r0, r4, lsr #1
  b4:	00009609 	andeq	r9, r0, r9, lsl #12
  b8:	0000c400 	andeq	ip, r0, r0, lsl #8
  bc:	00ad0a00 	adceq	r0, sp, r0, lsl #20
  c0:	000e0000 	andeq	r0, lr, r0
  c4:	0001a30b 	andeq	sl, r1, fp, lsl #6
  c8:	88be0100 	ldmhi	lr!, {r8}
  cc:	18200003 	stmdane	r0!, {r0, r1}
  d0:	01000000 	mrseq	r0, (UNDEF: 0)
  d4:	02400c9c 	subeq	r0, r0, #156, 24	; 0x9c00
  d8:	a7010000 	strge	r0, [r1, -r0]
  dc:	200002ee 	andcs	r0, r0, lr, ror #5
  e0:	0000009a 	muleq	r0, sl, r0
  e4:	960d9c01 	strls	r9, [sp], -r1, lsl #24
  e8:	01000001 	tsteq	r0, r1
  ec:	0002b89c 	muleq	r2, ip, r8
  f0:	00003620 	andeq	r3, r0, r0, lsr #12
  f4:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
  f8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
  fc:	00776f72 	rsbseq	r6, r7, r2, ror pc
 100:	00839c01 	addeq	r9, r3, r1, lsl #24
 104:	91020000 	mrsls	r0, (UNDEF: 2)
 108:	6f630e6c 	svcvs	0x00630e6c
 10c:	9c01006c 	stcls	0, cr0, [r1], {108}	; 0x6c
 110:	00000083 	andeq	r0, r0, r3, lsl #1
 114:	05689102 	strbeq	r9, [r8, #-258]!	; 0xfffffefe
 118:	0000021e 	andeq	r0, r0, lr, lsl r2
 11c:	00ad9e01 	adceq	r9, sp, r1, lsl #28
 120:	91020000 	mrsls	r0, (UNDEF: 2)
 124:	270d0074 	smlsdxcs	sp, r4, r0, r0
 128:	01000001 	tsteq	r0, r1
 12c:	00027c94 	muleq	r2, r4, ip
 130:	00003c20 	andeq	r3, r0, r0, lsr #24
 134:	489c0100 	ldmmi	ip, {r8}
 138:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 13c:	94010063 	strls	r0, [r1], #-99	; 0xffffff9d
 140:	00000148 	andeq	r0, r0, r8, asr #2
 144:	00779102 	rsbseq	r9, r7, r2, lsl #2
 148:	83080108 	movwhi	r0, #33032	; 0x8108
 14c:	0f000001 	svceq	0x00000001
 150:	0000015b 	andeq	r0, r0, fp, asr r1
 154:	02288801 	eoreq	r8, r8, #65536	; 0x10000
 158:	00542000 	subseq	r2, r4, r0
 15c:	9c010000 	stcls	0, cr0, [r1], {-0}
 160:	00000173 	andeq	r0, r0, r3, ror r1
 164:	0000f805 	andeq	pc, r0, r5, lsl #16
 168:	ad8e0100 	stfges	f0, [lr]
 16c:	02000000 	andeq	r0, r0, #0
 170:	0f007491 	svceq	0x00007491
 174:	00000167 	andeq	r0, r0, r7, ror #2
 178:	020a7a01 	andeq	r7, sl, #4096	; 0x1000
 17c:	001e2000 	andseq	r2, lr, r0
 180:	9c010000 	stcls	0, cr0, [r1], {-0}
 184:	00000196 	muleq	r0, r6, r1
 188:	0073750e 	rsbseq	r7, r3, lr, lsl #10
 18c:	00837a01 	addeq	r7, r3, r1, lsl #20
 190:	91020000 	mrsls	r0, (UNDEF: 2)
 194:	000f0074 	andeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
 198:	01000000 	mrseq	r0, (UNDEF: 0)
 19c:	0001ec6f 	andeq	lr, r1, pc, ror #24
 1a0:	00001e20 	andeq	r1, r0, r0, lsr #28
 1a4:	b99c0100 	ldmiblt	ip, {r8}
 1a8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 1ac:	0100736d 	tsteq	r0, sp, ror #6
 1b0:	0000836f 	andeq	r8, r0, pc, ror #6
 1b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1b8:	01730200 	cmneq	r3, r0, lsl #4
 1bc:	64010000 	strvs	r0, [r1], #-0
 1c0:	00000148 	andeq	r0, r0, r8, asr #2
 1c4:	200001a0 	andcs	r0, r0, r0, lsr #3
 1c8:	0000004c 	andeq	r0, r0, ip, asr #32
 1cc:	01e09c01 	mvneq	r9, r1, lsl #24
 1d0:	72040000 	andvc	r0, r4, #0
 1d4:	66010076 			; <UNDEFINED> instruction: 0x66010076
 1d8:	00000148 	andeq	r0, r0, r8, asr #2
 1dc:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 1e0:	00013802 	andeq	r3, r1, r2, lsl #16
 1e4:	48590100 	ldmdami	r9, {r8}^
 1e8:	54000001 	strpl	r0, [r0], #-1
 1ec:	4c200001 	stcmi	0, cr0, [r0], #-4
 1f0:	01000000 	mrseq	r0, (UNDEF: 0)
 1f4:	0002079c 	muleq	r2, ip, r7
 1f8:	76720400 	ldrbtvc	r0, [r2], -r0, lsl #8
 1fc:	485b0100 	ldmdami	fp, {r8}^
 200:	02000001 	andeq	r0, r0, #1
 204:	0d006f91 	stceq	15, cr6, [r0, #-580]	; 0xfffffdbc
 208:	0000014a 	andeq	r0, r0, sl, asr #2
 20c:	012a5001 			; <UNDEFINED> instruction: 0x012a5001
 210:	002a2000 	eoreq	r2, sl, r0
 214:	9c010000 	stcls	0, cr0, [r1], {-0}
 218:	0000022b 	andeq	r0, r0, fp, lsr #4
 21c:	00017e03 	andeq	r7, r1, r3, lsl #28
 220:	48500100 	ldmdami	r0, {r8}^
 224:	02000001 	andeq	r0, r0, #1
 228:	0d007791 	stceq	7, cr7, [r0, #-580]	; 0xfffffdbc
 22c:	00000206 	andeq	r0, r0, r6, lsl #4
 230:	01004801 	tsteq	r0, r1, lsl #16
 234:	002a2000 	eoreq	r2, sl, r0
 238:	9c010000 	stcls	0, cr0, [r1], {-0}
 23c:	0000024f 	andeq	r0, r0, pc, asr #4
 240:	0001e803 	andeq	lr, r1, r3, lsl #16
 244:	48480100 	stmdami	r8, {r8}^
 248:	02000001 	andeq	r0, r0, #1
 24c:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 250:	00000225 	andeq	r0, r0, r5, lsr #4
 254:	01483c01 	cmpeq	r8, r1, lsl #24
 258:	00cc0000 	sbceq	r0, ip, r0
 25c:	00342000 	eorseq	r2, r4, r0
 260:	9c010000 	stcls	0, cr0, [r1], {-0}
 264:	00000283 	andeq	r0, r0, r3, lsl #5
 268:	00767204 	rsbseq	r7, r6, r4, lsl #4
 26c:	01483e01 	cmpeq	r8, r1, lsl #28
 270:	91020000 	mrsls	r0, (UNDEF: 2)
 274:	015b1077 	cmpeq	fp, r7, ror r0
 278:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 27c:	00000083 	andeq	r0, r0, r3, lsl #1
 280:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
 284:	000000fd 	strdeq	r0, [r0], -sp
 288:	009c3401 	addseq	r3, ip, r1, lsl #8
 28c:	00302000 	eorseq	r2, r0, r0
 290:	9c010000 	stcls	0, cr0, [r1], {-0}
 294:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 298:	0001f003 	andeq	pc, r1, r3
 29c:	48340100 	ldmdami	r4!, {r8}
 2a0:	02000001 	andeq	r0, r0, #1
 2a4:	5b107791 	blpl	41e0f0 <startup-0x1fbe1f10>
 2a8:	01000001 	tsteq	r0, r1
 2ac:	00008338 	andeq	r8, r0, r8, lsr r3
 2b0:	00001100 	andeq	r1, r0, r0, lsl #2
 2b4:	0000b10f 	andeq	fp, r0, pc, lsl #2
 2b8:	542c0100 	strtpl	r0, [ip], #-256	; 0xffffff00
 2bc:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
 2c0:	01000000 	mrseq	r0, (UNDEF: 0)
 2c4:	0002e29c 	muleq	r2, ip, r2
 2c8:	00780e00 	rsbseq	r0, r8, r0, lsl #28
 2cc:	01482c01 	cmpeq	r8, r1, lsl #24
 2d0:	91020000 	mrsls	r0, (UNDEF: 2)
 2d4:	0063046f 	rsbeq	r0, r3, pc, ror #8
 2d8:	01482e01 	cmpeq	r8, r1, lsl #28
 2dc:	91020000 	mrsls	r0, (UNDEF: 2)
 2e0:	140f0077 	strne	r0, [pc], #-119	; 2e8 <startup-0x1ffffd18>
 2e4:	01000001 	tsteq	r0, r1
 2e8:	00001024 	andeq	r1, r0, r4, lsr #32
 2ec:	00004420 	andeq	r4, r0, r0, lsr #8
 2f0:	109c0100 	addsne	r0, ip, r0, lsl #2
 2f4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
 2f8:	24010078 	strcs	r0, [r1], #-120	; 0xffffff88
 2fc:	00000148 	andeq	r0, r0, r8, asr #2
 300:	046f9102 	strbteq	r9, [pc], #-258	; 308 <startup-0x1ffffcf8>
 304:	26010063 	strcs	r0, [r1], -r3, rrx
 308:	00000148 	andeq	r0, r0, r8, asr #2
 30c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 310:	0002160b 	andeq	r1, r2, fp, lsl #12
 314:	001a0100 	andseq	r0, sl, r0, lsl #2
 318:	0c200000 	stceq	0, cr0, [r0], #-0
 31c:	01000000 	mrseq	r0, (UNDEF: 0)
 320:	Address 0x00000320 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	01111349 	tsteq	r1, r9, asr #6
  24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  28:	01194296 			; <UNDEFINED> instruction: 0x01194296
  2c:	03000013 	movweq	r0, #19
  30:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  3c:	34040000 	strcc	r0, [r4], #-0
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	00180213 	andseq	r0, r8, r3, lsl r2
  4c:	00340500 	eorseq	r0, r4, r0, lsl #10
  50:	0b3a0e03 	bleq	e83864 <startup-0x1f17c79c>
  54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	0b002406 	bleq	907c <startup-0x1fff6f84>
  60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  64:	07000008 	streq	r0, [r0, -r8]
  68:	0b0b000f 	bleq	2c00ac <startup-0x1fd3ff54>
  6c:	00001349 	andeq	r1, r0, r9, asr #6
  70:	0b002408 	bleq	9098 <startup-0x1fff6f68>
  74:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  78:	0900000e 	stmdbeq	r0, {r1, r2, r3}
  7c:	13490101 	movtne	r0, #37121	; 0x9101
  80:	00001301 	andeq	r1, r0, r1, lsl #6
  84:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
  88:	000b2f13 	andeq	r2, fp, r3, lsl pc
  8c:	002e0b00 	eoreq	r0, lr, r0, lsl #22
  90:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  94:	0b3b0b3a 	bleq	ec2d84 <startup-0x1f13d27c>
  98:	01111927 	tsteq	r1, r7, lsr #18
  9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  a0:	00194297 	mulseq	r9, r7, r2
  a4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
  a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  ac:	0b3b0b3a 	bleq	ec2d9c <startup-0x1f13d264>
  b0:	01111927 	tsteq	r1, r7, lsr #18
  b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b8:	00194296 	mulseq	r9, r6, r2
  bc:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c4:	0b3b0b3a 	bleq	ec2db4 <startup-0x1f13d24c>
  c8:	01111927 	tsteq	r1, r7, lsr #18
  cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  d8:	08030005 	stmdaeq	r3, {r0, r2}
  dc:	0b3b0b3a 	bleq	ec2dcc <startup-0x1f13d234>
  e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  e4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  e8:	03193f01 	tsteq	r9, #1, 30
  ec:	3b0b3a0e 	blcc	2ce92c <startup-0x1fd316d4>
  f0:	1119270b 	tstne	r9, fp, lsl #14
  f4:	40061201 	andmi	r1, r6, r1, lsl #4
  f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  fc:	00001301 	andeq	r1, r0, r1, lsl #6
 100:	3f012e10 	svccc	0x00012e10
 104:	3a0e0319 	bcc	380d70 <startup-0x1fc7f290>
 108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 10c:	00193c13 	andseq	r3, r9, r3, lsl ip
 110:	00181100 	andseq	r1, r8, r0, lsl #2
 114:	Address 0x00000114 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000420 	andeq	r0, r0, r0, lsr #8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000430 	andcs	r0, r0, r0, lsr r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000011c 	andeq	r0, r0, ip, lsl r1
   4:	00520002 	subseq	r0, r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
  28:	6f442f61 	svcvs	0x00442f61
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; ffffff18 <main+0xdffffb78>
  38:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; ffffff04 <main+0xdffffb64>
  3c:	612f504f 			; <UNDEFINED> instruction: 0x612f504f
  40:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  44:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  48:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	00000001 	andeq	r0, r0, r1
  5c:	00020500 	andeq	r0, r2, r0, lsl #10
  60:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  64:	5e13011a 	mrcpl	1, 0, r0, cr3, cr10, {0}
  68:	01000302 	tsteq	r0, r2, lsl #6
  6c:	02050001 	andeq	r0, r5, #1
  70:	20000010 	andcs	r0, r0, r0, lsl r0
  74:	68012403 	stmdavs	r1, {r0, r1, sl, sp}
  78:	7759ad59 			; <UNDEFINED> instruction: 0x7759ad59
  7c:	4be55968 	blmi	ff956624 <main+0xdf956284>
  80:	4b3d6769 	blmi	f59e2c <startup-0x1f0a61d4>
  84:	3e693d2f 	cdpcc	13, 6, cr3, cr9, cr15, {1}
  88:	4b2f2f3d 	blmi	bcbd84 <startup-0x1f43427c>
  8c:	6777303d 			; <UNDEFINED> instruction: 0x6777303d
  90:	4d5a3d3d 	ldclmi	13, cr3, [sl, #-244]	; 0xffffff0c
  94:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
  98:	3d673e4f 	stclcc	14, cr3, [r7, #-316]!	; 0xfffffec4
  9c:	2f67593d 	svccs	0x0067593d
  a0:	3d673ea1 	stclcc	14, cr3, [r7, #-644]!	; 0xfffffd7c
  a4:	2f67593d 	svccs	0x0067593d
  a8:	37254ba1 	strcc	r4, [r5, -r1, lsr #23]!
  ac:	284b4d43 	stmdacs	fp, {r0, r1, r6, r8, sl, fp, lr}^
  b0:	033c7803 	teqeq	ip, #196608	; 0x30000
  b4:	3d4d3c0a 	stclcc	12, cr3, [sp, #-40]	; 0xffffffd8
  b8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  bc:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
  c0:	06200601 	strteq	r0, [r0], -r1, lsl #12
  c4:	67af3e67 	strvs	r3, [pc, r7, ror #28]!
  c8:	01040200 	mrseq	r0, R12_usr
  cc:	83062006 	movwhi	r2, #24582	; 0x6006
  d0:	4d3d593d 			; <UNDEFINED> instruction: 0x4d3d593d
  d4:	3e3e3d5a 	mrccc	13, 1, r3, cr14, cr10, {2}
  d8:	002f4d91 	mlaeq	pc, r1, sp, r4	; <UNPREDICTABLE>
  dc:	06010402 	streq	r0, [r1], -r2, lsl #8
  e0:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
  e4:	02003e3d 	andeq	r3, r0, #976	; 0x3d0
  e8:	20060104 	andcs	r0, r6, r4, lsl #2
  ec:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
  f0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  f4:	06200601 	strteq	r0, [r0], -r1, lsl #12
  f8:	3e3d3d83 	cdpcc	13, 3, cr3, cr13, cr3, {4}
  fc:	01040200 	mrseq	r0, R12_usr
 100:	83062006 	movwhi	r2, #24582	; 0x6006
 104:	3f3d3d3d 	svccc	0x003d3d3d
 108:	5c773d2f 	ldclpl	13, cr3, [r7], #-188	; 0xffffff44
 10c:	2f2f9275 	svccs	0x002f9275
 110:	72222f4b 	eorvc	r2, r2, #300	; 0x12c
 114:	223d4b4e 	eorscs	r4, sp, #79872	; 0x13800
 118:	02224e72 	eoreq	r4, r2, #1824	; 0x720
 11c:	01010009 	tsteq	r1, r9

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	20554e47 	subscs	r4, r5, r7, asr #28
  10:	20393943 	eorscs	r3, r9, r3, asr #18
  14:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  18:	30322031 	eorscc	r2, r2, r1, lsr r0
  1c:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  20:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  24:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  28:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  2c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  30:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  34:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  38:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  3c:	6172622d 	cmnvs	r2, sp, lsr #4
  40:	2068636e 	rsbcs	r6, r8, lr, ror #6
  44:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  48:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  4c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  50:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  54:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  58:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  70:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  74:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  78:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  7c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  80:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  84:	616d2d20 	cmnvs	sp, r0, lsr #26
  88:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  8c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  90:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  94:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  98:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  9c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  a0:	00393963 	eorseq	r3, r9, r3, ror #18
  a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  ac:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  b0:	63736100 	cmnvs	r3, #0, 2
  b4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  b8:	5f6c7274 	svcpl	0x006c7274
  bc:	5f746962 	svcpl	0x00746962
  c0:	61656c63 	cmnvs	r5, r3, ror #24
  c4:	3a430072 	bcc	10c0294 <startup-0x1ef3fd6c>
  c8:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
  cc:	4d5c7372 	ldclmi	3, cr7, [ip, #-456]	; 0xfffffe38
  d0:	61697261 	cmnvs	r9, r1, ror #4
  d4:	636f445c 	cmnvs	pc, #92, 8	; 0x5c000000
  d8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  dc:	495c7374 	ldmdbmi	ip, {r2, r4, r5, r6, r8, r9, ip, sp, lr}^
  e0:	4f4d5c54 	svcmi	0x004d5c54
  e4:	4f4d5c50 	svcmi	0x004d5c50
  e8:	73615c50 	cmnvc	r1, #80, 24	; 0x5000
  ec:	5f696963 	svcpl	0x00696963
  f0:	70736964 	rsbsvc	r6, r3, r4, ror #18
  f4:	0079616c 	rsbseq	r6, r9, ip, ror #2
  f8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  fc:	63736100 	cmnvs	r3, #0, 2
 100:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 104:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 108:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 10c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffff44 <main+0xdffffba4>
 110:	0072656c 	rsbseq	r6, r2, ip, ror #10
 114:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 118:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 11c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 120:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 124:	61007465 	tstvs	r0, r5, ror #8
 128:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 12c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 130:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 134:	00726168 	rsbseq	r6, r2, r8, ror #2
 138:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 13c:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 140:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 144:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 148:	73610073 	cmnvc	r1, #115	; 0x73
 14c:	5f696963 	svcpl	0x00696963
 150:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 154:	61645f65 	cmnvs	r4, r5, ror #30
 158:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 15c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 160:	3035325f 	eorscc	r3, r5, pc, asr r2
 164:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 168:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 16c:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 170:	61006f72 	tstvs	r0, r2, ror pc
 174:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 178:	6165725f 	cmnvs	r5, pc, asr r2
 17c:	61645f64 	cmnvs	r4, r4, ror #30
 180:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
 184:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 188:	2064656e 	rsbcs	r6, r4, lr, ror #10
 18c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 190:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 194:	7361006e 	cmnvc	r1, #110	; 0x6e
 198:	5f696963 	svcpl	0x00696963
 19c:	6f746f67 	svcvs	0x00746f67
 1a0:	69007978 	stmdbvs	r0, {r3, r4, r5, r6, r8, fp, ip, sp, lr}
 1a4:	5f74696e 	svcpl	0x0074696e
 1a8:	00707061 	rsbseq	r7, r0, r1, rrx
 1ac:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff771 <main+0xdffff3d1>
 1b0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1b4:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 1b8:	442f6169 	strtmi	r6, [pc], #-361	; 1c0 <startup-0x1ffffe40>
 1bc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1c0:	73746e65 	cmnvc	r4, #1616	; 0x650
 1c4:	2f54492f 	svccs	0x0054492f
 1c8:	2f504f4d 	svccs	0x00504f4d
 1cc:	2f504f4d 	svccs	0x00504f4d
 1d0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1d4:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d8:	616c7073 	smcvs	50947	; 0xc703
 1dc:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 1e0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1e4:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1e8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1ec:	00646e61 	rsbeq	r6, r4, r1, ror #28
 1f0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 1f4:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 1f8:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
 1fc:	00317473 	eorseq	r7, r1, r3, ror r4
 200:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 204:	73610032 	cmnvc	r1, #50	; 0x32
 208:	5f696963 	svcpl	0x00696963
 20c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 210:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 214:	74730064 	ldrbtvc	r0, [r3], #-100	; 0xffffff9c
 218:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 21c:	64610070 	strbtvs	r0, [r1], #-112	; 0xffffff90
 220:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 224:	63736100 	cmnvs	r3, #0, 2
 228:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 22c:	5f646165 	svcpl	0x00646165
 230:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 234:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 238:	61007265 	tstvs	r0, r5, ror #4
 23c:	00766772 	rsbseq	r6, r6, r2, ror r7
 240:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 244:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 248:	Address 0x00000248 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffef6e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000054 	andcs	r0, r0, r4, asr r0
  4c:	00000048 	andeq	r0, r0, r8, asr #32
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	180e4101 	stmdane	lr, {r0, r8, lr}
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	2000009c 	mulcs	r0, ip, r0
  6c:	00000030 	andeq	r0, r0, r0, lsr r0
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	100e4101 	andne	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000cc 	andcs	r0, r0, ip, asr #1
  8c:	00000034 	andeq	r0, r0, r4, lsr r0
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	20000100 	andcs	r0, r0, r0, lsl #2
  ac:	0000002a 	andeq	r0, r0, sl, lsr #32
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	100e4101 	andne	r4, lr, r1, lsl #2
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	2000012a 	andcs	r0, r0, sl, lsr #2
  cc:	0000002a 	andeq	r0, r0, sl, lsr #32
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	100e4101 	andne	r4, lr, r1, lsl #2
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
  e0:	00000020 	andeq	r0, r0, r0, lsr #32
  e4:	00000000 	andeq	r0, r0, r0
  e8:	20000154 	andcs	r0, r0, r4, asr r1
  ec:	0000004c 	andeq	r0, r0, ip, asr #32
  f0:	400c0e41 	andmi	r0, ip, r1, asr #28
  f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  f8:	018e4002 	orreq	r4, lr, r2
  fc:	41180e41 	tstmi	r8, r1, asr #28
 100:	0000070d 	andeq	r0, r0, sp, lsl #14
 104:	00000020 	andeq	r0, r0, r0, lsr #32
 108:	00000000 	andeq	r0, r0, r0
 10c:	200001a0 	andcs	r0, r0, r0, lsr #3
 110:	0000004c 	andeq	r0, r0, ip, asr #32
 114:	400c0e41 	andmi	r0, ip, r1, asr #28
 118:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 11c:	018e4002 	orreq	r4, lr, r2
 120:	41180e41 	tstmi	r8, r1, asr #28
 124:	0000070d 	andeq	r0, r0, sp, lsl #14
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200001ec 	andcs	r0, r0, ip, ror #3
 134:	0000001e 	andeq	r0, r0, lr, lsl r0
 138:	40080e41 	andmi	r0, r8, r1, asr #28
 13c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 140:	100e4101 	andne	r4, lr, r1, lsl #2
 144:	00070d41 	andeq	r0, r7, r1, asr #26
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	2000020a 	andcs	r0, r0, sl, lsl #4
 154:	0000001e 	andeq	r0, r0, lr, lsl r0
 158:	40080e41 	andmi	r0, r8, r1, asr #28
 15c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 160:	100e4101 	andne	r4, lr, r1, lsl #2
 164:	00070d41 	andeq	r0, r7, r1, asr #26
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	20000228 	andcs	r0, r0, r8, lsr #4
 174:	00000054 	andeq	r0, r0, r4, asr r0
 178:	40080e41 	andmi	r0, r8, r1, asr #28
 17c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 180:	100e4101 	andne	r4, lr, r1, lsl #2
 184:	00070d41 	andeq	r0, r7, r1, asr #26
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	2000027c 	andcs	r0, r0, ip, ror r2
 194:	0000003c 	andeq	r0, r0, ip, lsr r0
 198:	40080e41 	andmi	r0, r8, r1, asr #28
 19c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a0:	100e4101 	andne	r4, lr, r1, lsl #2
 1a4:	00070d41 	andeq	r0, r7, r1, asr #26
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 1b4:	00000036 	andeq	r0, r0, r6, lsr r0
 1b8:	40080e41 	andmi	r0, r8, r1, asr #28
 1bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1c4:	00070d41 	andeq	r0, r7, r1, asr #26
 1c8:	00000018 	andeq	r0, r0, r8, lsl r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	200002ee 	andcs	r0, r0, lr, ror #5
 1d4:	0000009a 	muleq	r0, sl, r0
 1d8:	40080e41 	andmi	r0, r8, r1, asr #28
 1dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1e4:	00000018 	andeq	r0, r0, r8, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	20000388 	andcs	r0, r0, r8, lsl #7
 1f0:	00000018 	andeq	r0, r0, r8, lsl r0
 1f4:	40080e41 	andmi	r0, r8, r1, asr #28
 1f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 200:	00000024 	andeq	r0, r0, r4, lsr #32
 204:	00000000 	andeq	r0, r0, r0
 208:	200003a0 	andcs	r0, r0, r0, lsr #7
 20c:	00000090 	muleq	r0, r0, r0
 210:	40100e41 	andsmi	r0, r0, r1, asr #28
 214:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 218:	02874003 	addeq	r4, r7, #3
 21c:	41018e40 	tstmi	r1, r0, asr #28
 220:	0d41400e 	stcleq	0, cr4, [r1, #-56]	; 0xffffffc8
 224:	00000007 	andeq	r0, r0, r7
