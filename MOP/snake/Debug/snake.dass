
./Debug/snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fa36 	bl	20000474 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_milli>:
#include <delay.h>
#include <gpio.h>

void delay_milli(int ms)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
	while(ms > 0)
20000018:	e002      	b.n	20000020 <delay_milli+0x10>
	{
	#ifndef SIMULATOR
	delay_micro(1000);
	#endif
	ms--;
2000001a:	687b      	ldr	r3, [r7, #4]
2000001c:	3b01      	subs	r3, #1
2000001e:	607b      	str	r3, [r7, #4]
	while(ms > 0)
20000020:	687b      	ldr	r3, [r7, #4]
20000022:	2b00      	cmp	r3, #0
20000024:	dcf9      	bgt.n	2000001a <delay_milli+0xa>
	}
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	b002      	add	sp, #8
2000002c:	bd80      	pop	{r7, pc}

2000002e <delay_micro>:

void delay_micro(int us)
{
2000002e:	b580      	push	{r7, lr}
20000030:	b082      	sub	sp, #8
20000032:	af00      	add	r7, sp, #0
20000034:	6078      	str	r0, [r7, #4]
	while(us > 0)
20000036:	e002      	b.n	2000003e <delay_micro+0x10>
	delay_250ns();
	delay_250ns();
	delay_250ns();
	delay_250ns();
	#endif
	us--;
20000038:	687b      	ldr	r3, [r7, #4]
2000003a:	3b01      	subs	r3, #1
2000003c:	607b      	str	r3, [r7, #4]
	while(us > 0)
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	2b00      	cmp	r3, #0
20000042:	dcf9      	bgt.n	20000038 <delay_micro+0xa>
	}
}
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	46bd      	mov	sp, r7
20000048:	b002      	add	sp, #8
2000004a:	bd80      	pop	{r7, pc}

2000004c <delay_250ns>:

void delay_250ns(void)
{
2000004c:	b580      	push	{r7, lr}
2000004e:	b082      	sub	sp, #8
20000050:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <delay_250ns+0x48>)
20000054:	2200      	movs	r2, #0
20000056:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 0x29; //0x2A - 1
20000058:	4b0f      	ldr	r3, [pc, #60]	; (20000098 <delay_250ns+0x4c>)
2000005a:	2229      	movs	r2, #41	; 0x29
2000005c:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0x0;
2000005e:	4b0f      	ldr	r3, [pc, #60]	; (2000009c <delay_250ns+0x50>)
20000060:	2200      	movs	r2, #0
20000062:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000064:	4b0b      	ldr	r3, [pc, #44]	; (20000094 <delay_250ns+0x48>)
20000066:	2205      	movs	r2, #5
20000068:	601a      	str	r2, [r3, #0]
	unsigned int ctrl = *STK_CTRL & 0x10000;
2000006a:	4b0a      	ldr	r3, [pc, #40]	; (20000094 <delay_250ns+0x48>)
2000006c:	681a      	ldr	r2, [r3, #0]
2000006e:	2380      	movs	r3, #128	; 0x80
20000070:	025b      	lsls	r3, r3, #9
20000072:	4013      	ands	r3, r2
20000074:	607b      	str	r3, [r7, #4]
	while((*STK_CTRL & 0x10000) == 0);
20000076:	46c0      	nop			; (mov r8, r8)
20000078:	4b06      	ldr	r3, [pc, #24]	; (20000094 <delay_250ns+0x48>)
2000007a:	681a      	ldr	r2, [r3, #0]
2000007c:	2380      	movs	r3, #128	; 0x80
2000007e:	025b      	lsls	r3, r3, #9
20000080:	4013      	ands	r3, r2
20000082:	d0f9      	beq.n	20000078 <delay_250ns+0x2c>
	*STK_CTRL= 0;
20000084:	4b03      	ldr	r3, [pc, #12]	; (20000094 <delay_250ns+0x48>)
20000086:	2200      	movs	r2, #0
20000088:	601a      	str	r2, [r3, #0]
	
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	e000e010 	and	lr, r0, r0, lsl r0
20000098:	e000e014 	and	lr, r0, r4, lsl r0
2000009c:	e000e018 	and	lr, r0, r8, lsl r0

200000a0 <delay_500ns>:

void delay_500ns(void)
{
200000a0:	b580      	push	{r7, lr}
200000a2:	af00      	add	r7, sp, #0
	#ifndef SIMULATOR
	delay_250ns();
	delay_250ns();
	#endif
}
200000a4:	46c0      	nop			; (mov r8, r8)
200000a6:	46bd      	mov	sp, r7
200000a8:	bd80      	pop	{r7, pc}
200000aa:	46c0      	nop			; (mov r8, r8)

200000ac <set_object_speed>:
OBJECT snakeVec[100];
POBJECT pSnakeVec[100];



void set_object_speed(POBJECT o, int speedx, int speedy){
200000ac:	b580      	push	{r7, lr}
200000ae:	b084      	sub	sp, #16
200000b0:	af00      	add	r7, sp, #0
200000b2:	60f8      	str	r0, [r7, #12]
200000b4:	60b9      	str	r1, [r7, #8]
200000b6:	607a      	str	r2, [r7, #4]
	if(speedx != -o->dirx)
200000b8:	68fb      	ldr	r3, [r7, #12]
200000ba:	685b      	ldr	r3, [r3, #4]
200000bc:	425b      	negs	r3, r3
200000be:	68ba      	ldr	r2, [r7, #8]
200000c0:	429a      	cmp	r2, r3
200000c2:	d002      	beq.n	200000ca <set_object_speed+0x1e>
	{
		o->dirx = speedx;
200000c4:	68fb      	ldr	r3, [r7, #12]
200000c6:	68ba      	ldr	r2, [r7, #8]
200000c8:	605a      	str	r2, [r3, #4]
	}
	if(speedy != -o->diry){
200000ca:	68fb      	ldr	r3, [r7, #12]
200000cc:	689b      	ldr	r3, [r3, #8]
200000ce:	425b      	negs	r3, r3
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	429a      	cmp	r2, r3
200000d4:	d002      	beq.n	200000dc <set_object_speed+0x30>
		o->diry = speedy;
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	687a      	ldr	r2, [r7, #4]
200000da:	609a      	str	r2, [r3, #8]
	}
}
200000dc:	46c0      	nop			; (mov r8, r8)
200000de:	46bd      	mov	sp, r7
200000e0:	b004      	add	sp, #16
200000e2:	bd80      	pop	{r7, pc}

200000e4 <move_object>:

void move_object(POBJECT o){
200000e4:	b580      	push	{r7, lr}
200000e6:	b082      	sub	sp, #8
200000e8:	af00      	add	r7, sp, #0
200000ea:	6078      	str	r0, [r7, #4]
	//clear_object(o);
	o->posx += o->dirx;
200000ec:	687b      	ldr	r3, [r7, #4]
200000ee:	68da      	ldr	r2, [r3, #12]
200000f0:	687b      	ldr	r3, [r7, #4]
200000f2:	685b      	ldr	r3, [r3, #4]
200000f4:	18d2      	adds	r2, r2, r3
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	691a      	ldr	r2, [r3, #16]
200000fe:	687b      	ldr	r3, [r7, #4]
20000100:	689b      	ldr	r3, [r3, #8]
20000102:	18d2      	adds	r2, r2, r3
20000104:	687b      	ldr	r3, [r7, #4]
20000106:	611a      	str	r2, [r3, #16]
	
	if(o->posx <= 1){
20000108:	687b      	ldr	r3, [r7, #4]
2000010a:	68db      	ldr	r3, [r3, #12]
2000010c:	2b01      	cmp	r3, #1
2000010e:	dc06      	bgt.n	2000011e <move_object+0x3a>
		o->posx = 128 - o->geo->sizex;
20000110:	687b      	ldr	r3, [r7, #4]
20000112:	681b      	ldr	r3, [r3, #0]
20000114:	685b      	ldr	r3, [r3, #4]
20000116:	2280      	movs	r2, #128	; 0x80
20000118:	1ad2      	subs	r2, r2, r3
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	60da      	str	r2, [r3, #12]
	}
	if(o->posx > 128 - o->geo->sizex){
2000011e:	687b      	ldr	r3, [r7, #4]
20000120:	68da      	ldr	r2, [r3, #12]
20000122:	687b      	ldr	r3, [r7, #4]
20000124:	681b      	ldr	r3, [r3, #0]
20000126:	685b      	ldr	r3, [r3, #4]
20000128:	2180      	movs	r1, #128	; 0x80
2000012a:	1acb      	subs	r3, r1, r3
2000012c:	429a      	cmp	r2, r3
2000012e:	dd02      	ble.n	20000136 <move_object+0x52>
		o->posx = 1;
20000130:	687b      	ldr	r3, [r7, #4]
20000132:	2201      	movs	r2, #1
20000134:	60da      	str	r2, [r3, #12]
	}
	if(o->posy <= 1){
20000136:	687b      	ldr	r3, [r7, #4]
20000138:	691b      	ldr	r3, [r3, #16]
2000013a:	2b01      	cmp	r3, #1
2000013c:	dc06      	bgt.n	2000014c <move_object+0x68>
		o->posy = 64 - o->geo->sizey;
2000013e:	687b      	ldr	r3, [r7, #4]
20000140:	681b      	ldr	r3, [r3, #0]
20000142:	689b      	ldr	r3, [r3, #8]
20000144:	2240      	movs	r2, #64	; 0x40
20000146:	1ad2      	subs	r2, r2, r3
20000148:	687b      	ldr	r3, [r7, #4]
2000014a:	611a      	str	r2, [r3, #16]
	}
	if(o->posy > 64 - o->geo->sizey){
2000014c:	687b      	ldr	r3, [r7, #4]
2000014e:	691a      	ldr	r2, [r3, #16]
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	681b      	ldr	r3, [r3, #0]
20000154:	689b      	ldr	r3, [r3, #8]
20000156:	2140      	movs	r1, #64	; 0x40
20000158:	1acb      	subs	r3, r1, r3
2000015a:	429a      	cmp	r2, r3
2000015c:	dd02      	ble.n	20000164 <move_object+0x80>
		o->posy = 1 ;
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	2201      	movs	r2, #1
20000162:	611a      	str	r2, [r3, #16]
	}
	//draw_object(o);
}
20000164:	46c0      	nop			; (mov r8, r8)
20000166:	46bd      	mov	sp, r7
20000168:	b002      	add	sp, #8
2000016a:	bd80      	pop	{r7, pc}

2000016c <init_app>:




void init_app(void)
{
2000016c:	b580      	push	{r7, lr}
2000016e:	af00      	add	r7, sp, #0
	#ifdef USBDM
	*((unsigned long*) 0x40023830) = 0x18;
	__asm volatile("LDR R0,=0x08000209\n BLX R0\n");
	#endif
	
	GPIO_D.moder= 0x55005555;
20000170:	4b08      	ldr	r3, [pc, #32]	; (20000194 <init_app+0x28>)
20000172:	4a09      	ldr	r2, [pc, #36]	; (20000198 <init_app+0x2c>)
20000174:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper = 0x0100;
20000176:	4b07      	ldr	r3, [pc, #28]	; (20000194 <init_app+0x28>)
20000178:	2280      	movs	r2, #128	; 0x80
2000017a:	0052      	lsls	r2, r2, #1
2000017c:	809a      	strh	r2, [r3, #4]
	GPIO_D.pupdr = 0x00AA0000;
2000017e:	4b05      	ldr	r3, [pc, #20]	; (20000194 <init_app+0x28>)
20000180:	22aa      	movs	r2, #170	; 0xaa
20000182:	0412      	lsls	r2, r2, #16
20000184:	60da      	str	r2, [r3, #12]
	GPIO_E.moder = 0x55555555;
20000186:	4b05      	ldr	r3, [pc, #20]	; (2000019c <init_app+0x30>)
20000188:	4a05      	ldr	r2, [pc, #20]	; (200001a0 <init_app+0x34>)
2000018a:	601a      	str	r2, [r3, #0]
}
2000018c:	46c0      	nop			; (mov r8, r8)
2000018e:	46bd      	mov	sp, r7
20000190:	bd80      	pop	{r7, pc}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	40020c00 	andmi	r0, r2, r0, lsl #24
20000198:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
2000019c:	40021000 	andmi	r1, r2, r0
200001a0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001a4 <collision>:
int points =0;
char *st;
char string[] = "Points";

void collision(POBJECT pSnakeVec[], POBJECT a)
{
200001a4:	b590      	push	{r4, r7, lr}
200001a6:	b089      	sub	sp, #36	; 0x24
200001a8:	af00      	add	r7, sp, #0
200001aa:	6078      	str	r0, [r7, #4]
200001ac:	6039      	str	r1, [r7, #0]
	POBJECT p = pSnakeVec[0];
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	681b      	ldr	r3, [r3, #0]
200001b2:	61fb      	str	r3, [r7, #28]
	if(p->posx +4 >= a->posx & p->posx <= a->posx + 4)
200001b4:	69fb      	ldr	r3, [r7, #28]
200001b6:	68db      	ldr	r3, [r3, #12]
200001b8:	1d1a      	adds	r2, r3, #4
200001ba:	683b      	ldr	r3, [r7, #0]
200001bc:	68db      	ldr	r3, [r3, #12]
200001be:	17d0      	asrs	r0, r2, #31
200001c0:	0fd9      	lsrs	r1, r3, #31
200001c2:	429a      	cmp	r2, r3
200001c4:	4148      	adcs	r0, r1
200001c6:	0003      	movs	r3, r0
200001c8:	b2d9      	uxtb	r1, r3
200001ca:	69fb      	ldr	r3, [r7, #28]
200001cc:	68db      	ldr	r3, [r3, #12]
200001ce:	683a      	ldr	r2, [r7, #0]
200001d0:	68d2      	ldr	r2, [r2, #12]
200001d2:	3204      	adds	r2, #4
200001d4:	0fdc      	lsrs	r4, r3, #31
200001d6:	17d0      	asrs	r0, r2, #31
200001d8:	429a      	cmp	r2, r3
200001da:	4144      	adcs	r4, r0
200001dc:	0023      	movs	r3, r4
200001de:	b2db      	uxtb	r3, r3
200001e0:	400b      	ands	r3, r1
200001e2:	b2db      	uxtb	r3, r3
200001e4:	2b00      	cmp	r3, #0
200001e6:	d100      	bne.n	200001ea <collision+0x46>
200001e8:	e0b3      	b.n	20000352 <collision+0x1ae>
	{
		if(p->posy +4 >= a->posy & p->posy <= a->posy + 4)
200001ea:	69fb      	ldr	r3, [r7, #28]
200001ec:	691b      	ldr	r3, [r3, #16]
200001ee:	1d1a      	adds	r2, r3, #4
200001f0:	683b      	ldr	r3, [r7, #0]
200001f2:	691b      	ldr	r3, [r3, #16]
200001f4:	17d0      	asrs	r0, r2, #31
200001f6:	0fd9      	lsrs	r1, r3, #31
200001f8:	429a      	cmp	r2, r3
200001fa:	4148      	adcs	r0, r1
200001fc:	0003      	movs	r3, r0
200001fe:	b2d9      	uxtb	r1, r3
20000200:	69fb      	ldr	r3, [r7, #28]
20000202:	691b      	ldr	r3, [r3, #16]
20000204:	683a      	ldr	r2, [r7, #0]
20000206:	6912      	ldr	r2, [r2, #16]
20000208:	3204      	adds	r2, #4
2000020a:	0fdc      	lsrs	r4, r3, #31
2000020c:	17d0      	asrs	r0, r2, #31
2000020e:	429a      	cmp	r2, r3
20000210:	4144      	adcs	r4, r0
20000212:	0023      	movs	r3, r4
20000214:	b2db      	uxtb	r3, r3
20000216:	400b      	ands	r3, r1
20000218:	b2db      	uxtb	r3, r3
2000021a:	2b00      	cmp	r3, #0
2000021c:	d100      	bne.n	20000220 <collision+0x7c>
2000021e:	e098      	b.n	20000352 <collision+0x1ae>
		{
			clear_object(a);
20000220:	683b      	ldr	r3, [r7, #0]
20000222:	0018      	movs	r0, r3
20000224:	f000 fcf9 	bl	20000c1a <clear_object>
			points++;
20000228:	4b4c      	ldr	r3, [pc, #304]	; (2000035c <collision+0x1b8>)
2000022a:	681b      	ldr	r3, [r3, #0]
2000022c:	1c5a      	adds	r2, r3, #1
2000022e:	4b4b      	ldr	r3, [pc, #300]	; (2000035c <collision+0x1b8>)
20000230:	601a      	str	r2, [r3, #0]
			POBJECT x = pSnakeVec[snakeLength-1];
20000232:	4b4b      	ldr	r3, [pc, #300]	; (20000360 <collision+0x1bc>)
20000234:	681b      	ldr	r3, [r3, #0]
20000236:	4a4b      	ldr	r2, [pc, #300]	; (20000364 <collision+0x1c0>)
20000238:	4694      	mov	ip, r2
2000023a:	4463      	add	r3, ip
2000023c:	009b      	lsls	r3, r3, #2
2000023e:	687a      	ldr	r2, [r7, #4]
20000240:	18d3      	adds	r3, r2, r3
20000242:	681b      	ldr	r3, [r3, #0]
20000244:	61bb      	str	r3, [r7, #24]
			POBJECT y = &snakeVec[snakeLength];
20000246:	4b46      	ldr	r3, [pc, #280]	; (20000360 <collision+0x1bc>)
20000248:	681a      	ldr	r2, [r3, #0]
2000024a:	0013      	movs	r3, r2
2000024c:	009b      	lsls	r3, r3, #2
2000024e:	189b      	adds	r3, r3, r2
20000250:	00db      	lsls	r3, r3, #3
20000252:	4a45      	ldr	r2, [pc, #276]	; (20000368 <collision+0x1c4>)
20000254:	189b      	adds	r3, r3, r2
20000256:	617b      	str	r3, [r7, #20]
			
			extend_snake(&snakeVec[snakeLength],pSnakeVec[snakeLength-1] );
20000258:	4b41      	ldr	r3, [pc, #260]	; (20000360 <collision+0x1bc>)
2000025a:	681a      	ldr	r2, [r3, #0]
2000025c:	0013      	movs	r3, r2
2000025e:	009b      	lsls	r3, r3, #2
20000260:	189b      	adds	r3, r3, r2
20000262:	00db      	lsls	r3, r3, #3
20000264:	4a40      	ldr	r2, [pc, #256]	; (20000368 <collision+0x1c4>)
20000266:	1898      	adds	r0, r3, r2
20000268:	4b3d      	ldr	r3, [pc, #244]	; (20000360 <collision+0x1bc>)
2000026a:	681b      	ldr	r3, [r3, #0]
2000026c:	4a3d      	ldr	r2, [pc, #244]	; (20000364 <collision+0x1c0>)
2000026e:	4694      	mov	ip, r2
20000270:	4463      	add	r3, ip
20000272:	009b      	lsls	r3, r3, #2
20000274:	687a      	ldr	r2, [r7, #4]
20000276:	18d3      	adds	r3, r2, r3
20000278:	681b      	ldr	r3, [r3, #0]
2000027a:	0019      	movs	r1, r3
2000027c:	f000 f8c8 	bl	20000410 <extend_snake>
			pSnakeVec[snakeLength] = &snakeVec[snakeLength];
20000280:	4b37      	ldr	r3, [pc, #220]	; (20000360 <collision+0x1bc>)
20000282:	6819      	ldr	r1, [r3, #0]
20000284:	4b36      	ldr	r3, [pc, #216]	; (20000360 <collision+0x1bc>)
20000286:	681b      	ldr	r3, [r3, #0]
20000288:	009b      	lsls	r3, r3, #2
2000028a:	687a      	ldr	r2, [r7, #4]
2000028c:	18d2      	adds	r2, r2, r3
2000028e:	000b      	movs	r3, r1
20000290:	009b      	lsls	r3, r3, #2
20000292:	185b      	adds	r3, r3, r1
20000294:	00db      	lsls	r3, r3, #3
20000296:	4934      	ldr	r1, [pc, #208]	; (20000368 <collision+0x1c4>)
20000298:	185b      	adds	r3, r3, r1
2000029a:	6013      	str	r3, [r2, #0]
			snakeLength++;
2000029c:	4b30      	ldr	r3, [pc, #192]	; (20000360 <collision+0x1bc>)
2000029e:	681b      	ldr	r3, [r3, #0]
200002a0:	1c5a      	adds	r2, r3, #1
200002a2:	4b2f      	ldr	r3, [pc, #188]	; (20000360 <collision+0x1bc>)
200002a4:	601a      	str	r2, [r3, #0]
			
			char string[] = "Points:";
200002a6:	2108      	movs	r1, #8
200002a8:	187b      	adds	r3, r7, r1
200002aa:	4a30      	ldr	r2, [pc, #192]	; (2000036c <collision+0x1c8>)
200002ac:	ca11      	ldmia	r2!, {r0, r4}
200002ae:	c311      	stmia	r3!, {r0, r4}
			st = string;
200002b0:	4b2f      	ldr	r3, [pc, #188]	; (20000370 <collision+0x1cc>)
200002b2:	187a      	adds	r2, r7, r1
200002b4:	601a      	str	r2, [r3, #0]
			ascii_gotoxy(1,1);
200002b6:	2101      	movs	r1, #1
200002b8:	2001      	movs	r0, #1
200002ba:	f000 fe03 	bl	20000ec4 <ascii_gotoxy>
			
			
			while(*st)
200002be:	e008      	b.n	200002d2 <collision+0x12e>
			{
			ascii_write_char(*st++);
200002c0:	4b2b      	ldr	r3, [pc, #172]	; (20000370 <collision+0x1cc>)
200002c2:	681b      	ldr	r3, [r3, #0]
200002c4:	1c59      	adds	r1, r3, #1
200002c6:	4a2a      	ldr	r2, [pc, #168]	; (20000370 <collision+0x1cc>)
200002c8:	6011      	str	r1, [r2, #0]
200002ca:	781b      	ldrb	r3, [r3, #0]
200002cc:	0018      	movs	r0, r3
200002ce:	f000 fddb 	bl	20000e88 <ascii_write_char>
			while(*st)
200002d2:	4b27      	ldr	r3, [pc, #156]	; (20000370 <collision+0x1cc>)
200002d4:	681b      	ldr	r3, [r3, #0]
200002d6:	781b      	ldrb	r3, [r3, #0]
200002d8:	2b00      	cmp	r3, #0
200002da:	d1f1      	bne.n	200002c0 <collision+0x11c>
			}
			
			if(points > 9){
200002dc:	4b1f      	ldr	r3, [pc, #124]	; (2000035c <collision+0x1b8>)
200002de:	681b      	ldr	r3, [r3, #0]
200002e0:	2b09      	cmp	r3, #9
200002e2:	dd25      	ble.n	20000330 <collision+0x18c>
				char ental = points % 10 + '0';
200002e4:	4b1d      	ldr	r3, [pc, #116]	; (2000035c <collision+0x1b8>)
200002e6:	681b      	ldr	r3, [r3, #0]
200002e8:	210a      	movs	r1, #10
200002ea:	0018      	movs	r0, r3
200002ec:	f000 ffc0 	bl	20001270 <__aeabi_idivmod>
200002f0:	000b      	movs	r3, r1
200002f2:	b2da      	uxtb	r2, r3
200002f4:	2412      	movs	r4, #18
200002f6:	193b      	adds	r3, r7, r4
200002f8:	3230      	adds	r2, #48	; 0x30
200002fa:	701a      	strb	r2, [r3, #0]
				char tiotal = (points - ental)/10 + '0';
200002fc:	4b17      	ldr	r3, [pc, #92]	; (2000035c <collision+0x1b8>)
200002fe:	681a      	ldr	r2, [r3, #0]
20000300:	193b      	adds	r3, r7, r4
20000302:	781b      	ldrb	r3, [r3, #0]
20000304:	1ad3      	subs	r3, r2, r3
20000306:	210a      	movs	r1, #10
20000308:	0018      	movs	r0, r3
2000030a:	f000 fecb 	bl	200010a4 <__divsi3>
2000030e:	0003      	movs	r3, r0
20000310:	b2da      	uxtb	r2, r3
20000312:	2111      	movs	r1, #17
20000314:	187b      	adds	r3, r7, r1
20000316:	3230      	adds	r2, #48	; 0x30
20000318:	701a      	strb	r2, [r3, #0]
				ascii_write_char(tiotal);
2000031a:	187b      	adds	r3, r7, r1
2000031c:	781b      	ldrb	r3, [r3, #0]
2000031e:	0018      	movs	r0, r3
20000320:	f000 fdb2 	bl	20000e88 <ascii_write_char>
				ascii_write_char(ental);
20000324:	193b      	adds	r3, r7, r4
20000326:	781b      	ldrb	r3, [r3, #0]
20000328:	0018      	movs	r0, r3
2000032a:	f000 fdad 	bl	20000e88 <ascii_write_char>
2000032e:	e00b      	b.n	20000348 <collision+0x1a4>
			}else{
				char pts = points + '0';
20000330:	4b0a      	ldr	r3, [pc, #40]	; (2000035c <collision+0x1b8>)
20000332:	681b      	ldr	r3, [r3, #0]
20000334:	b2da      	uxtb	r2, r3
20000336:	2113      	movs	r1, #19
20000338:	187b      	adds	r3, r7, r1
2000033a:	3230      	adds	r2, #48	; 0x30
2000033c:	701a      	strb	r2, [r3, #0]
				ascii_write_char(pts);
2000033e:	187b      	adds	r3, r7, r1
20000340:	781b      	ldrb	r3, [r3, #0]
20000342:	0018      	movs	r0, r3
20000344:	f000 fda0 	bl	20000e88 <ascii_write_char>
			}
			
			
			
			
			a->move(a);
20000348:	683b      	ldr	r3, [r7, #0]
2000034a:	69db      	ldr	r3, [r3, #28]
2000034c:	683a      	ldr	r2, [r7, #0]
2000034e:	0010      	movs	r0, r2
20000350:	4798      	blx	r3
		}
	}
}
20000352:	46c0      	nop			; (mov r8, r8)
20000354:	46bd      	mov	sp, r7
20000356:	b009      	add	sp, #36	; 0x24
20000358:	bd90      	pop	{r4, r7, pc}
2000035a:	46c0      	nop			; (mov r8, r8)
2000035c:	2000127c 	andcs	r1, r0, ip, ror r2
20000360:	20002220 	andcs	r2, r0, r0, lsr #4
20000364:	3fffffff 	svccc	0x00ffffff
20000368:	20001280 	andcs	r1, r0, r0, lsl #5
2000036c:	200024b4 			; <UNDEFINED> instruction: 0x200024b4
20000370:	200023b4 			; <UNDEFINED> instruction: 0x200023b4

20000374 <gameOver>:

POBJECT s = &snake;

void gameOver(void)
{
20000374:	b580      	push	{r7, lr}
20000376:	b084      	sub	sp, #16
20000378:	af00      	add	r7, sp, #0
	char string[] = "Game Over";
2000037a:	1d3b      	adds	r3, r7, #4
2000037c:	4a13      	ldr	r2, [pc, #76]	; (200003cc <gameOver+0x58>)
2000037e:	ca03      	ldmia	r2!, {r0, r1}
20000380:	c303      	stmia	r3!, {r0, r1}
20000382:	8812      	ldrh	r2, [r2, #0]
20000384:	801a      	strh	r2, [r3, #0]
	st = string;
20000386:	4b12      	ldr	r3, [pc, #72]	; (200003d0 <gameOver+0x5c>)
20000388:	1d3a      	adds	r2, r7, #4
2000038a:	601a      	str	r2, [r3, #0]
	ascii_gotoxy(1,1);
2000038c:	2101      	movs	r1, #1
2000038e:	2001      	movs	r0, #1
20000390:	f000 fd98 	bl	20000ec4 <ascii_gotoxy>
	
	while(*st)
20000394:	e008      	b.n	200003a8 <gameOver+0x34>
	{
	ascii_write_char(*st++);
20000396:	4b0e      	ldr	r3, [pc, #56]	; (200003d0 <gameOver+0x5c>)
20000398:	681b      	ldr	r3, [r3, #0]
2000039a:	1c59      	adds	r1, r3, #1
2000039c:	4a0c      	ldr	r2, [pc, #48]	; (200003d0 <gameOver+0x5c>)
2000039e:	6011      	str	r1, [r2, #0]
200003a0:	781b      	ldrb	r3, [r3, #0]
200003a2:	0018      	movs	r0, r3
200003a4:	f000 fd70 	bl	20000e88 <ascii_write_char>
	while(*st)
200003a8:	4b09      	ldr	r3, [pc, #36]	; (200003d0 <gameOver+0x5c>)
200003aa:	681b      	ldr	r3, [r3, #0]
200003ac:	781b      	ldrb	r3, [r3, #0]
200003ae:	2b00      	cmp	r3, #0
200003b0:	d1f1      	bne.n	20000396 <gameOver+0x22>
	}
	
	s->dirx = 0;
200003b2:	4b08      	ldr	r3, [pc, #32]	; (200003d4 <gameOver+0x60>)
200003b4:	681b      	ldr	r3, [r3, #0]
200003b6:	2200      	movs	r2, #0
200003b8:	605a      	str	r2, [r3, #4]
	s->diry = 0;
200003ba:	4b06      	ldr	r3, [pc, #24]	; (200003d4 <gameOver+0x60>)
200003bc:	681b      	ldr	r3, [r3, #0]
200003be:	2200      	movs	r2, #0
200003c0:	609a      	str	r2, [r3, #8]
	
}
200003c2:	46c0      	nop			; (mov r8, r8)
200003c4:	46bd      	mov	sp, r7
200003c6:	b004      	add	sp, #16
200003c8:	bd80      	pop	{r7, pc}
200003ca:	46c0      	nop			; (mov r8, r8)
200003cc:	200024bc 			; <UNDEFINED> instruction: 0x200024bc
200003d0:	200023b4 			; <UNDEFINED> instruction: 0x200023b4
200003d4:	20002480 	andcs	r2, r0, r0, lsl #9

200003d8 <move_snake>:




void move_snake(POBJECT o, int i){
200003d8:	b580      	push	{r7, lr}
200003da:	b082      	sub	sp, #8
200003dc:	af00      	add	r7, sp, #0
200003de:	6078      	str	r0, [r7, #4]
200003e0:	6039      	str	r1, [r7, #0]
	//clear_object(o);
	o->posx = pSnakeVec[i-1]->posx;
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	1e5a      	subs	r2, r3, #1
200003e6:	4b09      	ldr	r3, [pc, #36]	; (2000040c <move_snake+0x34>)
200003e8:	0092      	lsls	r2, r2, #2
200003ea:	58d3      	ldr	r3, [r2, r3]
200003ec:	68da      	ldr	r2, [r3, #12]
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	60da      	str	r2, [r3, #12]
	o->posy = pSnakeVec[i-1]->posy;
200003f2:	683b      	ldr	r3, [r7, #0]
200003f4:	1e5a      	subs	r2, r3, #1
200003f6:	4b05      	ldr	r3, [pc, #20]	; (2000040c <move_snake+0x34>)
200003f8:	0092      	lsls	r2, r2, #2
200003fa:	58d3      	ldr	r3, [r2, r3]
200003fc:	691a      	ldr	r2, [r3, #16]
200003fe:	687b      	ldr	r3, [r7, #4]
20000400:	611a      	str	r2, [r3, #16]
}
20000402:	46c0      	nop			; (mov r8, r8)
20000404:	46bd      	mov	sp, r7
20000406:	b002      	add	sp, #8
20000408:	bd80      	pop	{r7, pc}
2000040a:	46c0      	nop			; (mov r8, r8)
2000040c:	20002224 	andcs	r2, r0, r4, lsr #4

20000410 <extend_snake>:
POBJECT a = &apple;



void extend_snake(POBJECT new, POBJECT tail)
{
20000410:	b580      	push	{r7, lr}
20000412:	b082      	sub	sp, #8
20000414:	af00      	add	r7, sp, #0
20000416:	6078      	str	r0, [r7, #4]
20000418:	6039      	str	r1, [r7, #0]
	new->geo = &ball_geometry;
2000041a:	687b      	ldr	r3, [r7, #4]
2000041c:	4a11      	ldr	r2, [pc, #68]	; (20000464 <extend_snake+0x54>)
2000041e:	601a      	str	r2, [r3, #0]
	new->dirx = tail->dirx;
20000420:	683b      	ldr	r3, [r7, #0]
20000422:	685a      	ldr	r2, [r3, #4]
20000424:	687b      	ldr	r3, [r7, #4]
20000426:	605a      	str	r2, [r3, #4]
	new->diry = tail->diry;
20000428:	683b      	ldr	r3, [r7, #0]
2000042a:	689a      	ldr	r2, [r3, #8]
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	609a      	str	r2, [r3, #8]
	new->posx = tail->posx - tail->geo->sizex;
20000430:	683b      	ldr	r3, [r7, #0]
20000432:	68da      	ldr	r2, [r3, #12]
20000434:	683b      	ldr	r3, [r7, #0]
20000436:	681b      	ldr	r3, [r3, #0]
20000438:	685b      	ldr	r3, [r3, #4]
2000043a:	1ad2      	subs	r2, r2, r3
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	60da      	str	r2, [r3, #12]
	new->posy = tail->posy;
20000440:	683b      	ldr	r3, [r7, #0]
20000442:	691a      	ldr	r2, [r3, #16]
20000444:	687b      	ldr	r3, [r7, #4]
20000446:	611a      	str	r2, [r3, #16]
	new->draw = draw_object;
20000448:	687b      	ldr	r3, [r7, #4]
2000044a:	4a07      	ldr	r2, [pc, #28]	; (20000468 <extend_snake+0x58>)
2000044c:	615a      	str	r2, [r3, #20]
	new->clear = clear_object;
2000044e:	687b      	ldr	r3, [r7, #4]
20000450:	4a06      	ldr	r2, [pc, #24]	; (2000046c <extend_snake+0x5c>)
20000452:	619a      	str	r2, [r3, #24]
	new->smove = move_snake;
20000454:	687b      	ldr	r3, [r7, #4]
20000456:	4a06      	ldr	r2, [pc, #24]	; (20000470 <extend_snake+0x60>)
20000458:	625a      	str	r2, [r3, #36]	; 0x24
}
2000045a:	46c0      	nop			; (mov r8, r8)
2000045c:	46bd      	mov	sp, r7
2000045e:	b002      	add	sp, #8
20000460:	bd80      	pop	{r7, pc}
20000462:	46c0      	nop			; (mov r8, r8)
20000464:	200023b8 			; <UNDEFINED> instruction: 0x200023b8
20000468:	20000b89 	andcs	r0, r0, r9, lsl #23
2000046c:	20000c1b 	andcs	r0, r0, fp, lsl ip
20000470:	200003d9 	ldrdcs	r0, [r0], -r9

20000474 <main>:

void main(void)
{
20000474:	b590      	push	{r4, r7, lr}
20000476:	b089      	sub	sp, #36	; 0x24
20000478:	af00      	add	r7, sp, #0
	char c;
	pSnakeVec[0] = s;
2000047a:	4b68      	ldr	r3, [pc, #416]	; (2000061c <main+0x1a8>)
2000047c:	681a      	ldr	r2, [r3, #0]
2000047e:	4b68      	ldr	r3, [pc, #416]	; (20000620 <main+0x1ac>)
20000480:	601a      	str	r2, [r3, #0]
	pSnakeVec[1] = pp2;
20000482:	4b68      	ldr	r3, [pc, #416]	; (20000624 <main+0x1b0>)
20000484:	681a      	ldr	r2, [r3, #0]
20000486:	4b66      	ldr	r3, [pc, #408]	; (20000620 <main+0x1ac>)
20000488:	605a      	str	r2, [r3, #4]
	
	snakeLength = 2;
2000048a:	4b67      	ldr	r3, [pc, #412]	; (20000628 <main+0x1b4>)
2000048c:	2202      	movs	r2, #2
2000048e:	601a      	str	r2, [r3, #0]
	
	init_app();
20000490:	f7ff fe6c 	bl	2000016c <init_app>
	graphic_initialize();
20000494:	f000 fa55 	bl	20000942 <graphic_initialize>
	ascii_init();
20000498:	f000 fd2f 	bl	20000efa <ascii_init>
	ascii_gotoxy(1,1);
2000049c:	2101      	movs	r1, #1
2000049e:	2001      	movs	r0, #1
200004a0:	f000 fd10 	bl	20000ec4 <ascii_gotoxy>
		graphic_clear_screen();
	#endif
	
	while(1)
	{
		s->move(s);
200004a4:	4b5d      	ldr	r3, [pc, #372]	; (2000061c <main+0x1a8>)
200004a6:	681b      	ldr	r3, [r3, #0]
200004a8:	69da      	ldr	r2, [r3, #28]
200004aa:	4b5c      	ldr	r3, [pc, #368]	; (2000061c <main+0x1a8>)
200004ac:	681b      	ldr	r3, [r3, #0]
200004ae:	0018      	movs	r0, r3
200004b0:	4790      	blx	r2
		draw_object(s);
200004b2:	4b5a      	ldr	r3, [pc, #360]	; (2000061c <main+0x1a8>)
200004b4:	681b      	ldr	r3, [r3, #0]
200004b6:	0018      	movs	r0, r3
200004b8:	f000 fb66 	bl	20000b88 <draw_object>
		
		for(int i = snakeLength -1; i>0; i--)
200004bc:	4b5a      	ldr	r3, [pc, #360]	; (20000628 <main+0x1b4>)
200004be:	681b      	ldr	r3, [r3, #0]
200004c0:	3b01      	subs	r3, #1
200004c2:	61fb      	str	r3, [r7, #28]
200004c4:	e00e      	b.n	200004e4 <main+0x70>
		{
			POBJECT px = pSnakeVec[i];
200004c6:	4b56      	ldr	r3, [pc, #344]	; (20000620 <main+0x1ac>)
200004c8:	69fa      	ldr	r2, [r7, #28]
200004ca:	0092      	lsls	r2, r2, #2
200004cc:	58d3      	ldr	r3, [r2, r3]
200004ce:	603b      	str	r3, [r7, #0]
			draw_object(pSnakeVec[i]);			
200004d0:	4b53      	ldr	r3, [pc, #332]	; (20000620 <main+0x1ac>)
200004d2:	69fa      	ldr	r2, [r7, #28]
200004d4:	0092      	lsls	r2, r2, #2
200004d6:	58d3      	ldr	r3, [r2, r3]
200004d8:	0018      	movs	r0, r3
200004da:	f000 fb55 	bl	20000b88 <draw_object>
		for(int i = snakeLength -1; i>0; i--)
200004de:	69fb      	ldr	r3, [r7, #28]
200004e0:	3b01      	subs	r3, #1
200004e2:	61fb      	str	r3, [r7, #28]
200004e4:	69fb      	ldr	r3, [r7, #28]
200004e6:	2b00      	cmp	r3, #0
200004e8:	dced      	bgt.n	200004c6 <main+0x52>
		}
		
		for(int i = snakeLength -1; i>= 0; i--)
200004ea:	4b4f      	ldr	r3, [pc, #316]	; (20000628 <main+0x1b4>)
200004ec:	681b      	ldr	r3, [r3, #0]
200004ee:	3b01      	subs	r3, #1
200004f0:	61bb      	str	r3, [r7, #24]
200004f2:	e01a      	b.n	2000052a <main+0xb6>
		{
			POBJECT px = pSnakeVec[i];
200004f4:	4b4a      	ldr	r3, [pc, #296]	; (20000620 <main+0x1ac>)
200004f6:	69ba      	ldr	r2, [r7, #24]
200004f8:	0092      	lsls	r2, r2, #2
200004fa:	58d3      	ldr	r3, [r2, r3]
200004fc:	607b      	str	r3, [r7, #4]
			clear_object(pSnakeVec[i]);
200004fe:	4b48      	ldr	r3, [pc, #288]	; (20000620 <main+0x1ac>)
20000500:	69ba      	ldr	r2, [r7, #24]
20000502:	0092      	lsls	r2, r2, #2
20000504:	58d3      	ldr	r3, [r2, r3]
20000506:	0018      	movs	r0, r3
20000508:	f000 fb87 	bl	20000c1a <clear_object>
			if(i!=0){
2000050c:	69bb      	ldr	r3, [r7, #24]
2000050e:	2b00      	cmp	r3, #0
20000510:	d008      	beq.n	20000524 <main+0xb0>
				move_snake(pSnakeVec[i], i);
20000512:	4b43      	ldr	r3, [pc, #268]	; (20000620 <main+0x1ac>)
20000514:	69ba      	ldr	r2, [r7, #24]
20000516:	0092      	lsls	r2, r2, #2
20000518:	58d3      	ldr	r3, [r2, r3]
2000051a:	69ba      	ldr	r2, [r7, #24]
2000051c:	0011      	movs	r1, r2
2000051e:	0018      	movs	r0, r3
20000520:	f7ff ff5a 	bl	200003d8 <move_snake>
		for(int i = snakeLength -1; i>= 0; i--)
20000524:	69bb      	ldr	r3, [r7, #24]
20000526:	3b01      	subs	r3, #1
20000528:	61bb      	str	r3, [r7, #24]
2000052a:	69bb      	ldr	r3, [r7, #24]
2000052c:	2b00      	cmp	r3, #0
2000052e:	dae1      	bge.n	200004f4 <main+0x80>
			}
		}
		
		draw_object(a);
20000530:	4b3e      	ldr	r3, [pc, #248]	; (2000062c <main+0x1b8>)
20000532:	681b      	ldr	r3, [r3, #0]
20000534:	0018      	movs	r0, r3
20000536:	f000 fb27 	bl	20000b88 <draw_object>
		collision(pSnakeVec,a);
2000053a:	4b3c      	ldr	r3, [pc, #240]	; (2000062c <main+0x1b8>)
2000053c:	681a      	ldr	r2, [r3, #0]
2000053e:	4b38      	ldr	r3, [pc, #224]	; (20000620 <main+0x1ac>)
20000540:	0011      	movs	r1, r2
20000542:	0018      	movs	r0, r3
20000544:	f7ff fe2e 	bl	200001a4 <collision>
		
		for(int i = snakeLength -1; i> 1; i--)
20000548:	4b37      	ldr	r3, [pc, #220]	; (20000628 <main+0x1b4>)
2000054a:	681b      	ldr	r3, [r3, #0]
2000054c:	3b01      	subs	r3, #1
2000054e:	617b      	str	r3, [r7, #20]
20000550:	e020      	b.n	20000594 <main+0x120>
		{
			POBJECT xx = pSnakeVec[i];
20000552:	4b33      	ldr	r3, [pc, #204]	; (20000620 <main+0x1ac>)
20000554:	697a      	ldr	r2, [r7, #20]
20000556:	0092      	lsls	r2, r2, #2
20000558:	58d3      	ldr	r3, [r2, r3]
2000055a:	60fb      	str	r3, [r7, #12]
			POBJECT ss = s;
2000055c:	4b2f      	ldr	r3, [pc, #188]	; (2000061c <main+0x1a8>)
2000055e:	681b      	ldr	r3, [r3, #0]
20000560:	60bb      	str	r3, [r7, #8]
		if(s->posx == pSnakeVec[i]->posx)
20000562:	4b2e      	ldr	r3, [pc, #184]	; (2000061c <main+0x1a8>)
20000564:	681b      	ldr	r3, [r3, #0]
20000566:	68da      	ldr	r2, [r3, #12]
20000568:	4b2d      	ldr	r3, [pc, #180]	; (20000620 <main+0x1ac>)
2000056a:	6979      	ldr	r1, [r7, #20]
2000056c:	0089      	lsls	r1, r1, #2
2000056e:	58cb      	ldr	r3, [r1, r3]
20000570:	68db      	ldr	r3, [r3, #12]
20000572:	429a      	cmp	r2, r3
20000574:	d10b      	bne.n	2000058e <main+0x11a>
		{
			if(s->posy == pSnakeVec[i]->posy)
20000576:	4b29      	ldr	r3, [pc, #164]	; (2000061c <main+0x1a8>)
20000578:	681b      	ldr	r3, [r3, #0]
2000057a:	691a      	ldr	r2, [r3, #16]
2000057c:	4b28      	ldr	r3, [pc, #160]	; (20000620 <main+0x1ac>)
2000057e:	6979      	ldr	r1, [r7, #20]
20000580:	0089      	lsls	r1, r1, #2
20000582:	58cb      	ldr	r3, [r1, r3]
20000584:	691b      	ldr	r3, [r3, #16]
20000586:	429a      	cmp	r2, r3
20000588:	d101      	bne.n	2000058e <main+0x11a>
			{
				gameOver();
2000058a:	f7ff fef3 	bl	20000374 <gameOver>
		for(int i = snakeLength -1; i> 1; i--)
2000058e:	697b      	ldr	r3, [r7, #20]
20000590:	3b01      	subs	r3, #1
20000592:	617b      	str	r3, [r7, #20]
20000594:	697b      	ldr	r3, [r7, #20]
20000596:	2b01      	cmp	r3, #1
20000598:	dcdb      	bgt.n	20000552 <main+0xde>
	
		}
		
		
		
		delay_milli(40);
2000059a:	2028      	movs	r0, #40	; 0x28
2000059c:	f7ff fd38 	bl	20000010 <delay_milli>
		c = keyb();
200005a0:	f000 fcf8 	bl	20000f94 <keyb>
200005a4:	0002      	movs	r2, r0
200005a6:	2113      	movs	r1, #19
200005a8:	187b      	adds	r3, r7, r1
200005aa:	701a      	strb	r2, [r3, #0]
		switch(c)
200005ac:	187b      	adds	r3, r7, r1
200005ae:	781b      	ldrb	r3, [r3, #0]
200005b0:	2b04      	cmp	r3, #4
200005b2:	d012      	beq.n	200005da <main+0x166>
200005b4:	dc02      	bgt.n	200005bc <main+0x148>
200005b6:	2b02      	cmp	r3, #2
200005b8:	d01a      	beq.n	200005f0 <main+0x17c>
200005ba:	e02e      	b.n	2000061a <main+0x1a6>
200005bc:	2b06      	cmp	r3, #6
200005be:	d002      	beq.n	200005c6 <main+0x152>
200005c0:	2b08      	cmp	r3, #8
200005c2:	d020      	beq.n	20000606 <main+0x192>
200005c4:	e029      	b.n	2000061a <main+0x1a6>
		{
			case 6: s->set_speed(s,4,0); break;
200005c6:	4b15      	ldr	r3, [pc, #84]	; (2000061c <main+0x1a8>)
200005c8:	681b      	ldr	r3, [r3, #0]
200005ca:	6a1c      	ldr	r4, [r3, #32]
200005cc:	4b13      	ldr	r3, [pc, #76]	; (2000061c <main+0x1a8>)
200005ce:	681b      	ldr	r3, [r3, #0]
200005d0:	2200      	movs	r2, #0
200005d2:	2104      	movs	r1, #4
200005d4:	0018      	movs	r0, r3
200005d6:	47a0      	blx	r4
200005d8:	e01f      	b.n	2000061a <main+0x1a6>
			case 4: s->set_speed(s,-4,0); break;
200005da:	4b10      	ldr	r3, [pc, #64]	; (2000061c <main+0x1a8>)
200005dc:	681b      	ldr	r3, [r3, #0]
200005de:	6a1c      	ldr	r4, [r3, #32]
200005e0:	4b0e      	ldr	r3, [pc, #56]	; (2000061c <main+0x1a8>)
200005e2:	6818      	ldr	r0, [r3, #0]
200005e4:	2304      	movs	r3, #4
200005e6:	425b      	negs	r3, r3
200005e8:	2200      	movs	r2, #0
200005ea:	0019      	movs	r1, r3
200005ec:	47a0      	blx	r4
200005ee:	e014      	b.n	2000061a <main+0x1a6>
			case 2: s->set_speed(s,0,-4); break;
200005f0:	4b0a      	ldr	r3, [pc, #40]	; (2000061c <main+0x1a8>)
200005f2:	681b      	ldr	r3, [r3, #0]
200005f4:	6a1c      	ldr	r4, [r3, #32]
200005f6:	4b09      	ldr	r3, [pc, #36]	; (2000061c <main+0x1a8>)
200005f8:	6818      	ldr	r0, [r3, #0]
200005fa:	2304      	movs	r3, #4
200005fc:	425b      	negs	r3, r3
200005fe:	001a      	movs	r2, r3
20000600:	2100      	movs	r1, #0
20000602:	47a0      	blx	r4
20000604:	e009      	b.n	2000061a <main+0x1a6>
			case 8: s->set_speed(s,0,4); break;
20000606:	4b05      	ldr	r3, [pc, #20]	; (2000061c <main+0x1a8>)
20000608:	681b      	ldr	r3, [r3, #0]
2000060a:	6a1c      	ldr	r4, [r3, #32]
2000060c:	4b03      	ldr	r3, [pc, #12]	; (2000061c <main+0x1a8>)
2000060e:	681b      	ldr	r3, [r3, #0]
20000610:	2204      	movs	r2, #4
20000612:	2100      	movs	r1, #0
20000614:	0018      	movs	r0, r3
20000616:	47a0      	blx	r4
20000618:	46c0      	nop			; (mov r8, r8)
	{
2000061a:	e743      	b.n	200004a4 <main+0x30>
2000061c:	20002480 	andcs	r2, r0, r0, lsl #9
20000620:	20002224 	andcs	r2, r0, r4, lsr #4
20000624:	200024ac 	andcs	r2, r0, ip, lsr #9
20000628:	20002220 	andcs	r2, r0, r0, lsr #4
2000062c:	200024b0 			; <UNDEFINED> instruction: 0x200024b0

20000630 <graphic_wait_ready>:
#include <graphic.h>
#include <delay.h>
#include <gpio.h>

static void graphic_wait_ready(void)
{
20000630:	b580      	push	{r7, lr}
20000632:	b082      	sub	sp, #8
20000634:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000636:	2040      	movs	r0, #64	; 0x40
20000638:	f000 f932 	bl	200008a0 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555;
2000063c:	4b14      	ldr	r3, [pc, #80]	; (20000690 <graphic_wait_ready+0x60>)
2000063e:	4a15      	ldr	r2, [pc, #84]	; (20000694 <graphic_wait_ready+0x64>)
20000640:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000642:	2001      	movs	r0, #1
20000644:	f000 f92c 	bl	200008a0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000648:	2002      	movs	r0, #2
2000064a:	f000 f907 	bl	2000085c <graphic_ctrl_bit_set>
	delay_500ns();
2000064e:	f7ff fd27 	bl	200000a0 <delay_500ns>
	
	while(1)
	{
		graphic_ctrl_bit_set(B_E);
20000652:	2040      	movs	r0, #64	; 0x40
20000654:	f000 f902 	bl	2000085c <graphic_ctrl_bit_set>
		delay_500ns();
20000658:	f7ff fd22 	bl	200000a0 <delay_500ns>
		c = GPIO_E.idrHigh & LCD_BUSY; //LCD_BUSY?????
2000065c:	4b0c      	ldr	r3, [pc, #48]	; (20000690 <graphic_wait_ready+0x60>)
2000065e:	7c5b      	ldrb	r3, [r3, #17]
20000660:	b2da      	uxtb	r2, r3
20000662:	1dfb      	adds	r3, r7, #7
20000664:	217f      	movs	r1, #127	; 0x7f
20000666:	438a      	bics	r2, r1
20000668:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000066a:	2040      	movs	r0, #64	; 0x40
2000066c:	f000 f918 	bl	200008a0 <graphic_ctrl_bit_clear>
		delay_500ns();
20000670:	f7ff fd16 	bl	200000a0 <delay_500ns>
		if(c == 0)
20000674:	1dfb      	adds	r3, r7, #7
20000676:	781b      	ldrb	r3, [r3, #0]
20000678:	2b00      	cmp	r3, #0
2000067a:	d000      	beq.n	2000067e <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000067c:	e7e9      	b.n	20000652 <graphic_wait_ready+0x22>
		{
			break;
2000067e:	46c0      	nop			; (mov r8, r8)
		}
	}
	GPIO_E.moder = 0x55555555;
20000680:	4b03      	ldr	r3, [pc, #12]	; (20000690 <graphic_wait_ready+0x60>)
20000682:	4a05      	ldr	r2, [pc, #20]	; (20000698 <graphic_wait_ready+0x68>)
20000684:	601a      	str	r2, [r3, #0]
}
20000686:	46c0      	nop			; (mov r8, r8)
20000688:	46bd      	mov	sp, r7
2000068a:	b002      	add	sp, #8
2000068c:	bd80      	pop	{r7, pc}
2000068e:	46c0      	nop			; (mov r8, r8)
20000690:	40021000 	andmi	r1, r2, r0
20000694:	00005555 	andeq	r5, r0, r5, asr r5
20000698:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000069c <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
2000069c:	b580      	push	{r7, lr}
2000069e:	b084      	sub	sp, #16
200006a0:	af00      	add	r7, sp, #0
200006a2:	0002      	movs	r2, r0
200006a4:	1dfb      	adds	r3, r7, #7
200006a6:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200006a8:	2040      	movs	r0, #64	; 0x40
200006aa:	f000 f8f9 	bl	200008a0 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555;
200006ae:	4b1c      	ldr	r3, [pc, #112]	; (20000720 <graphic_read+0x84>)
200006b0:	4a1c      	ldr	r2, [pc, #112]	; (20000724 <graphic_read+0x88>)
200006b2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
200006b4:	2003      	movs	r0, #3
200006b6:	f000 f8d1 	bl	2000085c <graphic_ctrl_bit_set>
	select_controller(controller);
200006ba:	1dfb      	adds	r3, r7, #7
200006bc:	781b      	ldrb	r3, [r3, #0]
200006be:	0018      	movs	r0, r3
200006c0:	f000 f912 	bl	200008e8 <select_controller>
	delay_500ns();
200006c4:	f7ff fcec 	bl	200000a0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200006c8:	2040      	movs	r0, #64	; 0x40
200006ca:	f000 f8c7 	bl	2000085c <graphic_ctrl_bit_set>
	delay_500ns();
200006ce:	f7ff fce7 	bl	200000a0 <delay_500ns>
	c = GPIO_E.idrHigh;
200006d2:	4a13      	ldr	r2, [pc, #76]	; (20000720 <graphic_read+0x84>)
200006d4:	230f      	movs	r3, #15
200006d6:	18fb      	adds	r3, r7, r3
200006d8:	7c52      	ldrb	r2, [r2, #17]
200006da:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200006dc:	2040      	movs	r0, #64	; 0x40
200006de:	f000 f8df 	bl	200008a0 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x55555555;
200006e2:	4b0f      	ldr	r3, [pc, #60]	; (20000720 <graphic_read+0x84>)
200006e4:	4a10      	ldr	r2, [pc, #64]	; (20000728 <graphic_read+0x8c>)
200006e6:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1){
200006e8:	1dfb      	adds	r3, r7, #7
200006ea:	781b      	ldrb	r3, [r3, #0]
200006ec:	2208      	movs	r2, #8
200006ee:	4013      	ands	r3, r2
200006f0:	d004      	beq.n	200006fc <graphic_read+0x60>
		select_controller(B_CS1);
200006f2:	2008      	movs	r0, #8
200006f4:	f000 f8f8 	bl	200008e8 <select_controller>
		graphic_wait_ready();
200006f8:	f7ff ff9a 	bl	20000630 <graphic_wait_ready>
	}
	if(controller & B_CS2)
200006fc:	1dfb      	adds	r3, r7, #7
200006fe:	781b      	ldrb	r3, [r3, #0]
20000700:	2210      	movs	r2, #16
20000702:	4013      	ands	r3, r2
20000704:	d004      	beq.n	20000710 <graphic_read+0x74>
	{
		select_controller(B_CS2);
20000706:	2010      	movs	r0, #16
20000708:	f000 f8ee 	bl	200008e8 <select_controller>
		graphic_wait_ready();
2000070c:	f7ff ff90 	bl	20000630 <graphic_wait_ready>
	}
	return c;
20000710:	230f      	movs	r3, #15
20000712:	18fb      	adds	r3, r7, r3
20000714:	781b      	ldrb	r3, [r3, #0]
}
20000716:	0018      	movs	r0, r3
20000718:	46bd      	mov	sp, r7
2000071a:	b004      	add	sp, #16
2000071c:	bd80      	pop	{r7, pc}
2000071e:	46c0      	nop			; (mov r8, r8)
20000720:	40021000 	andmi	r1, r2, r0
20000724:	00005555 	andeq	r5, r0, r5, asr r5
20000728:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000072c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
2000072c:	b580      	push	{r7, lr}
2000072e:	b082      	sub	sp, #8
20000730:	af00      	add	r7, sp, #0
20000732:	0002      	movs	r2, r0
20000734:	1dfb      	adds	r3, r7, #7
20000736:	701a      	strb	r2, [r3, #0]
20000738:	1dbb      	adds	r3, r7, #6
2000073a:	1c0a      	adds	r2, r1, #0
2000073c:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	GPIO_E.odrHigh = value;
2000073e:	4a1a      	ldr	r2, [pc, #104]	; (200007a8 <graphic_write+0x7c>)
20000740:	1dfb      	adds	r3, r7, #7
20000742:	781b      	ldrb	r3, [r3, #0]
20000744:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
20000746:	1dbb      	adds	r3, r7, #6
20000748:	781b      	ldrb	r3, [r3, #0]
2000074a:	0018      	movs	r0, r3
2000074c:	f000 f8cc 	bl	200008e8 <select_controller>
	delay_500ns();
20000750:	f7ff fca6 	bl	200000a0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000754:	2040      	movs	r0, #64	; 0x40
20000756:	f000 f881 	bl	2000085c <graphic_ctrl_bit_set>
	delay_500ns();
2000075a:	f7ff fca1 	bl	200000a0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000075e:	2040      	movs	r0, #64	; 0x40
20000760:	f000 f89e 	bl	200008a0 <graphic_ctrl_bit_clear>

	if(controller & B_CS1){
20000764:	1dbb      	adds	r3, r7, #6
20000766:	781b      	ldrb	r3, [r3, #0]
20000768:	2208      	movs	r2, #8
2000076a:	4013      	ands	r3, r2
2000076c:	d004      	beq.n	20000778 <graphic_write+0x4c>
		select_controller(B_CS1);
2000076e:	2008      	movs	r0, #8
20000770:	f000 f8ba 	bl	200008e8 <select_controller>
		graphic_wait_ready();
20000774:	f7ff ff5c 	bl	20000630 <graphic_wait_ready>
	}
	if(controller & B_CS2)
20000778:	1dbb      	adds	r3, r7, #6
2000077a:	781b      	ldrb	r3, [r3, #0]
2000077c:	2210      	movs	r2, #16
2000077e:	4013      	ands	r3, r2
20000780:	d004      	beq.n	2000078c <graphic_write+0x60>
	{
		select_controller(B_CS2);
20000782:	2010      	movs	r0, #16
20000784:	f000 f8b0 	bl	200008e8 <select_controller>
		graphic_wait_ready();
20000788:	f7ff ff52 	bl	20000630 <graphic_wait_ready>
	}
	GPIO_E.odrHigh = 0;
2000078c:	4b06      	ldr	r3, [pc, #24]	; (200007a8 <graphic_write+0x7c>)
2000078e:	2200      	movs	r2, #0
20000790:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000792:	2040      	movs	r0, #64	; 0x40
20000794:	f000 f862 	bl	2000085c <graphic_ctrl_bit_set>
	select_controller(0);
20000798:	2000      	movs	r0, #0
2000079a:	f000 f8a5 	bl	200008e8 <select_controller>
}
2000079e:	46c0      	nop			; (mov r8, r8)
200007a0:	46bd      	mov	sp, r7
200007a2:	b002      	add	sp, #8
200007a4:	bd80      	pop	{r7, pc}
200007a6:	46c0      	nop			; (mov r8, r8)
200007a8:	40021000 	andmi	r1, r2, r0

200007ac <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller)
{
200007ac:	b580      	push	{r7, lr}
200007ae:	b082      	sub	sp, #8
200007b0:	af00      	add	r7, sp, #0
200007b2:	0002      	movs	r2, r0
200007b4:	1dfb      	adds	r3, r7, #7
200007b6:	701a      	strb	r2, [r3, #0]
200007b8:	1dbb      	adds	r3, r7, #6
200007ba:	1c0a      	adds	r2, r1, #0
200007bc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200007be:	2040      	movs	r0, #64	; 0x40
200007c0:	f000 f86e 	bl	200008a0 <graphic_ctrl_bit_clear>
	select_controller(controller);
200007c4:	1dbb      	adds	r3, r7, #6
200007c6:	781b      	ldrb	r3, [r3, #0]
200007c8:	0018      	movs	r0, r3
200007ca:	f000 f88d 	bl	200008e8 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200007ce:	2003      	movs	r0, #3
200007d0:	f000 f866 	bl	200008a0 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200007d4:	1dbb      	adds	r3, r7, #6
200007d6:	781a      	ldrb	r2, [r3, #0]
200007d8:	1dfb      	adds	r3, r7, #7
200007da:	781b      	ldrb	r3, [r3, #0]
200007dc:	0011      	movs	r1, r2
200007de:	0018      	movs	r0, r3
200007e0:	f7ff ffa4 	bl	2000072c <graphic_write>
}
200007e4:	46c0      	nop			; (mov r8, r8)
200007e6:	46bd      	mov	sp, r7
200007e8:	b002      	add	sp, #8
200007ea:	bd80      	pop	{r7, pc}

200007ec <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
200007ec:	b580      	push	{r7, lr}
200007ee:	b082      	sub	sp, #8
200007f0:	af00      	add	r7, sp, #0
200007f2:	0002      	movs	r2, r0
200007f4:	1dfb      	adds	r3, r7, #7
200007f6:	701a      	strb	r2, [r3, #0]
200007f8:	1dbb      	adds	r3, r7, #6
200007fa:	1c0a      	adds	r2, r1, #0
200007fc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200007fe:	2040      	movs	r0, #64	; 0x40
20000800:	f000 f84e 	bl	200008a0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000804:	1dbb      	adds	r3, r7, #6
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	0018      	movs	r0, r3
2000080a:	f000 f86d 	bl	200008e8 <select_controller>
	graphic_ctrl_bit_clear(B_RW);
2000080e:	2002      	movs	r0, #2
20000810:	f000 f846 	bl	200008a0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RS);
20000814:	2001      	movs	r0, #1
20000816:	f000 f821 	bl	2000085c <graphic_ctrl_bit_set>
	graphic_write(data, controller);
2000081a:	1dbb      	adds	r3, r7, #6
2000081c:	781a      	ldrb	r2, [r3, #0]
2000081e:	1dfb      	adds	r3, r7, #7
20000820:	781b      	ldrb	r3, [r3, #0]
20000822:	0011      	movs	r1, r2
20000824:	0018      	movs	r0, r3
20000826:	f7ff ff81 	bl	2000072c <graphic_write>
}
2000082a:	46c0      	nop			; (mov r8, r8)
2000082c:	46bd      	mov	sp, r7
2000082e:	b002      	add	sp, #8
20000830:	bd80      	pop	{r7, pc}

20000832 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
20000832:	b580      	push	{r7, lr}
20000834:	b082      	sub	sp, #8
20000836:	af00      	add	r7, sp, #0
20000838:	0002      	movs	r2, r0
2000083a:	1dfb      	adds	r3, r7, #7
2000083c:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000083e:	1dfb      	adds	r3, r7, #7
20000840:	781b      	ldrb	r3, [r3, #0]
20000842:	0018      	movs	r0, r3
20000844:	f7ff ff2a 	bl	2000069c <graphic_read>
	return graphic_read(controller);
20000848:	1dfb      	adds	r3, r7, #7
2000084a:	781b      	ldrb	r3, [r3, #0]
2000084c:	0018      	movs	r0, r3
2000084e:	f7ff ff25 	bl	2000069c <graphic_read>
20000852:	0003      	movs	r3, r0
}
20000854:	0018      	movs	r0, r3
20000856:	46bd      	mov	sp, r7
20000858:	b002      	add	sp, #8
2000085a:	bd80      	pop	{r7, pc}

2000085c <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
2000085c:	b580      	push	{r7, lr}
2000085e:	b084      	sub	sp, #16
20000860:	af00      	add	r7, sp, #0
20000862:	0002      	movs	r2, r0
20000864:	1dfb      	adds	r3, r7, #7
20000866:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
20000868:	4a0c      	ldr	r2, [pc, #48]	; (2000089c <graphic_ctrl_bit_set+0x40>)
2000086a:	210f      	movs	r1, #15
2000086c:	187b      	adds	r3, r7, r1
2000086e:	7d12      	ldrb	r2, [r2, #20]
20000870:	701a      	strb	r2, [r3, #0]
	c |= ( ~B_SELECT & x ); //Nollställer B_Select!
20000872:	1dfb      	adds	r3, r7, #7
20000874:	781b      	ldrb	r3, [r3, #0]
20000876:	b25b      	sxtb	r3, r3
20000878:	2204      	movs	r2, #4
2000087a:	4393      	bics	r3, r2
2000087c:	b25a      	sxtb	r2, r3
2000087e:	187b      	adds	r3, r7, r1
20000880:	781b      	ldrb	r3, [r3, #0]
20000882:	b25b      	sxtb	r3, r3
20000884:	4313      	orrs	r3, r2
20000886:	b25a      	sxtb	r2, r3
20000888:	187b      	adds	r3, r7, r1
2000088a:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
2000088c:	4a03      	ldr	r2, [pc, #12]	; (2000089c <graphic_ctrl_bit_set+0x40>)
2000088e:	187b      	adds	r3, r7, r1
20000890:	781b      	ldrb	r3, [r3, #0]
20000892:	7513      	strb	r3, [r2, #20]
}
20000894:	46c0      	nop			; (mov r8, r8)
20000896:	46bd      	mov	sp, r7
20000898:	b004      	add	sp, #16
2000089a:	bd80      	pop	{r7, pc}
2000089c:	40021000 	andmi	r1, r2, r0

200008a0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x)
{
200008a0:	b580      	push	{r7, lr}
200008a2:	b084      	sub	sp, #16
200008a4:	af00      	add	r7, sp, #0
200008a6:	0002      	movs	r2, r0
200008a8:	1dfb      	adds	r3, r7, #7
200008aa:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;;
200008ac:	4a0d      	ldr	r2, [pc, #52]	; (200008e4 <graphic_ctrl_bit_clear+0x44>)
200008ae:	210f      	movs	r1, #15
200008b0:	187b      	adds	r3, r7, r1
200008b2:	7d12      	ldrb	r2, [r2, #20]
200008b4:	701a      	strb	r2, [r3, #0]
	c &= (~B_SELECT & ~x); //~ bildar 1-komplement
200008b6:	1dfb      	adds	r3, r7, #7
200008b8:	781b      	ldrb	r3, [r3, #0]
200008ba:	43db      	mvns	r3, r3
200008bc:	b2db      	uxtb	r3, r3
200008be:	187a      	adds	r2, r7, r1
200008c0:	7812      	ldrb	r2, [r2, #0]
200008c2:	4013      	ands	r3, r2
200008c4:	b2da      	uxtb	r2, r3
200008c6:	0008      	movs	r0, r1
200008c8:	187b      	adds	r3, r7, r1
200008ca:	2104      	movs	r1, #4
200008cc:	438a      	bics	r2, r1
200008ce:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
200008d0:	4a04      	ldr	r2, [pc, #16]	; (200008e4 <graphic_ctrl_bit_clear+0x44>)
200008d2:	0001      	movs	r1, r0
200008d4:	187b      	adds	r3, r7, r1
200008d6:	781b      	ldrb	r3, [r3, #0]
200008d8:	7513      	strb	r3, [r2, #20]
}
200008da:	46c0      	nop			; (mov r8, r8)
200008dc:	46bd      	mov	sp, r7
200008de:	b004      	add	sp, #16
200008e0:	bd80      	pop	{r7, pc}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	40021000 	andmi	r1, r2, r0

200008e8 <select_controller>:

void select_controller(uint8_t controller)
{
200008e8:	b580      	push	{r7, lr}
200008ea:	b082      	sub	sp, #8
200008ec:	af00      	add	r7, sp, #0
200008ee:	0002      	movs	r2, r0
200008f0:	1dfb      	adds	r3, r7, #7
200008f2:	701a      	strb	r2, [r3, #0]
	switch(controller){
200008f4:	1dfb      	adds	r3, r7, #7
200008f6:	781b      	ldrb	r3, [r3, #0]
200008f8:	2b08      	cmp	r3, #8
200008fa:	d00c      	beq.n	20000916 <select_controller+0x2e>
200008fc:	dc02      	bgt.n	20000904 <select_controller+0x1c>
200008fe:	2b00      	cmp	r3, #0
20000900:	d005      	beq.n	2000090e <select_controller+0x26>
				break;
		case B_CS1|B_CS2:
				graphic_ctrl_bit_set(B_CS1|B_CS2);
				break;
	}
}
20000902:	e01a      	b.n	2000093a <select_controller+0x52>
	switch(controller){
20000904:	2b10      	cmp	r3, #16
20000906:	d00d      	beq.n	20000924 <select_controller+0x3c>
20000908:	2b18      	cmp	r3, #24
2000090a:	d012      	beq.n	20000932 <select_controller+0x4a>
}
2000090c:	e015      	b.n	2000093a <select_controller+0x52>
				graphic_ctrl_bit_clear(B_CS1|B_CS2);
2000090e:	2018      	movs	r0, #24
20000910:	f7ff ffc6 	bl	200008a0 <graphic_ctrl_bit_clear>
				break;
20000914:	e011      	b.n	2000093a <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1);
20000916:	2008      	movs	r0, #8
20000918:	f7ff ffa0 	bl	2000085c <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS2);
2000091c:	2010      	movs	r0, #16
2000091e:	f7ff ffbf 	bl	200008a0 <graphic_ctrl_bit_clear>
				break;
20000922:	e00a      	b.n	2000093a <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS2);
20000924:	2010      	movs	r0, #16
20000926:	f7ff ff99 	bl	2000085c <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS1);
2000092a:	2008      	movs	r0, #8
2000092c:	f7ff ffb8 	bl	200008a0 <graphic_ctrl_bit_clear>
				break;
20000930:	e003      	b.n	2000093a <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1|B_CS2);
20000932:	2018      	movs	r0, #24
20000934:	f7ff ff92 	bl	2000085c <graphic_ctrl_bit_set>
				break;
20000938:	46c0      	nop			; (mov r8, r8)
}
2000093a:	46c0      	nop			; (mov r8, r8)
2000093c:	46bd      	mov	sp, r7
2000093e:	b002      	add	sp, #8
20000940:	bd80      	pop	{r7, pc}

20000942 <graphic_initialize>:

void graphic_initialize(void)
{
20000942:	b580      	push	{r7, lr}
20000944:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000946:	2040      	movs	r0, #64	; 0x40
20000948:	f7ff ff88 	bl	2000085c <graphic_ctrl_bit_set>
	delay_micro(10);
2000094c:	200a      	movs	r0, #10
2000094e:	f7ff fb6e 	bl	2000002e <delay_micro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000952:	2078      	movs	r0, #120	; 0x78
20000954:	f7ff ffa4 	bl	200008a0 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000958:	201e      	movs	r0, #30
2000095a:	f7ff fb59 	bl	20000010 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000095e:	2020      	movs	r0, #32
20000960:	f7ff ff7c 	bl	2000085c <graphic_ctrl_bit_set>
	delay_milli(100);
20000964:	2064      	movs	r0, #100	; 0x64
20000966:	f7ff fb53 	bl	20000010 <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000096a:	2118      	movs	r1, #24
2000096c:	203e      	movs	r0, #62	; 0x3e
2000096e:	f7ff ff1d 	bl	200007ac <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000972:	2118      	movs	r1, #24
20000974:	203f      	movs	r0, #63	; 0x3f
20000976:	f7ff ff19 	bl	200007ac <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000097a:	2118      	movs	r1, #24
2000097c:	20c0      	movs	r0, #192	; 0xc0
2000097e:	f7ff ff15 	bl	200007ac <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000982:	2118      	movs	r1, #24
20000984:	2040      	movs	r0, #64	; 0x40
20000986:	f7ff ff11 	bl	200007ac <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000098a:	2118      	movs	r1, #24
2000098c:	20b8      	movs	r0, #184	; 0xb8
2000098e:	f7ff ff0d 	bl	200007ac <graphic_write_command>
	select_controller(0);
20000992:	2000      	movs	r0, #0
20000994:	f7ff ffa8 	bl	200008e8 <select_controller>
}
20000998:	46c0      	nop			; (mov r8, r8)
2000099a:	46bd      	mov	sp, r7
2000099c:	bd80      	pop	{r7, pc}

2000099e <graphic_clear_screen>:

void graphic_clear_screen(void)
{
2000099e:	b580      	push	{r7, lr}
200009a0:	b082      	sub	sp, #8
200009a2:	af00      	add	r7, sp, #0
	for(unsigned int page = 0; page < 8; page++)
200009a4:	2300      	movs	r3, #0
200009a6:	607b      	str	r3, [r7, #4]
200009a8:	e01d      	b.n	200009e6 <graphic_clear_screen+0x48>
	{
		graphic_write_command(LCD_SET_PAGE|page,B_CS1|B_CS2);
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	b2db      	uxtb	r3, r3
200009ae:	2248      	movs	r2, #72	; 0x48
200009b0:	4252      	negs	r2, r2
200009b2:	4313      	orrs	r3, r2
200009b4:	b2db      	uxtb	r3, r3
200009b6:	2118      	movs	r1, #24
200009b8:	0018      	movs	r0, r3
200009ba:	f7ff fef7 	bl	200007ac <graphic_write_command>
		graphic_write_command(LCD_SET_ADD|0,B_CS1|B_CS2);
200009be:	2118      	movs	r1, #24
200009c0:	2040      	movs	r0, #64	; 0x40
200009c2:	f7ff fef3 	bl	200007ac <graphic_write_command>
		for(unsigned int add = 0; add<64;add++)
200009c6:	2300      	movs	r3, #0
200009c8:	603b      	str	r3, [r7, #0]
200009ca:	e006      	b.n	200009da <graphic_clear_screen+0x3c>
		{
			graphic_write_data(0, B_CS1|B_CS2);
200009cc:	2118      	movs	r1, #24
200009ce:	2000      	movs	r0, #0
200009d0:	f7ff ff0c 	bl	200007ec <graphic_write_data>
		for(unsigned int add = 0; add<64;add++)
200009d4:	683b      	ldr	r3, [r7, #0]
200009d6:	3301      	adds	r3, #1
200009d8:	603b      	str	r3, [r7, #0]
200009da:	683b      	ldr	r3, [r7, #0]
200009dc:	2b3f      	cmp	r3, #63	; 0x3f
200009de:	d9f5      	bls.n	200009cc <graphic_clear_screen+0x2e>
	for(unsigned int page = 0; page < 8; page++)
200009e0:	687b      	ldr	r3, [r7, #4]
200009e2:	3301      	adds	r3, #1
200009e4:	607b      	str	r3, [r7, #4]
200009e6:	687b      	ldr	r3, [r7, #4]
200009e8:	2b07      	cmp	r3, #7
200009ea:	d9de      	bls.n	200009aa <graphic_clear_screen+0xc>
		}
	}
}
200009ec:	46c0      	nop			; (mov r8, r8)
200009ee:	46bd      	mov	sp, r7
200009f0:	b002      	add	sp, #8
200009f2:	bd80      	pop	{r7, pc}

200009f4 <pixel>:

void pixel(int x, int y, int set)
{
200009f4:	b5b0      	push	{r4, r5, r7, lr}
200009f6:	b088      	sub	sp, #32
200009f8:	af00      	add	r7, sp, #0
200009fa:	60f8      	str	r0, [r7, #12]
200009fc:	60b9      	str	r1, [r7, #8]
200009fe:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000a00:	68fb      	ldr	r3, [r7, #12]
20000a02:	2b00      	cmp	r3, #0
20000a04:	dc00      	bgt.n	20000a08 <pixel+0x14>
20000a06:	e0b6      	b.n	20000b76 <pixel+0x182>
20000a08:	68bb      	ldr	r3, [r7, #8]
20000a0a:	2b00      	cmp	r3, #0
20000a0c:	dc00      	bgt.n	20000a10 <pixel+0x1c>
20000a0e:	e0b2      	b.n	20000b76 <pixel+0x182>
20000a10:	68fb      	ldr	r3, [r7, #12]
20000a12:	2b80      	cmp	r3, #128	; 0x80
20000a14:	dd00      	ble.n	20000a18 <pixel+0x24>
20000a16:	e0ae      	b.n	20000b76 <pixel+0x182>
20000a18:	68bb      	ldr	r3, [r7, #8]
20000a1a:	2b40      	cmp	r3, #64	; 0x40
20000a1c:	dd00      	ble.n	20000a20 <pixel+0x2c>
20000a1e:	e0aa      	b.n	20000b76 <pixel+0x182>
	
	index = (y-1)/8;
20000a20:	68bb      	ldr	r3, [r7, #8]
20000a22:	3b01      	subs	r3, #1
20000a24:	2b00      	cmp	r3, #0
20000a26:	da00      	bge.n	20000a2a <pixel+0x36>
20000a28:	3307      	adds	r3, #7
20000a2a:	10db      	asrs	r3, r3, #3
20000a2c:	61bb      	str	r3, [r7, #24]
	
	switch((y-1)%8){
20000a2e:	68bb      	ldr	r3, [r7, #8]
20000a30:	3b01      	subs	r3, #1
20000a32:	4a53      	ldr	r2, [pc, #332]	; (20000b80 <pixel+0x18c>)
20000a34:	4013      	ands	r3, r2
20000a36:	d504      	bpl.n	20000a42 <pixel+0x4e>
20000a38:	3b01      	subs	r3, #1
20000a3a:	2208      	movs	r2, #8
20000a3c:	4252      	negs	r2, r2
20000a3e:	4313      	orrs	r3, r2
20000a40:	3301      	adds	r3, #1
20000a42:	2b07      	cmp	r3, #7
20000a44:	d82c      	bhi.n	20000aa0 <pixel+0xac>
20000a46:	009a      	lsls	r2, r3, #2
20000a48:	4b4e      	ldr	r3, [pc, #312]	; (20000b84 <pixel+0x190>)
20000a4a:	18d3      	adds	r3, r2, r3
20000a4c:	681b      	ldr	r3, [r3, #0]
20000a4e:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000a50:	231f      	movs	r3, #31
20000a52:	18fb      	adds	r3, r7, r3
20000a54:	2201      	movs	r2, #1
20000a56:	701a      	strb	r2, [r3, #0]
20000a58:	e022      	b.n	20000aa0 <pixel+0xac>
		case 1: mask = 2; break;
20000a5a:	231f      	movs	r3, #31
20000a5c:	18fb      	adds	r3, r7, r3
20000a5e:	2202      	movs	r2, #2
20000a60:	701a      	strb	r2, [r3, #0]
20000a62:	e01d      	b.n	20000aa0 <pixel+0xac>
		case 2: mask = 4; break;
20000a64:	231f      	movs	r3, #31
20000a66:	18fb      	adds	r3, r7, r3
20000a68:	2204      	movs	r2, #4
20000a6a:	701a      	strb	r2, [r3, #0]
20000a6c:	e018      	b.n	20000aa0 <pixel+0xac>
		case 3: mask = 8; break;
20000a6e:	231f      	movs	r3, #31
20000a70:	18fb      	adds	r3, r7, r3
20000a72:	2208      	movs	r2, #8
20000a74:	701a      	strb	r2, [r3, #0]
20000a76:	e013      	b.n	20000aa0 <pixel+0xac>
		case 4: mask = 0x10; break;
20000a78:	231f      	movs	r3, #31
20000a7a:	18fb      	adds	r3, r7, r3
20000a7c:	2210      	movs	r2, #16
20000a7e:	701a      	strb	r2, [r3, #0]
20000a80:	e00e      	b.n	20000aa0 <pixel+0xac>
		case 5: mask = 0x20; break;
20000a82:	231f      	movs	r3, #31
20000a84:	18fb      	adds	r3, r7, r3
20000a86:	2220      	movs	r2, #32
20000a88:	701a      	strb	r2, [r3, #0]
20000a8a:	e009      	b.n	20000aa0 <pixel+0xac>
		case 6: mask = 0x40; break;
20000a8c:	231f      	movs	r3, #31
20000a8e:	18fb      	adds	r3, r7, r3
20000a90:	2240      	movs	r2, #64	; 0x40
20000a92:	701a      	strb	r2, [r3, #0]
20000a94:	e004      	b.n	20000aa0 <pixel+0xac>
		case 7: mask = 0x80; break;
20000a96:	231f      	movs	r3, #31
20000a98:	18fb      	adds	r3, r7, r3
20000a9a:	2280      	movs	r2, #128	; 0x80
20000a9c:	701a      	strb	r2, [r3, #0]
20000a9e:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0){
20000aa0:	687b      	ldr	r3, [r7, #4]
20000aa2:	2b00      	cmp	r3, #0
20000aa4:	d105      	bne.n	20000ab2 <pixel+0xbe>
		mask = ~mask;
20000aa6:	221f      	movs	r2, #31
20000aa8:	18bb      	adds	r3, r7, r2
20000aaa:	18ba      	adds	r2, r7, r2
20000aac:	7812      	ldrb	r2, [r2, #0]
20000aae:	43d2      	mvns	r2, r2
20000ab0:	701a      	strb	r2, [r3, #0]
	}
	if(x>64){
20000ab2:	68fb      	ldr	r3, [r7, #12]
20000ab4:	2b40      	cmp	r3, #64	; 0x40
20000ab6:	dd07      	ble.n	20000ac8 <pixel+0xd4>
		controller = B_CS2;
20000ab8:	231e      	movs	r3, #30
20000aba:	18fb      	adds	r3, r7, r3
20000abc:	2210      	movs	r2, #16
20000abe:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000ac0:	68fb      	ldr	r3, [r7, #12]
20000ac2:	3b41      	subs	r3, #65	; 0x41
20000ac4:	60fb      	str	r3, [r7, #12]
20000ac6:	e006      	b.n	20000ad6 <pixel+0xe2>
	}else{
		controller = B_CS1;
20000ac8:	231e      	movs	r3, #30
20000aca:	18fb      	adds	r3, r7, r3
20000acc:	2208      	movs	r2, #8
20000ace:	701a      	strb	r2, [r3, #0]
		x = x-1;
20000ad0:	68fb      	ldr	r3, [r7, #12]
20000ad2:	3b01      	subs	r3, #1
20000ad4:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD | x,controller);
20000ad6:	68fb      	ldr	r3, [r7, #12]
20000ad8:	b25b      	sxtb	r3, r3
20000ada:	2240      	movs	r2, #64	; 0x40
20000adc:	4313      	orrs	r3, r2
20000ade:	b25b      	sxtb	r3, r3
20000ae0:	b2da      	uxtb	r2, r3
20000ae2:	251e      	movs	r5, #30
20000ae4:	197b      	adds	r3, r7, r5
20000ae6:	781b      	ldrb	r3, [r3, #0]
20000ae8:	0019      	movs	r1, r3
20000aea:	0010      	movs	r0, r2
20000aec:	f7ff fe5e 	bl	200007ac <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE| index, controller);
20000af0:	69bb      	ldr	r3, [r7, #24]
20000af2:	b25b      	sxtb	r3, r3
20000af4:	2248      	movs	r2, #72	; 0x48
20000af6:	4252      	negs	r2, r2
20000af8:	4313      	orrs	r3, r2
20000afa:	b25b      	sxtb	r3, r3
20000afc:	b2da      	uxtb	r2, r3
20000afe:	197b      	adds	r3, r7, r5
20000b00:	781b      	ldrb	r3, [r3, #0]
20000b02:	0019      	movs	r1, r3
20000b04:	0010      	movs	r0, r2
20000b06:	f7ff fe51 	bl	200007ac <graphic_write_command>
	c = graphic_read_data(controller);
20000b0a:	2317      	movs	r3, #23
20000b0c:	18fc      	adds	r4, r7, r3
20000b0e:	197b      	adds	r3, r7, r5
20000b10:	781b      	ldrb	r3, [r3, #0]
20000b12:	0018      	movs	r0, r3
20000b14:	f7ff fe8d 	bl	20000832 <graphic_read_data>
20000b18:	0003      	movs	r3, r0
20000b1a:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD| x, controller);
20000b1c:	68fb      	ldr	r3, [r7, #12]
20000b1e:	b25b      	sxtb	r3, r3
20000b20:	2240      	movs	r2, #64	; 0x40
20000b22:	4313      	orrs	r3, r2
20000b24:	b25b      	sxtb	r3, r3
20000b26:	b2da      	uxtb	r2, r3
20000b28:	197b      	adds	r3, r7, r5
20000b2a:	781b      	ldrb	r3, [r3, #0]
20000b2c:	0019      	movs	r1, r3
20000b2e:	0010      	movs	r0, r2
20000b30:	f7ff fe3c 	bl	200007ac <graphic_write_command>
	
	if(set){
20000b34:	687b      	ldr	r3, [r7, #4]
20000b36:	2b00      	cmp	r3, #0
20000b38:	d009      	beq.n	20000b4e <pixel+0x15a>
		mask = mask | c;
20000b3a:	221f      	movs	r2, #31
20000b3c:	18bb      	adds	r3, r7, r2
20000b3e:	18b9      	adds	r1, r7, r2
20000b40:	2217      	movs	r2, #23
20000b42:	18ba      	adds	r2, r7, r2
20000b44:	7809      	ldrb	r1, [r1, #0]
20000b46:	7812      	ldrb	r2, [r2, #0]
20000b48:	430a      	orrs	r2, r1
20000b4a:	701a      	strb	r2, [r3, #0]
20000b4c:	e008      	b.n	20000b60 <pixel+0x16c>
	}else{
		mask = mask & c;
20000b4e:	221f      	movs	r2, #31
20000b50:	18bb      	adds	r3, r7, r2
20000b52:	18ba      	adds	r2, r7, r2
20000b54:	2117      	movs	r1, #23
20000b56:	1879      	adds	r1, r7, r1
20000b58:	7812      	ldrb	r2, [r2, #0]
20000b5a:	7809      	ldrb	r1, [r1, #0]
20000b5c:	400a      	ands	r2, r1
20000b5e:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000b60:	231e      	movs	r3, #30
20000b62:	18fb      	adds	r3, r7, r3
20000b64:	781a      	ldrb	r2, [r3, #0]
20000b66:	231f      	movs	r3, #31
20000b68:	18fb      	adds	r3, r7, r3
20000b6a:	781b      	ldrb	r3, [r3, #0]
20000b6c:	0011      	movs	r1, r2
20000b6e:	0018      	movs	r0, r3
20000b70:	f7ff fe3c 	bl	200007ec <graphic_write_data>
20000b74:	e000      	b.n	20000b78 <pixel+0x184>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000b76:	46c0      	nop			; (mov r8, r8)
}
20000b78:	46bd      	mov	sp, r7
20000b7a:	b008      	add	sp, #32
20000b7c:	bdb0      	pop	{r4, r5, r7, pc}
20000b7e:	46c0      	nop			; (mov r8, r8)
20000b80:	80000007 	andhi	r0, r0, r7
20000b84:	200024c8 	andcs	r2, r0, r8, asr #9

20000b88 <draw_object>:

void draw_object(POBJECT obj)
{
20000b88:	b5b0      	push	{r4, r5, r7, lr}
20000b8a:	b084      	sub	sp, #16
20000b8c:	af00      	add	r7, sp, #0
20000b8e:	6078      	str	r0, [r7, #4]
	uint8_t p;
	uint8_t n = obj->geo->numpoints;
20000b90:	687b      	ldr	r3, [r7, #4]
20000b92:	681b      	ldr	r3, [r3, #0]
20000b94:	681a      	ldr	r2, [r3, #0]
20000b96:	230e      	movs	r3, #14
20000b98:	18fb      	adds	r3, r7, r3
20000b9a:	701a      	strb	r2, [r3, #0]
	uint8_t x_coord;
	uint8_t y_coord;
	
	POINT s;
	for(p = 0; p<n; p++){
20000b9c:	230f      	movs	r3, #15
20000b9e:	18fb      	adds	r3, r7, r3
20000ba0:	2200      	movs	r2, #0
20000ba2:	701a      	strb	r2, [r3, #0]
20000ba4:	e02d      	b.n	20000c02 <draw_object+0x7a>
		//s = obj -> geo -> px[p];
		x_coord  = obj->posx + obj->geo->px[p].x;
20000ba6:	687b      	ldr	r3, [r7, #4]
20000ba8:	68db      	ldr	r3, [r3, #12]
20000baa:	b2d9      	uxtb	r1, r3
20000bac:	687b      	ldr	r3, [r7, #4]
20000bae:	681a      	ldr	r2, [r3, #0]
20000bb0:	240f      	movs	r4, #15
20000bb2:	193b      	adds	r3, r7, r4
20000bb4:	781b      	ldrb	r3, [r3, #0]
20000bb6:	3304      	adds	r3, #4
20000bb8:	005b      	lsls	r3, r3, #1
20000bba:	18d3      	adds	r3, r2, r3
20000bbc:	3304      	adds	r3, #4
20000bbe:	781a      	ldrb	r2, [r3, #0]
20000bc0:	200d      	movs	r0, #13
20000bc2:	183b      	adds	r3, r7, r0
20000bc4:	188a      	adds	r2, r1, r2
20000bc6:	701a      	strb	r2, [r3, #0]
		y_coord = obj->posy + obj->geo->px[p].y;
20000bc8:	687b      	ldr	r3, [r7, #4]
20000bca:	691b      	ldr	r3, [r3, #16]
20000bcc:	b2d9      	uxtb	r1, r3
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	681a      	ldr	r2, [r3, #0]
20000bd2:	193b      	adds	r3, r7, r4
20000bd4:	781b      	ldrb	r3, [r3, #0]
20000bd6:	3304      	adds	r3, #4
20000bd8:	005b      	lsls	r3, r3, #1
20000bda:	18d3      	adds	r3, r2, r3
20000bdc:	3305      	adds	r3, #5
20000bde:	781a      	ldrb	r2, [r3, #0]
20000be0:	250c      	movs	r5, #12
20000be2:	197b      	adds	r3, r7, r5
20000be4:	188a      	adds	r2, r1, r2
20000be6:	701a      	strb	r2, [r3, #0]
		//point = obj->geo->px;
		//pixel(s.x, s.y,1);
		pixel(x_coord,y_coord,1);
20000be8:	183b      	adds	r3, r7, r0
20000bea:	7818      	ldrb	r0, [r3, #0]
20000bec:	197b      	adds	r3, r7, r5
20000bee:	781b      	ldrb	r3, [r3, #0]
20000bf0:	2201      	movs	r2, #1
20000bf2:	0019      	movs	r1, r3
20000bf4:	f7ff fefe 	bl	200009f4 <pixel>
	for(p = 0; p<n; p++){
20000bf8:	193b      	adds	r3, r7, r4
20000bfa:	781a      	ldrb	r2, [r3, #0]
20000bfc:	193b      	adds	r3, r7, r4
20000bfe:	3201      	adds	r2, #1
20000c00:	701a      	strb	r2, [r3, #0]
20000c02:	230f      	movs	r3, #15
20000c04:	18fa      	adds	r2, r7, r3
20000c06:	230e      	movs	r3, #14
20000c08:	18fb      	adds	r3, r7, r3
20000c0a:	7812      	ldrb	r2, [r2, #0]
20000c0c:	781b      	ldrb	r3, [r3, #0]
20000c0e:	429a      	cmp	r2, r3
20000c10:	d3c9      	bcc.n	20000ba6 <draw_object+0x1e>
	}
}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	46bd      	mov	sp, r7
20000c16:	b004      	add	sp, #16
20000c18:	bdb0      	pop	{r4, r5, r7, pc}

20000c1a <clear_object>:

void clear_object(POBJECT obj)
{
20000c1a:	b5b0      	push	{r4, r5, r7, lr}
20000c1c:	b084      	sub	sp, #16
20000c1e:	af00      	add	r7, sp, #0
20000c20:	6078      	str	r0, [r7, #4]
	uint8_t p;
	uint8_t n = obj->geo->numpoints;
20000c22:	687b      	ldr	r3, [r7, #4]
20000c24:	681b      	ldr	r3, [r3, #0]
20000c26:	681a      	ldr	r2, [r3, #0]
20000c28:	230e      	movs	r3, #14
20000c2a:	18fb      	adds	r3, r7, r3
20000c2c:	701a      	strb	r2, [r3, #0]
	uint8_t x_coord;
	uint8_t y_coord;
	for(p = 0; p<n; p++){
20000c2e:	230f      	movs	r3, #15
20000c30:	18fb      	adds	r3, r7, r3
20000c32:	2200      	movs	r2, #0
20000c34:	701a      	strb	r2, [r3, #0]
20000c36:	e02d      	b.n	20000c94 <clear_object+0x7a>
		x_coord  = obj->posx + obj->geo->px[p].x;
20000c38:	687b      	ldr	r3, [r7, #4]
20000c3a:	68db      	ldr	r3, [r3, #12]
20000c3c:	b2d9      	uxtb	r1, r3
20000c3e:	687b      	ldr	r3, [r7, #4]
20000c40:	681a      	ldr	r2, [r3, #0]
20000c42:	240f      	movs	r4, #15
20000c44:	193b      	adds	r3, r7, r4
20000c46:	781b      	ldrb	r3, [r3, #0]
20000c48:	3304      	adds	r3, #4
20000c4a:	005b      	lsls	r3, r3, #1
20000c4c:	18d3      	adds	r3, r2, r3
20000c4e:	3304      	adds	r3, #4
20000c50:	781a      	ldrb	r2, [r3, #0]
20000c52:	200d      	movs	r0, #13
20000c54:	183b      	adds	r3, r7, r0
20000c56:	188a      	adds	r2, r1, r2
20000c58:	701a      	strb	r2, [r3, #0]
		y_coord = obj->posy + obj->geo->px[p].y;
20000c5a:	687b      	ldr	r3, [r7, #4]
20000c5c:	691b      	ldr	r3, [r3, #16]
20000c5e:	b2d9      	uxtb	r1, r3
20000c60:	687b      	ldr	r3, [r7, #4]
20000c62:	681a      	ldr	r2, [r3, #0]
20000c64:	193b      	adds	r3, r7, r4
20000c66:	781b      	ldrb	r3, [r3, #0]
20000c68:	3304      	adds	r3, #4
20000c6a:	005b      	lsls	r3, r3, #1
20000c6c:	18d3      	adds	r3, r2, r3
20000c6e:	3305      	adds	r3, #5
20000c70:	781a      	ldrb	r2, [r3, #0]
20000c72:	250c      	movs	r5, #12
20000c74:	197b      	adds	r3, r7, r5
20000c76:	188a      	adds	r2, r1, r2
20000c78:	701a      	strb	r2, [r3, #0]
		pixel(x_coord,y_coord,0);
20000c7a:	183b      	adds	r3, r7, r0
20000c7c:	7818      	ldrb	r0, [r3, #0]
20000c7e:	197b      	adds	r3, r7, r5
20000c80:	781b      	ldrb	r3, [r3, #0]
20000c82:	2200      	movs	r2, #0
20000c84:	0019      	movs	r1, r3
20000c86:	f7ff feb5 	bl	200009f4 <pixel>
	for(p = 0; p<n; p++){
20000c8a:	193b      	adds	r3, r7, r4
20000c8c:	781a      	ldrb	r2, [r3, #0]
20000c8e:	193b      	adds	r3, r7, r4
20000c90:	3201      	adds	r2, #1
20000c92:	701a      	strb	r2, [r3, #0]
20000c94:	230f      	movs	r3, #15
20000c96:	18fa      	adds	r2, r7, r3
20000c98:	230e      	movs	r3, #14
20000c9a:	18fb      	adds	r3, r7, r3
20000c9c:	7812      	ldrb	r2, [r2, #0]
20000c9e:	781b      	ldrb	r3, [r3, #0]
20000ca0:	429a      	cmp	r2, r3
20000ca2:	d3c9      	bcc.n	20000c38 <clear_object+0x1e>
	}
20000ca4:	46c0      	nop			; (mov r8, r8)
20000ca6:	46bd      	mov	sp, r7
20000ca8:	b004      	add	sp, #16
20000caa:	bdb0      	pop	{r4, r5, r7, pc}

20000cac <ascii_ctrl_bit_set>:
#include <delay.h>
#include <gpio.h>

void ascii_ctrl_bit_set(unsigned char x)
{
20000cac:	b580      	push	{r7, lr}
20000cae:	b084      	sub	sp, #16
20000cb0:	af00      	add	r7, sp, #0
20000cb2:	0002      	movs	r2, r0
20000cb4:	1dfb      	adds	r3, r7, #7
20000cb6:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
20000cb8:	4a0c      	ldr	r2, [pc, #48]	; (20000cec <ascii_ctrl_bit_set+0x40>)
20000cba:	210f      	movs	r1, #15
20000cbc:	187b      	adds	r3, r7, r1
20000cbe:	7d12      	ldrb	r2, [r2, #20]
20000cc0:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x ); //Varför ettställa B_select?
20000cc2:	1dfa      	adds	r2, r7, #7
20000cc4:	187b      	adds	r3, r7, r1
20000cc6:	7812      	ldrb	r2, [r2, #0]
20000cc8:	781b      	ldrb	r3, [r3, #0]
20000cca:	4313      	orrs	r3, r2
20000ccc:	b2da      	uxtb	r2, r3
20000cce:	0008      	movs	r0, r1
20000cd0:	187b      	adds	r3, r7, r1
20000cd2:	2104      	movs	r1, #4
20000cd4:	430a      	orrs	r2, r1
20000cd6:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
20000cd8:	4a04      	ldr	r2, [pc, #16]	; (20000cec <ascii_ctrl_bit_set+0x40>)
20000cda:	0001      	movs	r1, r0
20000cdc:	187b      	adds	r3, r7, r1
20000cde:	781b      	ldrb	r3, [r3, #0]
20000ce0:	7513      	strb	r3, [r2, #20]
}
20000ce2:	46c0      	nop			; (mov r8, r8)
20000ce4:	46bd      	mov	sp, r7
20000ce6:	b004      	add	sp, #16
20000ce8:	bd80      	pop	{r7, pc}
20000cea:	46c0      	nop			; (mov r8, r8)
20000cec:	40021000 	andmi	r1, r2, r0

20000cf0 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
20000cf0:	b580      	push	{r7, lr}
20000cf2:	b084      	sub	sp, #16
20000cf4:	af00      	add	r7, sp, #0
20000cf6:	0002      	movs	r2, r0
20000cf8:	1dfb      	adds	r3, r7, #7
20000cfa:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
20000cfc:	4a0d      	ldr	r2, [pc, #52]	; (20000d34 <ascii_ctrl_bit_clear+0x44>)
20000cfe:	210f      	movs	r1, #15
20000d00:	187b      	adds	r3, r7, r1
20000d02:	7d12      	ldrb	r2, [r2, #20]
20000d04:	701a      	strb	r2, [r3, #0]
	c &= (B_SELECT | ~x); //~ bildar 1-komplement
20000d06:	1dfb      	adds	r3, r7, #7
20000d08:	781b      	ldrb	r3, [r3, #0]
20000d0a:	b25b      	sxtb	r3, r3
20000d0c:	43db      	mvns	r3, r3
20000d0e:	b25b      	sxtb	r3, r3
20000d10:	2204      	movs	r2, #4
20000d12:	4313      	orrs	r3, r2
20000d14:	b25b      	sxtb	r3, r3
20000d16:	187a      	adds	r2, r7, r1
20000d18:	7812      	ldrb	r2, [r2, #0]
20000d1a:	b252      	sxtb	r2, r2
20000d1c:	4013      	ands	r3, r2
20000d1e:	b25a      	sxtb	r2, r3
20000d20:	187b      	adds	r3, r7, r1
20000d22:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
20000d24:	4a03      	ldr	r2, [pc, #12]	; (20000d34 <ascii_ctrl_bit_clear+0x44>)
20000d26:	187b      	adds	r3, r7, r1
20000d28:	781b      	ldrb	r3, [r3, #0]
20000d2a:	7513      	strb	r3, [r2, #20]
}
20000d2c:	46c0      	nop			; (mov r8, r8)
20000d2e:	46bd      	mov	sp, r7
20000d30:	b004      	add	sp, #16
20000d32:	bd80      	pop	{r7, pc}
20000d34:	40021000 	andmi	r1, r2, r0

20000d38 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
20000d38:	b580      	push	{r7, lr}
20000d3a:	b082      	sub	sp, #8
20000d3c:	af00      	add	r7, sp, #0
20000d3e:	0002      	movs	r2, r0
20000d40:	1dfb      	adds	r3, r7, #7
20000d42:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set( B_E );
20000d44:	2040      	movs	r0, #64	; 0x40
20000d46:	f7ff ffb1 	bl	20000cac <ascii_ctrl_bit_set>
	GPIO_E.odrHigh = byte;
20000d4a:	4a06      	ldr	r2, [pc, #24]	; (20000d64 <ascii_write_controller+0x2c>)
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	781b      	ldrb	r3, [r3, #0]
20000d50:	7553      	strb	r3, [r2, #21]
	delay_250ns();
20000d52:	f7ff f97b 	bl	2000004c <delay_250ns>
	ascii_ctrl_bit_clear(B_E);	//Ska delay vara före eller efter detta?
20000d56:	2040      	movs	r0, #64	; 0x40
20000d58:	f7ff ffca 	bl	20000cf0 <ascii_ctrl_bit_clear>
}
20000d5c:	46c0      	nop			; (mov r8, r8)
20000d5e:	46bd      	mov	sp, r7
20000d60:	b002      	add	sp, #8
20000d62:	bd80      	pop	{r7, pc}
20000d64:	40021000 	andmi	r1, r2, r0

20000d68 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000d68:	b580      	push	{r7, lr}
20000d6a:	b082      	sub	sp, #8
20000d6c:	af00      	add	r7, sp, #0
	unsigned char rv;
	ascii_ctrl_bit_set( B_E );
20000d6e:	2040      	movs	r0, #64	; 0x40
20000d70:	f7ff ff9c 	bl	20000cac <ascii_ctrl_bit_set>
	delay_250ns();
20000d74:	f7ff f96a 	bl	2000004c <delay_250ns>
	delay_250ns();
20000d78:	f7ff f968 	bl	2000004c <delay_250ns>
	rv = GPIO_E.idrHigh;
20000d7c:	4a06      	ldr	r2, [pc, #24]	; (20000d98 <ascii_read_controller+0x30>)
20000d7e:	1dfb      	adds	r3, r7, #7
20000d80:	7c52      	ldrb	r2, [r2, #17]
20000d82:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_E );
20000d84:	2040      	movs	r0, #64	; 0x40
20000d86:	f7ff ffb3 	bl	20000cf0 <ascii_ctrl_bit_clear>
	return rv;
20000d8a:	1dfb      	adds	r3, r7, #7
20000d8c:	781b      	ldrb	r3, [r3, #0]
	
}
20000d8e:	0018      	movs	r0, r3
20000d90:	46bd      	mov	sp, r7
20000d92:	b002      	add	sp, #8
20000d94:	bd80      	pop	{r7, pc}
20000d96:	46c0      	nop			; (mov r8, r8)
20000d98:	40021000 	andmi	r1, r2, r0

20000d9c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
20000d9c:	b580      	push	{r7, lr}
20000d9e:	b082      	sub	sp, #8
20000da0:	af00      	add	r7, sp, #0
20000da2:	0002      	movs	r2, r0
20000da4:	1dfb      	adds	r3, r7, #7
20000da6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000da8:	2001      	movs	r0, #1
20000daa:	f7ff ffa1 	bl	20000cf0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000dae:	2002      	movs	r0, #2
20000db0:	f7ff ff9e 	bl	20000cf0 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000db4:	1dfb      	adds	r3, r7, #7
20000db6:	781b      	ldrb	r3, [r3, #0]
20000db8:	0018      	movs	r0, r3
20000dba:	f7ff ffbd 	bl	20000d38 <ascii_write_controller>
	
}
20000dbe:	46c0      	nop			; (mov r8, r8)
20000dc0:	46bd      	mov	sp, r7
20000dc2:	b002      	add	sp, #8
20000dc4:	bd80      	pop	{r7, pc}

20000dc6 <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
20000dc6:	b580      	push	{r7, lr}
20000dc8:	b082      	sub	sp, #8
20000dca:	af00      	add	r7, sp, #0
20000dcc:	0002      	movs	r2, r0
20000dce:	1dfb      	adds	r3, r7, #7
20000dd0:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000dd2:	2001      	movs	r0, #1
20000dd4:	f7ff ff6a 	bl	20000cac <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000dd8:	2002      	movs	r0, #2
20000dda:	f7ff ff89 	bl	20000cf0 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000dde:	1dfb      	adds	r3, r7, #7
20000de0:	781b      	ldrb	r3, [r3, #0]
20000de2:	0018      	movs	r0, r3
20000de4:	f7ff ffa8 	bl	20000d38 <ascii_write_controller>
}
20000de8:	46c0      	nop			; (mov r8, r8)
20000dea:	46bd      	mov	sp, r7
20000dec:	b002      	add	sp, #8
20000dee:	bd80      	pop	{r7, pc}

20000df0 <ascii_read_status>:



unsigned char ascii_read_status(void)
{
20000df0:	b590      	push	{r4, r7, lr}
20000df2:	b083      	sub	sp, #12
20000df4:	af00      	add	r7, sp, #0
	unsigned char rv;
	GPIO_E.moder &= 0x00005555;
20000df6:	4b0e      	ldr	r3, [pc, #56]	; (20000e30 <ascii_read_status+0x40>)
20000df8:	681a      	ldr	r2, [r3, #0]
20000dfa:	4b0d      	ldr	r3, [pc, #52]	; (20000e30 <ascii_read_status+0x40>)
20000dfc:	490d      	ldr	r1, [pc, #52]	; (20000e34 <ascii_read_status+0x44>)
20000dfe:	400a      	ands	r2, r1
20000e00:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000e02:	2002      	movs	r0, #2
20000e04:	f7ff ff52 	bl	20000cac <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
20000e08:	2001      	movs	r0, #1
20000e0a:	f7ff ff71 	bl	20000cf0 <ascii_ctrl_bit_clear>
	rv = ascii_read_controller();
20000e0e:	1dfc      	adds	r4, r7, #7
20000e10:	f7ff ffaa 	bl	20000d68 <ascii_read_controller>
20000e14:	0003      	movs	r3, r0
20000e16:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder |= 0x55555555;
20000e18:	4b05      	ldr	r3, [pc, #20]	; (20000e30 <ascii_read_status+0x40>)
20000e1a:	681a      	ldr	r2, [r3, #0]
20000e1c:	4b04      	ldr	r3, [pc, #16]	; (20000e30 <ascii_read_status+0x40>)
20000e1e:	4906      	ldr	r1, [pc, #24]	; (20000e38 <ascii_read_status+0x48>)
20000e20:	430a      	orrs	r2, r1
20000e22:	601a      	str	r2, [r3, #0]
	return rv;
20000e24:	1dfb      	adds	r3, r7, #7
20000e26:	781b      	ldrb	r3, [r3, #0]
}
20000e28:	0018      	movs	r0, r3
20000e2a:	46bd      	mov	sp, r7
20000e2c:	b003      	add	sp, #12
20000e2e:	bd90      	pop	{r4, r7, pc}
20000e30:	40021000 	andmi	r1, r2, r0
20000e34:	00005555 	andeq	r5, r0, r5, asr r5
20000e38:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000e3c <ascii_read_data>:

unsigned char ascii_read_data(void)
{
20000e3c:	b590      	push	{r4, r7, lr}
20000e3e:	b083      	sub	sp, #12
20000e40:	af00      	add	r7, sp, #0
	unsigned char rv;
	GPIO_E.moder &= 0x00005555;
20000e42:	4b0e      	ldr	r3, [pc, #56]	; (20000e7c <ascii_read_data+0x40>)
20000e44:	681a      	ldr	r2, [r3, #0]
20000e46:	4b0d      	ldr	r3, [pc, #52]	; (20000e7c <ascii_read_data+0x40>)
20000e48:	490d      	ldr	r1, [pc, #52]	; (20000e80 <ascii_read_data+0x44>)
20000e4a:	400a      	ands	r2, r1
20000e4c:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000e4e:	2001      	movs	r0, #1
20000e50:	f7ff ff2c 	bl	20000cac <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000e54:	2002      	movs	r0, #2
20000e56:	f7ff ff29 	bl	20000cac <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
20000e5a:	1dfc      	adds	r4, r7, #7
20000e5c:	f7ff ff84 	bl	20000d68 <ascii_read_controller>
20000e60:	0003      	movs	r3, r0
20000e62:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder |= 0x55555555;
20000e64:	4b05      	ldr	r3, [pc, #20]	; (20000e7c <ascii_read_data+0x40>)
20000e66:	681a      	ldr	r2, [r3, #0]
20000e68:	4b04      	ldr	r3, [pc, #16]	; (20000e7c <ascii_read_data+0x40>)
20000e6a:	4906      	ldr	r1, [pc, #24]	; (20000e84 <ascii_read_data+0x48>)
20000e6c:	430a      	orrs	r2, r1
20000e6e:	601a      	str	r2, [r3, #0]
	return rv;
20000e70:	1dfb      	adds	r3, r7, #7
20000e72:	781b      	ldrb	r3, [r3, #0]
}
20000e74:	0018      	movs	r0, r3
20000e76:	46bd      	mov	sp, r7
20000e78:	b003      	add	sp, #12
20000e7a:	bd90      	pop	{r4, r7, pc}
20000e7c:	40021000 	andmi	r1, r2, r0
20000e80:	00005555 	andeq	r5, r0, r5, asr r5
20000e84:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000e88 <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
20000e88:	b580      	push	{r7, lr}
20000e8a:	b082      	sub	sp, #8
20000e8c:	af00      	add	r7, sp, #0
20000e8e:	0002      	movs	r2, r0
20000e90:	1dfb      	adds	r3, r7, #7
20000e92:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000e94:	46c0      	nop			; (mov r8, r8)
20000e96:	f7ff ffab 	bl	20000df0 <ascii_read_status>
20000e9a:	0003      	movs	r3, r0
20000e9c:	001a      	movs	r2, r3
20000e9e:	2380      	movs	r3, #128	; 0x80
20000ea0:	4013      	ands	r3, r2
20000ea2:	2b80      	cmp	r3, #128	; 0x80
20000ea4:	d0f7      	beq.n	20000e96 <ascii_write_char+0xe>
	delay_micro(8);
20000ea6:	2008      	movs	r0, #8
20000ea8:	f7ff f8c1 	bl	2000002e <delay_micro>
	ascii_write_data(c);
20000eac:	1dfb      	adds	r3, r7, #7
20000eae:	781b      	ldrb	r3, [r3, #0]
20000eb0:	0018      	movs	r0, r3
20000eb2:	f7ff ff88 	bl	20000dc6 <ascii_write_data>
	delay_micro(45);
20000eb6:	202d      	movs	r0, #45	; 0x2d
20000eb8:	f7ff f8b9 	bl	2000002e <delay_micro>
}
20000ebc:	46c0      	nop			; (mov r8, r8)
20000ebe:	46bd      	mov	sp, r7
20000ec0:	b002      	add	sp, #8
20000ec2:	bd80      	pop	{r7, pc}

20000ec4 <ascii_gotoxy>:

void ascii_gotoxy(int row, int col)
{
20000ec4:	b580      	push	{r7, lr}
20000ec6:	b084      	sub	sp, #16
20000ec8:	af00      	add	r7, sp, #0
20000eca:	6078      	str	r0, [r7, #4]
20000ecc:	6039      	str	r1, [r7, #0]
	unsigned int adress;
	adress = row -1;
20000ece:	687b      	ldr	r3, [r7, #4]
20000ed0:	3b01      	subs	r3, #1
20000ed2:	60fb      	str	r3, [r7, #12]
	if(col == 2)
20000ed4:	683b      	ldr	r3, [r7, #0]
20000ed6:	2b02      	cmp	r3, #2
20000ed8:	d102      	bne.n	20000ee0 <ascii_gotoxy+0x1c>
	{
		adress = adress + 0x40;
20000eda:	68fb      	ldr	r3, [r7, #12]
20000edc:	3340      	adds	r3, #64	; 0x40
20000ede:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80|adress);
20000ee0:	68fb      	ldr	r3, [r7, #12]
20000ee2:	b2db      	uxtb	r3, r3
20000ee4:	2280      	movs	r2, #128	; 0x80
20000ee6:	4252      	negs	r2, r2
20000ee8:	4313      	orrs	r3, r2
20000eea:	b2db      	uxtb	r3, r3
20000eec:	0018      	movs	r0, r3
20000eee:	f7ff ff55 	bl	20000d9c <ascii_write_cmd>
}
20000ef2:	46c0      	nop			; (mov r8, r8)
20000ef4:	46bd      	mov	sp, r7
20000ef6:	b004      	add	sp, #16
20000ef8:	bd80      	pop	{r7, pc}

20000efa <ascii_init>:

void ascii_init(void)
{
20000efa:	b580      	push	{r7, lr}
20000efc:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000efe:	46c0      	nop			; (mov r8, r8)
20000f00:	f7ff ff76 	bl	20000df0 <ascii_read_status>
20000f04:	0003      	movs	r3, r0
20000f06:	001a      	movs	r2, r3
20000f08:	2380      	movs	r3, #128	; 0x80
20000f0a:	4013      	ands	r3, r2
20000f0c:	2b80      	cmp	r3, #128	; 0x80
20000f0e:	d0f7      	beq.n	20000f00 <ascii_init+0x6>
	delay_micro(8);
20000f10:	2008      	movs	r0, #8
20000f12:	f7ff f88c 	bl	2000002e <delay_micro>
	ascii_write_cmd(0x38); //00111000
20000f16:	2038      	movs	r0, #56	; 0x38
20000f18:	f7ff ff40 	bl	20000d9c <ascii_write_cmd>
	delay_micro(40);
20000f1c:	2028      	movs	r0, #40	; 0x28
20000f1e:	f7ff f886 	bl	2000002e <delay_micro>
	
	while((ascii_read_status() & 0x80) == 0x80){}
20000f22:	46c0      	nop			; (mov r8, r8)
20000f24:	f7ff ff64 	bl	20000df0 <ascii_read_status>
20000f28:	0003      	movs	r3, r0
20000f2a:	001a      	movs	r2, r3
20000f2c:	2380      	movs	r3, #128	; 0x80
20000f2e:	4013      	ands	r3, r2
20000f30:	2b80      	cmp	r3, #128	; 0x80
20000f32:	d0f7      	beq.n	20000f24 <ascii_init+0x2a>
	delay_micro(8);
20000f34:	2008      	movs	r0, #8
20000f36:	f7ff f87a 	bl	2000002e <delay_micro>
	ascii_write_cmd(0x0D); //00001110
20000f3a:	200d      	movs	r0, #13
20000f3c:	f7ff ff2e 	bl	20000d9c <ascii_write_cmd>
	delay_micro(40);
20000f40:	2028      	movs	r0, #40	; 0x28
20000f42:	f7ff f874 	bl	2000002e <delay_micro>
	
	while((ascii_read_status() & 0x80) == 0x80){}
20000f46:	46c0      	nop			; (mov r8, r8)
20000f48:	f7ff ff52 	bl	20000df0 <ascii_read_status>
20000f4c:	0003      	movs	r3, r0
20000f4e:	001a      	movs	r2, r3
20000f50:	2380      	movs	r3, #128	; 0x80
20000f52:	4013      	ands	r3, r2
20000f54:	2b80      	cmp	r3, #128	; 0x80
20000f56:	d0f7      	beq.n	20000f48 <ascii_init+0x4e>
	delay_micro(8);
20000f58:	2008      	movs	r0, #8
20000f5a:	f7ff f868 	bl	2000002e <delay_micro>
	ascii_write_cmd(1);
20000f5e:	2001      	movs	r0, #1
20000f60:	f7ff ff1c 	bl	20000d9c <ascii_write_cmd>
	delay_milli(2);
20000f64:	2002      	movs	r0, #2
20000f66:	f7ff f853 	bl	20000010 <delay_milli>
	
	while((ascii_read_status() & 0x80) == 0x80){}
20000f6a:	46c0      	nop			; (mov r8, r8)
20000f6c:	f7ff ff40 	bl	20000df0 <ascii_read_status>
20000f70:	0003      	movs	r3, r0
20000f72:	001a      	movs	r2, r3
20000f74:	2380      	movs	r3, #128	; 0x80
20000f76:	4013      	ands	r3, r2
20000f78:	2b80      	cmp	r3, #128	; 0x80
20000f7a:	d0f7      	beq.n	20000f6c <ascii_init+0x72>
	delay_micro(8);
20000f7c:	2008      	movs	r0, #8
20000f7e:	f7ff f856 	bl	2000002e <delay_micro>
	ascii_write_cmd(0x06); //Rätt? Increment? 00000100
20000f82:	2006      	movs	r0, #6
20000f84:	f7ff ff0a 	bl	20000d9c <ascii_write_cmd>
	delay_micro(39);
20000f88:	2027      	movs	r0, #39	; 0x27
20000f8a:	f7ff f850 	bl	2000002e <delay_micro>
20000f8e:	46c0      	nop			; (mov r8, r8)
20000f90:	46bd      	mov	sp, r7
20000f92:	bd80      	pop	{r7, pc}

20000f94 <keyb>:
#include <gpio.h>

unsigned char keyb(void) 
{ 
20000f94:	b590      	push	{r4, r7, lr}
20000f96:	b087      	sub	sp, #28
20000f98:	af00      	add	r7, sp, #0
 unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD}; 
20000f9a:	003b      	movs	r3, r7
20000f9c:	4a16      	ldr	r2, [pc, #88]	; (20000ff8 <keyb+0x64>)
20000f9e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000fa0:	c313      	stmia	r3!, {r0, r1, r4}
20000fa2:	6812      	ldr	r2, [r2, #0]
20000fa4:	601a      	str	r2, [r3, #0]
 int row, col; 
 for (row=1; row <=4 ; row++ ) { 
20000fa6:	2301      	movs	r3, #1
20000fa8:	617b      	str	r3, [r7, #20]
20000faa:	e019      	b.n	20000fe0 <keyb+0x4c>
  kbdActivate(row); 
20000fac:	697b      	ldr	r3, [r7, #20]
20000fae:	0018      	movs	r0, r3
20000fb0:	f000 f824 	bl	20000ffc <kbdActivate>
  col = kbdGetCol();
20000fb4:	f000 f84c 	bl	20001050 <kbdGetCol>
20000fb8:	0003      	movs	r3, r0
20000fba:	613b      	str	r3, [r7, #16]
  if( col != 0 ) { 
20000fbc:	693b      	ldr	r3, [r7, #16]
20000fbe:	2b00      	cmp	r3, #0
20000fc0:	d00b      	beq.n	20000fda <keyb+0x46>
   kbdActivate( 0 ); 
20000fc2:	2000      	movs	r0, #0
20000fc4:	f000 f81a 	bl	20000ffc <kbdActivate>
   return key [4*(row-1)+(col-1) ]; 
20000fc8:	697b      	ldr	r3, [r7, #20]
20000fca:	3b01      	subs	r3, #1
20000fcc:	009a      	lsls	r2, r3, #2
20000fce:	693b      	ldr	r3, [r7, #16]
20000fd0:	3b01      	subs	r3, #1
20000fd2:	18d3      	adds	r3, r2, r3
20000fd4:	003a      	movs	r2, r7
20000fd6:	5cd3      	ldrb	r3, [r2, r3]
20000fd8:	e009      	b.n	20000fee <keyb+0x5a>
 for (row=1; row <=4 ; row++ ) { 
20000fda:	697b      	ldr	r3, [r7, #20]
20000fdc:	3301      	adds	r3, #1
20000fde:	617b      	str	r3, [r7, #20]
20000fe0:	697b      	ldr	r3, [r7, #20]
20000fe2:	2b04      	cmp	r3, #4
20000fe4:	dde2      	ble.n	20000fac <keyb+0x18>
  } 
 } 
 kbdActivate( 0 ); 
20000fe6:	2000      	movs	r0, #0
20000fe8:	f000 f808 	bl	20000ffc <kbdActivate>
 return 0xFF; 
20000fec:	23ff      	movs	r3, #255	; 0xff
}
20000fee:	0018      	movs	r0, r3
20000ff0:	46bd      	mov	sp, r7
20000ff2:	b007      	add	sp, #28
20000ff4:	bd90      	pop	{r4, r7, pc}
20000ff6:	46c0      	nop			; (mov r8, r8)
20000ff8:	200024e8 	andcs	r2, r0, r8, ror #9

20000ffc <kbdActivate>:

void kbdActivate( unsigned int row ) /* Aktivera angiven rad hos tangentbordet, eller * deaktivera samtliga */
{  
20000ffc:	b580      	push	{r7, lr}
20000ffe:	b082      	sub	sp, #8
20001000:	af00      	add	r7, sp, #0
20001002:	6078      	str	r0, [r7, #4]
 switch( row ) 
20001004:	687b      	ldr	r3, [r7, #4]
20001006:	2b04      	cmp	r3, #4
20001008:	d819      	bhi.n	2000103e <kbdActivate+0x42>
2000100a:	687b      	ldr	r3, [r7, #4]
2000100c:	009a      	lsls	r2, r3, #2
2000100e:	4b0e      	ldr	r3, [pc, #56]	; (20001048 <kbdActivate+0x4c>)
20001010:	18d3      	adds	r3, r2, r3
20001012:	681b      	ldr	r3, [r3, #0]
20001014:	469f      	mov	pc, r3
 { 
  case 1: GPIO_D.odrHigh = 0x10; break; 
20001016:	4b0d      	ldr	r3, [pc, #52]	; (2000104c <kbdActivate+0x50>)
20001018:	2210      	movs	r2, #16
2000101a:	755a      	strb	r2, [r3, #21]
2000101c:	e00f      	b.n	2000103e <kbdActivate+0x42>
  case 2: GPIO_D.odrHigh = 0x20; break; 
2000101e:	4b0b      	ldr	r3, [pc, #44]	; (2000104c <kbdActivate+0x50>)
20001020:	2220      	movs	r2, #32
20001022:	755a      	strb	r2, [r3, #21]
20001024:	e00b      	b.n	2000103e <kbdActivate+0x42>
  case 3: GPIO_D.odrHigh = 0x40; break; 
20001026:	4b09      	ldr	r3, [pc, #36]	; (2000104c <kbdActivate+0x50>)
20001028:	2240      	movs	r2, #64	; 0x40
2000102a:	755a      	strb	r2, [r3, #21]
2000102c:	e007      	b.n	2000103e <kbdActivate+0x42>
  case 4: GPIO_D.odrHigh = 0x80; break; 
2000102e:	4b07      	ldr	r3, [pc, #28]	; (2000104c <kbdActivate+0x50>)
20001030:	2280      	movs	r2, #128	; 0x80
20001032:	755a      	strb	r2, [r3, #21]
20001034:	e003      	b.n	2000103e <kbdActivate+0x42>
  case 0: GPIO_D.odrHigh = 0x00; break; 
20001036:	4b05      	ldr	r3, [pc, #20]	; (2000104c <kbdActivate+0x50>)
20001038:	2200      	movs	r2, #0
2000103a:	755a      	strb	r2, [r3, #21]
2000103c:	46c0      	nop			; (mov r8, r8)
 } 
}
2000103e:	46c0      	nop			; (mov r8, r8)
20001040:	46bd      	mov	sp, r7
20001042:	b002      	add	sp, #8
20001044:	bd80      	pop	{r7, pc}
20001046:	46c0      	nop			; (mov r8, r8)
20001048:	200024f8 	strdcs	r2, [r0], -r8
2000104c:	40020c00 	andmi	r0, r2, r0, lsl #24

20001050 <kbdGetCol>:
int kbdGetCol ( void )  /* Om någon tangent (i aktiverad rad) * är nedtryckt, returnera dess kolumnnummer, * annars, returnera 0 */ 
{
20001050:	b580      	push	{r7, lr}
20001052:	b082      	sub	sp, #8
20001054:	af00      	add	r7, sp, #0
 unsigned char c; 
 c = GPIO_D.idrHigh; 
20001056:	4a12      	ldr	r2, [pc, #72]	; (200010a0 <kbdGetCol+0x50>)
20001058:	1dfb      	adds	r3, r7, #7
2000105a:	7c52      	ldrb	r2, [r2, #17]
2000105c:	701a      	strb	r2, [r3, #0]
 if ( c & 0x8 ) return 4; 
2000105e:	1dfb      	adds	r3, r7, #7
20001060:	781b      	ldrb	r3, [r3, #0]
20001062:	2208      	movs	r2, #8
20001064:	4013      	ands	r3, r2
20001066:	d001      	beq.n	2000106c <kbdGetCol+0x1c>
20001068:	2304      	movs	r3, #4
2000106a:	e015      	b.n	20001098 <kbdGetCol+0x48>
 if ( c & 0x4 ) return 3;
2000106c:	1dfb      	adds	r3, r7, #7
2000106e:	781b      	ldrb	r3, [r3, #0]
20001070:	2204      	movs	r2, #4
20001072:	4013      	ands	r3, r2
20001074:	d001      	beq.n	2000107a <kbdGetCol+0x2a>
20001076:	2303      	movs	r3, #3
20001078:	e00e      	b.n	20001098 <kbdGetCol+0x48>
 if ( c & 0x2 ) return 2;
2000107a:	1dfb      	adds	r3, r7, #7
2000107c:	781b      	ldrb	r3, [r3, #0]
2000107e:	2202      	movs	r2, #2
20001080:	4013      	ands	r3, r2
20001082:	d001      	beq.n	20001088 <kbdGetCol+0x38>
20001084:	2302      	movs	r3, #2
20001086:	e007      	b.n	20001098 <kbdGetCol+0x48>
 if ( c & 0x1 ) return 1; 
20001088:	1dfb      	adds	r3, r7, #7
2000108a:	781b      	ldrb	r3, [r3, #0]
2000108c:	2201      	movs	r2, #1
2000108e:	4013      	ands	r3, r2
20001090:	d001      	beq.n	20001096 <kbdGetCol+0x46>
20001092:	2301      	movs	r3, #1
20001094:	e000      	b.n	20001098 <kbdGetCol+0x48>
 return 0; 
20001096:	2300      	movs	r3, #0
}
20001098:	0018      	movs	r0, r3
2000109a:	46bd      	mov	sp, r7
2000109c:	b002      	add	sp, #8
2000109e:	bd80      	pop	{r7, pc}
200010a0:	40020c00 	andmi	r0, r2, r0, lsl #24

200010a4 <__divsi3>:
200010a4:	4603      	mov	r3, r0
200010a6:	430b      	orrs	r3, r1
200010a8:	d47f      	bmi.n	200011aa <__divsi3+0x106>
200010aa:	2200      	movs	r2, #0
200010ac:	0843      	lsrs	r3, r0, #1
200010ae:	428b      	cmp	r3, r1
200010b0:	d374      	bcc.n	2000119c <__divsi3+0xf8>
200010b2:	0903      	lsrs	r3, r0, #4
200010b4:	428b      	cmp	r3, r1
200010b6:	d35f      	bcc.n	20001178 <__divsi3+0xd4>
200010b8:	0a03      	lsrs	r3, r0, #8
200010ba:	428b      	cmp	r3, r1
200010bc:	d344      	bcc.n	20001148 <__divsi3+0xa4>
200010be:	0b03      	lsrs	r3, r0, #12
200010c0:	428b      	cmp	r3, r1
200010c2:	d328      	bcc.n	20001116 <__divsi3+0x72>
200010c4:	0c03      	lsrs	r3, r0, #16
200010c6:	428b      	cmp	r3, r1
200010c8:	d30d      	bcc.n	200010e6 <__divsi3+0x42>
200010ca:	22ff      	movs	r2, #255	; 0xff
200010cc:	0209      	lsls	r1, r1, #8
200010ce:	ba12      	rev	r2, r2
200010d0:	0c03      	lsrs	r3, r0, #16
200010d2:	428b      	cmp	r3, r1
200010d4:	d302      	bcc.n	200010dc <__divsi3+0x38>
200010d6:	1212      	asrs	r2, r2, #8
200010d8:	0209      	lsls	r1, r1, #8
200010da:	d065      	beq.n	200011a8 <__divsi3+0x104>
200010dc:	0b03      	lsrs	r3, r0, #12
200010de:	428b      	cmp	r3, r1
200010e0:	d319      	bcc.n	20001116 <__divsi3+0x72>
200010e2:	e000      	b.n	200010e6 <__divsi3+0x42>
200010e4:	0a09      	lsrs	r1, r1, #8
200010e6:	0bc3      	lsrs	r3, r0, #15
200010e8:	428b      	cmp	r3, r1
200010ea:	d301      	bcc.n	200010f0 <__divsi3+0x4c>
200010ec:	03cb      	lsls	r3, r1, #15
200010ee:	1ac0      	subs	r0, r0, r3
200010f0:	4152      	adcs	r2, r2
200010f2:	0b83      	lsrs	r3, r0, #14
200010f4:	428b      	cmp	r3, r1
200010f6:	d301      	bcc.n	200010fc <__divsi3+0x58>
200010f8:	038b      	lsls	r3, r1, #14
200010fa:	1ac0      	subs	r0, r0, r3
200010fc:	4152      	adcs	r2, r2
200010fe:	0b43      	lsrs	r3, r0, #13
20001100:	428b      	cmp	r3, r1
20001102:	d301      	bcc.n	20001108 <__divsi3+0x64>
20001104:	034b      	lsls	r3, r1, #13
20001106:	1ac0      	subs	r0, r0, r3
20001108:	4152      	adcs	r2, r2
2000110a:	0b03      	lsrs	r3, r0, #12
2000110c:	428b      	cmp	r3, r1
2000110e:	d301      	bcc.n	20001114 <__divsi3+0x70>
20001110:	030b      	lsls	r3, r1, #12
20001112:	1ac0      	subs	r0, r0, r3
20001114:	4152      	adcs	r2, r2
20001116:	0ac3      	lsrs	r3, r0, #11
20001118:	428b      	cmp	r3, r1
2000111a:	d301      	bcc.n	20001120 <__divsi3+0x7c>
2000111c:	02cb      	lsls	r3, r1, #11
2000111e:	1ac0      	subs	r0, r0, r3
20001120:	4152      	adcs	r2, r2
20001122:	0a83      	lsrs	r3, r0, #10
20001124:	428b      	cmp	r3, r1
20001126:	d301      	bcc.n	2000112c <__divsi3+0x88>
20001128:	028b      	lsls	r3, r1, #10
2000112a:	1ac0      	subs	r0, r0, r3
2000112c:	4152      	adcs	r2, r2
2000112e:	0a43      	lsrs	r3, r0, #9
20001130:	428b      	cmp	r3, r1
20001132:	d301      	bcc.n	20001138 <__divsi3+0x94>
20001134:	024b      	lsls	r3, r1, #9
20001136:	1ac0      	subs	r0, r0, r3
20001138:	4152      	adcs	r2, r2
2000113a:	0a03      	lsrs	r3, r0, #8
2000113c:	428b      	cmp	r3, r1
2000113e:	d301      	bcc.n	20001144 <__divsi3+0xa0>
20001140:	020b      	lsls	r3, r1, #8
20001142:	1ac0      	subs	r0, r0, r3
20001144:	4152      	adcs	r2, r2
20001146:	d2cd      	bcs.n	200010e4 <__divsi3+0x40>
20001148:	09c3      	lsrs	r3, r0, #7
2000114a:	428b      	cmp	r3, r1
2000114c:	d301      	bcc.n	20001152 <__divsi3+0xae>
2000114e:	01cb      	lsls	r3, r1, #7
20001150:	1ac0      	subs	r0, r0, r3
20001152:	4152      	adcs	r2, r2
20001154:	0983      	lsrs	r3, r0, #6
20001156:	428b      	cmp	r3, r1
20001158:	d301      	bcc.n	2000115e <__divsi3+0xba>
2000115a:	018b      	lsls	r3, r1, #6
2000115c:	1ac0      	subs	r0, r0, r3
2000115e:	4152      	adcs	r2, r2
20001160:	0943      	lsrs	r3, r0, #5
20001162:	428b      	cmp	r3, r1
20001164:	d301      	bcc.n	2000116a <__divsi3+0xc6>
20001166:	014b      	lsls	r3, r1, #5
20001168:	1ac0      	subs	r0, r0, r3
2000116a:	4152      	adcs	r2, r2
2000116c:	0903      	lsrs	r3, r0, #4
2000116e:	428b      	cmp	r3, r1
20001170:	d301      	bcc.n	20001176 <__divsi3+0xd2>
20001172:	010b      	lsls	r3, r1, #4
20001174:	1ac0      	subs	r0, r0, r3
20001176:	4152      	adcs	r2, r2
20001178:	08c3      	lsrs	r3, r0, #3
2000117a:	428b      	cmp	r3, r1
2000117c:	d301      	bcc.n	20001182 <__divsi3+0xde>
2000117e:	00cb      	lsls	r3, r1, #3
20001180:	1ac0      	subs	r0, r0, r3
20001182:	4152      	adcs	r2, r2
20001184:	0883      	lsrs	r3, r0, #2
20001186:	428b      	cmp	r3, r1
20001188:	d301      	bcc.n	2000118e <__divsi3+0xea>
2000118a:	008b      	lsls	r3, r1, #2
2000118c:	1ac0      	subs	r0, r0, r3
2000118e:	4152      	adcs	r2, r2
20001190:	0843      	lsrs	r3, r0, #1
20001192:	428b      	cmp	r3, r1
20001194:	d301      	bcc.n	2000119a <__divsi3+0xf6>
20001196:	004b      	lsls	r3, r1, #1
20001198:	1ac0      	subs	r0, r0, r3
2000119a:	4152      	adcs	r2, r2
2000119c:	1a41      	subs	r1, r0, r1
2000119e:	d200      	bcs.n	200011a2 <__divsi3+0xfe>
200011a0:	4601      	mov	r1, r0
200011a2:	4152      	adcs	r2, r2
200011a4:	4610      	mov	r0, r2
200011a6:	4770      	bx	lr
200011a8:	e05d      	b.n	20001266 <__divsi3+0x1c2>
200011aa:	0fca      	lsrs	r2, r1, #31
200011ac:	d000      	beq.n	200011b0 <__divsi3+0x10c>
200011ae:	4249      	negs	r1, r1
200011b0:	1003      	asrs	r3, r0, #32
200011b2:	d300      	bcc.n	200011b6 <__divsi3+0x112>
200011b4:	4240      	negs	r0, r0
200011b6:	4053      	eors	r3, r2
200011b8:	2200      	movs	r2, #0
200011ba:	469c      	mov	ip, r3
200011bc:	0903      	lsrs	r3, r0, #4
200011be:	428b      	cmp	r3, r1
200011c0:	d32d      	bcc.n	2000121e <__divsi3+0x17a>
200011c2:	0a03      	lsrs	r3, r0, #8
200011c4:	428b      	cmp	r3, r1
200011c6:	d312      	bcc.n	200011ee <__divsi3+0x14a>
200011c8:	22fc      	movs	r2, #252	; 0xfc
200011ca:	0189      	lsls	r1, r1, #6
200011cc:	ba12      	rev	r2, r2
200011ce:	0a03      	lsrs	r3, r0, #8
200011d0:	428b      	cmp	r3, r1
200011d2:	d30c      	bcc.n	200011ee <__divsi3+0x14a>
200011d4:	0189      	lsls	r1, r1, #6
200011d6:	1192      	asrs	r2, r2, #6
200011d8:	428b      	cmp	r3, r1
200011da:	d308      	bcc.n	200011ee <__divsi3+0x14a>
200011dc:	0189      	lsls	r1, r1, #6
200011de:	1192      	asrs	r2, r2, #6
200011e0:	428b      	cmp	r3, r1
200011e2:	d304      	bcc.n	200011ee <__divsi3+0x14a>
200011e4:	0189      	lsls	r1, r1, #6
200011e6:	d03a      	beq.n	2000125e <__divsi3+0x1ba>
200011e8:	1192      	asrs	r2, r2, #6
200011ea:	e000      	b.n	200011ee <__divsi3+0x14a>
200011ec:	0989      	lsrs	r1, r1, #6
200011ee:	09c3      	lsrs	r3, r0, #7
200011f0:	428b      	cmp	r3, r1
200011f2:	d301      	bcc.n	200011f8 <__divsi3+0x154>
200011f4:	01cb      	lsls	r3, r1, #7
200011f6:	1ac0      	subs	r0, r0, r3
200011f8:	4152      	adcs	r2, r2
200011fa:	0983      	lsrs	r3, r0, #6
200011fc:	428b      	cmp	r3, r1
200011fe:	d301      	bcc.n	20001204 <__divsi3+0x160>
20001200:	018b      	lsls	r3, r1, #6
20001202:	1ac0      	subs	r0, r0, r3
20001204:	4152      	adcs	r2, r2
20001206:	0943      	lsrs	r3, r0, #5
20001208:	428b      	cmp	r3, r1
2000120a:	d301      	bcc.n	20001210 <__divsi3+0x16c>
2000120c:	014b      	lsls	r3, r1, #5
2000120e:	1ac0      	subs	r0, r0, r3
20001210:	4152      	adcs	r2, r2
20001212:	0903      	lsrs	r3, r0, #4
20001214:	428b      	cmp	r3, r1
20001216:	d301      	bcc.n	2000121c <__divsi3+0x178>
20001218:	010b      	lsls	r3, r1, #4
2000121a:	1ac0      	subs	r0, r0, r3
2000121c:	4152      	adcs	r2, r2
2000121e:	08c3      	lsrs	r3, r0, #3
20001220:	428b      	cmp	r3, r1
20001222:	d301      	bcc.n	20001228 <__divsi3+0x184>
20001224:	00cb      	lsls	r3, r1, #3
20001226:	1ac0      	subs	r0, r0, r3
20001228:	4152      	adcs	r2, r2
2000122a:	0883      	lsrs	r3, r0, #2
2000122c:	428b      	cmp	r3, r1
2000122e:	d301      	bcc.n	20001234 <__divsi3+0x190>
20001230:	008b      	lsls	r3, r1, #2
20001232:	1ac0      	subs	r0, r0, r3
20001234:	4152      	adcs	r2, r2
20001236:	d2d9      	bcs.n	200011ec <__divsi3+0x148>
20001238:	0843      	lsrs	r3, r0, #1
2000123a:	428b      	cmp	r3, r1
2000123c:	d301      	bcc.n	20001242 <__divsi3+0x19e>
2000123e:	004b      	lsls	r3, r1, #1
20001240:	1ac0      	subs	r0, r0, r3
20001242:	4152      	adcs	r2, r2
20001244:	1a41      	subs	r1, r0, r1
20001246:	d200      	bcs.n	2000124a <__divsi3+0x1a6>
20001248:	4601      	mov	r1, r0
2000124a:	4663      	mov	r3, ip
2000124c:	4152      	adcs	r2, r2
2000124e:	105b      	asrs	r3, r3, #1
20001250:	4610      	mov	r0, r2
20001252:	d301      	bcc.n	20001258 <__divsi3+0x1b4>
20001254:	4240      	negs	r0, r0
20001256:	2b00      	cmp	r3, #0
20001258:	d500      	bpl.n	2000125c <__divsi3+0x1b8>
2000125a:	4249      	negs	r1, r1
2000125c:	4770      	bx	lr
2000125e:	4663      	mov	r3, ip
20001260:	105b      	asrs	r3, r3, #1
20001262:	d300      	bcc.n	20001266 <__divsi3+0x1c2>
20001264:	4240      	negs	r0, r0
20001266:	b501      	push	{r0, lr}
20001268:	2000      	movs	r0, #0
2000126a:	f000 f805 	bl	20001278 <__aeabi_idiv0>
2000126e:	bd02      	pop	{r1, pc}

20001270 <__aeabi_idivmod>:
20001270:	2900      	cmp	r1, #0
20001272:	d0f8      	beq.n	20001266 <__divsi3+0x1c2>
20001274:	e716      	b.n	200010a4 <__divsi3>
20001276:	4770      	bx	lr

20001278 <__aeabi_idiv0>:
20001278:	4770      	bx	lr
2000127a:	46c0      	nop			; (mov r8, r8)

2000127c <points>:
2000127c:	00000000 	andeq	r0, r0, r0

20001280 <snakeVec>:
	...

20002220 <snakeLength>:
20002220:	00000000 	andeq	r0, r0, r0

20002224 <pSnakeVec>:
	...

200023b4 <st>:
200023b4:	00000000 	andeq	r0, r0, r0

200023b8 <ball_geometry>:
200023b8:	0000000c 	andeq	r0, r0, ip
200023bc:	00000004 	andeq	r0, r0, r4
200023c0:	00000004 	andeq	r0, r0, r4
200023c4:	02000100 	andeq	r0, r0, #0, 2
200023c8:	01010001 	tsteq	r1, r1
200023cc:	03010201 	movweq	r0, #4609	; 0x1201
200023d0:	01020002 	tsteq	r2, r2
200023d4:	03020202 	movweq	r0, #8706	; 0x2202
200023d8:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20002428 <snake>:
20002428:	200023b8 			; <UNDEFINED> instruction: 0x200023b8
	...
20002434:	00000006 	andeq	r0, r0, r6
20002438:	00000002 	andeq	r0, r0, r2
2000243c:	20000b89 	andcs	r0, r0, r9, lsl #23
20002440:	20000c1b 	andcs	r0, r0, fp, lsl ip
20002444:	200000e5 	andcs	r0, r0, r5, ror #1
20002448:	200000ad 	andcs	r0, r0, sp, lsr #1
2000244c:	00000000 	andeq	r0, r0, r0

20002450 <apple>:
20002450:	200023b8 			; <UNDEFINED> instruction: 0x200023b8
20002454:	00000000 	andeq	r0, r0, r0
20002458:	00000008 	andeq	r0, r0, r8
2000245c:	0000000a 	andeq	r0, r0, sl
20002460:	00000002 	andeq	r0, r0, r2
20002464:	20000b89 	andcs	r0, r0, r9, lsl #23
20002468:	20000c1b 	andcs	r0, r0, fp, lsl ip
2000246c:	200000e5 	andcs	r0, r0, r5, ror #1
20002470:	200000ad 	andcs	r0, r0, sp, lsr #1
20002474:	00000000 	andeq	r0, r0, r0

20002478 <string>:
20002478:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
2000247c:	00007374 	andeq	r7, r0, r4, ror r3

20002480 <s>:
20002480:	20002428 	andcs	r2, r0, r8, lsr #8

20002484 <p2>:
20002484:	200023b8 			; <UNDEFINED> instruction: 0x200023b8
	...
20002490:	00000002 	andeq	r0, r0, r2
20002494:	00000002 	andeq	r0, r0, r2
20002498:	20000b89 	andcs	r0, r0, r9, lsl #23
2000249c:	20000c1b 	andcs	r0, r0, fp, lsl ip
200024a0:	200003d9 	ldrdcs	r0, [r0], -r9
200024a4:	200000ad 	andcs	r0, r0, sp, lsr #1
200024a8:	00000000 	andeq	r0, r0, r0

200024ac <pp2>:
200024ac:	20002484 	andcs	r2, r0, r4, lsl #9

200024b0 <a>:
200024b0:	20002450 	andcs	r2, r0, r0, asr r4
200024b4:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
200024b8:	003a7374 	eorseq	r7, sl, r4, ror r3
200024bc:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
200024c0:	65764f20 	ldrbvs	r4, [r6, #-3872]!	; 0xfffff0e0
200024c4:	00000072 	andeq	r0, r0, r2, ror r0
200024c8:	20000a50 	andcs	r0, r0, r0, asr sl
200024cc:	20000a5a 	andcs	r0, r0, sl, asr sl
200024d0:	20000a64 	andcs	r0, r0, r4, ror #20
200024d4:	20000a6e 	andcs	r0, r0, lr, ror #20
200024d8:	20000a78 	andcs	r0, r0, r8, ror sl
200024dc:	20000a82 	andcs	r0, r0, r2, lsl #21
200024e0:	20000a8c 	andcs	r0, r0, ip, lsl #21
200024e4:	20000a96 	mulcs	r0, r6, sl
200024e8:	0a030201 	beq	200c2cf4 <a+0xc0844>
200024ec:	0b060504 	bleq	20183904 <a+0x181454>
200024f0:	0c090807 	stceq	8, cr0, [r9], {7}
200024f4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200024c4 <a+0x14>
200024f8:	20001036 	andcs	r1, r0, r6, lsr r0
200024fc:	20001016 	andcs	r1, r0, r6, lsl r0
20002500:	2000101e 	andcs	r1, r0, lr, lsl r0
20002504:	20001026 	andcs	r1, r0, r6, lsr #32
20002508:	2000102e 	andcs	r1, r0, lr, lsr #32

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000b5 	strheq	r0, [r0], -r5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000000c 	andeq	r0, r0, ip
      10:	0000a40c 	andeq	sl, r0, ip, lsl #8
      14:	0000db00 	andeq	sp, r0, r0, lsl #22
      18:	00001000 	andeq	r1, r0, r0
      1c:	00009a20 	andeq	r9, r0, r0, lsr #20
      20:	00000000 	andeq	r0, r0, r0
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000013d 	andeq	r0, r0, sp, lsr r1
      2c:	37070202 	strcc	r0, [r7, -r2, lsl #4]
      30:	02000001 	andeq	r0, r0, #1
      34:	01290801 			; <UNDEFINED> instruction: 0x01290801
      38:	11030000 	mrsne	r0, (UNDEF: 3)
      3c:	01000001 	tsteq	r0, r1
      40:	0000a029 	andeq	sl, r0, r9, lsr #32
      44:	00000a20 	andeq	r0, r0, r0, lsr #20
      48:	049c0100 	ldreq	r0, [ip], #256	; 0x100
      4c:	00000105 	andeq	r0, r0, r5, lsl #2
      50:	004c1d01 	subeq	r1, ip, r1, lsl #26
      54:	00542000 	subseq	r2, r4, r0
      58:	9c010000 	stcls	0, cr0, [r1], {-0}
      5c:	0000006f 	andeq	r0, r0, pc, rrx
      60:	0000d605 	andeq	sp, r0, r5, lsl #12
      64:	25230100 	strcs	r0, [r3, #-256]!	; 0xffffff00
      68:	02000000 	andeq	r0, r0, #0
      6c:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
      70:	0000011d 	andeq	r0, r0, sp, lsl r1
      74:	002e0f01 	eoreq	r0, lr, r1, lsl #30
      78:	001e2000 	andseq	r2, lr, r0
      7c:	9c010000 	stcls	0, cr0, [r1], {-0}
      80:	00000092 	muleq	r0, r2, r0
      84:	00737506 	rsbseq	r7, r3, r6, lsl #10
      88:	00920f01 	addseq	r0, r2, r1, lsl #30
      8c:	91020000 	mrsls	r0, (UNDEF: 2)
      90:	04070074 	streq	r0, [r7], #-116	; 0xffffff8c
      94:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      98:	00000800 	andeq	r0, r0, r0, lsl #16
      9c:	04010000 	streq	r0, [r1], #-0
      a0:	20000010 	andcs	r0, r0, r0, lsl r0
      a4:	0000001e 	andeq	r0, r0, lr, lsl r0
      a8:	6d069c01 	stcvs	12, cr9, [r6, #-4]
      ac:	04010073 	streq	r0, [r1], #-115	; 0xffffff8d
      b0:	00000092 	muleq	r0, r2, r0
      b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
      b8:	00065900 	andeq	r5, r6, r0, lsl #18
      bc:	92000400 	andls	r0, r0, #0, 8
      c0:	04000000 	streq	r0, [r0], #-0
      c4:	00000c01 	andeq	r0, r0, r1, lsl #24
      c8:	01660c00 	cmneq	r6, r0, lsl #24
      cc:	00db0000 	sbcseq	r0, fp, r0
	...
      d8:	007e0000 	rsbseq	r0, lr, r0
      dc:	e5020000 	str	r0, [r2, #-0]
      e0:	02000002 	andeq	r0, r0, #2
      e4:	00003007 	andeq	r3, r0, r7
      e8:	07040300 	streq	r0, [r4, -r0, lsl #6]
      ec:	0000013d 	andeq	r0, r0, sp, lsr r1
      f0:	0002dc02 	andeq	sp, r2, r2, lsl #24
      f4:	42080200 	andmi	r0, r8, #0, 4
      f8:	03000000 	movweq	r0, #0
      fc:	01370702 	teqeq	r7, r2, lsl #14
     100:	87020000 	strhi	r0, [r2, -r0]
     104:	02000002 	andeq	r0, r0, #2
     108:	00005409 	andeq	r5, r0, r9, lsl #8
     10c:	08010300 	stmdaeq	r1, {r8, r9}
     110:	00000129 	andeq	r0, r0, r9, lsr #2
     114:	0b021804 	bleq	8612c <startup-0x1ff79ed4>
     118:	000000e8 	andeq	r0, r0, r8, ror #1
     11c:	0002f305 	andeq	pc, r2, r5, lsl #6
     120:	250c0200 	strcs	r0, [ip, #-512]	; 0xfffffe00
     124:	00000000 	andeq	r0, r0, r0
     128:	0001b505 	andeq	fp, r1, r5, lsl #10
     12c:	370d0200 	strcc	r0, [sp, -r0, lsl #4]
     130:	04000000 	streq	r0, [r0], #-0
     134:	00025705 	andeq	r5, r2, r5, lsl #14
     138:	370e0200 	strcc	r0, [lr, -r0, lsl #4]
     13c:	06000000 	streq	r0, [r0], -r0
     140:	0002c705 	andeq	ip, r2, r5, lsl #14
     144:	250f0200 	strcs	r0, [pc, #-512]	; ffffff4c <a+0xdfffda9c>
     148:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     14c:	00026c05 	andeq	r6, r2, r5, lsl #24
     150:	25100200 	ldrcs	r0, [r0, #-512]	; 0xfffffe00
     154:	0c000000 	stceq	0, cr0, [r0], {-0}
     158:	0002cf05 	andeq	ip, r2, r5, lsl #30
     15c:	49110200 	ldmdbmi	r1, {r9}
     160:	10000000 	andne	r0, r0, r0
     164:	0002ae05 	andeq	sl, r2, r5, lsl #28
     168:	49120200 	ldmdbmi	r2, {r9}
     16c:	11000000 	mrsne	r0, (UNDEF: 0)
     170:	00024205 	andeq	r4, r2, r5, lsl #4
     174:	37130200 	ldrcc	r0, [r3, -r0, lsl #4]
     178:	12000000 	andne	r0, r0, #0
     17c:	00029805 	andeq	r9, r2, r5, lsl #16
     180:	49140200 	ldmdbmi	r4, {r9}
     184:	14000000 	strne	r0, [r0], #-0
     188:	0001d405 	andeq	sp, r1, r5, lsl #8
     18c:	49150200 	ldmdbmi	r5, {r9}
     190:	15000000 	strne	r0, [r0, #-0]
     194:	0001e905 	andeq	lr, r1, r5, lsl #18
     198:	37160200 	ldrcc	r0, [r6, -r0, lsl #4]
     19c:	16000000 	strne	r0, [r0], -r0
     1a0:	022a0200 	eoreq	r0, sl, #0, 4
     1a4:	17020000 	strne	r0, [r2, -r0]
     1a8:	0000005b 	andeq	r0, r0, fp, asr r0
     1ac:	0001dc06 	andeq	sp, r1, r6, lsl #24
     1b0:	06030200 	streq	r0, [r3], -r0, lsl #4
     1b4:	00000114 	andeq	r0, r0, r4, lsl r1
     1b8:	03007807 	movweq	r7, #2055	; 0x807
     1bc:	00005408 	andeq	r5, r0, r8, lsl #8
     1c0:	79070000 	stmdbvc	r7, {}	; <UNPREDICTABLE>
     1c4:	54090300 	strpl	r0, [r9], #-768	; 0xfffffd00
     1c8:	01000000 	mrseq	r0, (UNDEF: 0)
     1cc:	01e30200 	mvneq	r0, r0, lsl #4
     1d0:	0a030000 	beq	c01d8 <startup-0x1ff3fe28>
     1d4:	000000f3 	strdeq	r0, [r0], -r3
     1d8:	00027d06 	andeq	r7, r2, r6, lsl #26
     1dc:	0c037000 	stceq	0, cr7, [r3], {-0}
     1e0:	0000015b 	andeq	r0, r0, fp, asr r1
     1e4:	0002f905 	andeq	pc, r2, r5, lsl #18
     1e8:	5b0e0300 	blpl	380df0 <startup-0x1fc7f210>
     1ec:	00000001 	andeq	r0, r0, r1
     1f0:	00027705 	andeq	r7, r2, r5, lsl #14
     1f4:	5b0f0300 	blpl	3c0dfc <startup-0x1fc3f204>
     1f8:	04000001 	streq	r0, [r0], #-1
     1fc:	00029f05 	andeq	r9, r2, r5, lsl #30
     200:	5b100300 	blpl	400e08 <startup-0x1fbff1f8>
     204:	08000001 	stmdaeq	r0, {r0}
     208:	00787007 	rsbseq	r7, r8, r7
     20c:	01621103 	cmneq	r2, r3, lsl #2
     210:	000c0000 	andeq	r0, ip, r0
     214:	69050408 	stmdbvs	r5, {r3, sl}
     218:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     21c:	00000114 	andeq	r0, r0, r4, lsl r1
     220:	00000172 	andeq	r0, r0, r2, ror r1
     224:	0000300a 	andeq	r3, r0, sl
     228:	02003100 	andeq	r3, r0, #0, 2
     22c:	0000014b 	andeq	r0, r0, fp, asr #2
     230:	011f1203 	tsteq	pc, r3, lsl #4
     234:	4a020000 	bmi	8023c <startup-0x1ff7fdc4>
     238:	03000001 	movweq	r0, #1
     23c:	00018812 	andeq	r8, r1, r2, lsl r8
     240:	1f040b00 	svcne	0x00040b00
     244:	06000001 	streq	r0, [r0], -r1
     248:	000002ee 	andeq	r0, r0, lr, ror #5
     24c:	13140328 	tstne	r4, #40, 6	; 0xa0000000
     250:	07000002 	streq	r0, [r0, -r2]
     254:	006f6567 	rsbeq	r6, pc, r7, ror #10
     258:	017d1503 	cmneq	sp, r3, lsl #10
     25c:	05000000 	streq	r0, [r0, #-0]
     260:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     264:	015b1603 	cmpeq	fp, r3, lsl #12
     268:	05040000 	streq	r0, [r4, #-0]
     26c:	00000262 	andeq	r0, r0, r2, ror #4
     270:	015b1603 	cmpeq	fp, r3, lsl #12
     274:	05080000 	streq	r0, [r8, #-0]
     278:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     27c:	015b1703 	cmpeq	fp, r3, lsl #14
     280:	050c0000 	streq	r0, [ip, #-0]
     284:	00000204 	andeq	r0, r0, r4, lsl #4
     288:	015b1703 	cmpeq	fp, r3, lsl #14
     28c:	05100000 	ldreq	r0, [r0, #-0]
     290:	0000019a 	muleq	r0, sl, r1
     294:	02241803 	eoreq	r1, r4, #196608	; 0x30000
     298:	05140000 	ldreq	r0, [r4, #-0]
     29c:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     2a0:	02241903 	eoreq	r1, r4, #49152	; 0xc000
     2a4:	05180000 	ldreq	r0, [r8, #-0]
     2a8:	000002d7 	ldrdeq	r0, [r0], -r7
     2ac:	02241a03 	eoreq	r1, r4, #12288	; 0x3000
     2b0:	051c0000 	ldreq	r0, [ip, #-0]
     2b4:	000001f5 	strdeq	r0, [r0], -r5
     2b8:	023f1b03 	eorseq	r1, pc, #3072	; 0xc00
     2bc:	05200000 	streq	r0, [r0, #-0]!
     2c0:	000002d6 	ldrdeq	r0, [r0], -r6
     2c4:	02551c03 	subseq	r1, r5, #768	; 0x300
     2c8:	00240000 	eoreq	r0, r4, r0
     2cc:	00021e0c 	andeq	r1, r2, ip, lsl #28
     2d0:	021e0d00 	andseq	r0, lr, #0, 26
     2d4:	0b000000 	bleq	2dc <startup-0x1ffffd24>
     2d8:	00018e04 	andeq	r8, r1, r4, lsl #28
     2dc:	13040b00 	movwne	r0, #19200	; 0x4b00
     2e0:	0c000002 	stceq	0, cr0, [r0], {2}
     2e4:	0000023f 	andeq	r0, r0, pc, lsr r2
     2e8:	00021e0d 	andeq	r1, r2, sp, lsl #28
     2ec:	015b0d00 	cmpeq	fp, r0, lsl #26
     2f0:	5b0d0000 	blpl	3402f8 <startup-0x1fcbfd08>
     2f4:	00000001 	andeq	r0, r0, r1
     2f8:	022a040b 	eoreq	r0, sl, #184549376	; 0xb000000
     2fc:	550c0000 	strpl	r0, [ip, #-0]
     300:	0d000002 	stceq	0, cr0, [r0, #-8]
     304:	0000021e 	andeq	r0, r0, lr, lsl r2
     308:	00015b0d 	andeq	r5, r1, sp, lsl #22
     30c:	040b0000 	streq	r0, [fp], #-0
     310:	00000245 	andeq	r0, r0, r5, asr #4
     314:	00031c02 	andeq	r1, r3, r2, lsl #24
     318:	8e1d0300 	cdphi	3, 1, cr0, cr13, cr0, {0}
     31c:	02000001 	andeq	r0, r0, #1
     320:	0000031b 	andeq	r0, r0, fp, lsl r3
     324:	021e1d03 	andseq	r1, lr, #3, 26	; 0xc0
     328:	2f0e0000 	svccs	0x000e0000
     32c:	01000002 	tsteq	r0, r2
     330:	00015b18 	andeq	r5, r1, r8, lsl fp
     334:	20030500 	andcs	r0, r3, r0, lsl #10
     338:	09200022 	stmdbeq	r0!, {r1, r5}
     33c:	0000025b 	andeq	r0, r0, fp, asr r2
     340:	00000292 	muleq	r0, r2, r2
     344:	0000300a 	andeq	r3, r0, sl
     348:	0e006300 	cdpeq	3, 0, cr6, cr0, cr0, {0}
     34c:	000002a5 	andeq	r0, r0, r5, lsr #5
     350:	02821901 	addeq	r1, r2, #16384	; 0x4000
     354:	03050000 	movweq	r0, #20480	; 0x5000
     358:	20001280 	andcs	r1, r0, r0, lsl #5
     35c:	00026609 	andeq	r6, r2, r9, lsl #12
     360:	0002b300 	andeq	fp, r2, r0, lsl #6
     364:	00300a00 	eorseq	r0, r0, r0, lsl #20
     368:	00630000 	rsbeq	r0, r3, r0
     36c:	00015c0e 	andeq	r5, r1, lr, lsl #24
     370:	a31a0100 	tstge	sl, #0, 2
     374:	05000002 	streq	r0, [r0, #-2]
     378:	00222403 	eoreq	r2, r2, r3, lsl #8
     37c:	02090e20 	andeq	r0, r9, #32, 28	; 0x200
     380:	3c010000 	stccc	0, cr0, [r1], {-0}
     384:	00000172 	andeq	r0, r0, r2, ror r1
     388:	23b80305 			; <UNDEFINED> instruction: 0x23b80305
     38c:	ff0f2000 			; <UNDEFINED> instruction: 0xff0f2000
     390:	01000000 	mrseq	r0, (UNDEF: 0)
     394:	00025b41 	andeq	r5, r2, r1, asr #22
     398:	28030500 	stmdacs	r3, {r8, sl}
     39c:	0f200024 	svceq	0x00200024
     3a0:	00000303 	andeq	r0, r0, r3, lsl #6
     3a4:	025b4a01 	subseq	r4, fp, #4096	; 0x1000
     3a8:	03050000 	movweq	r0, #20480	; 0x5000
     3ac:	20002450 	andcs	r2, r0, r0, asr r4
     3b0:	0002fc0e 	andeq	pc, r2, lr, lsl #24
     3b4:	5b630100 	blpl	18c07bc <startup-0x1e73f844>
     3b8:	05000001 	streq	r0, [r0, #-1]
     3bc:	00127c03 	andseq	r7, r2, r3, lsl #24
     3c0:	74731020 	ldrbtvc	r1, [r3], #-32	; 0xffffffe0
     3c4:	18640100 	stmdane	r4!, {r8}^
     3c8:	05000003 	streq	r0, [r0, #-3]
     3cc:	0023b403 	eoreq	fp, r3, r3, lsl #8
     3d0:	1e040b20 	vmlane.f64	d0, d4, d16
     3d4:	03000003 	movweq	r0, #3
     3d8:	01320801 	teqeq	r2, r1, lsl #16
     3dc:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
     3e0:	35000003 	strcc	r0, [r0, #-3]
     3e4:	0a000003 	beq	3f8 <startup-0x1ffffc08>
     3e8:	00000030 	andeq	r0, r0, r0, lsr r0
     3ec:	c80e0006 	stmdagt	lr, {r1, r2}
     3f0:	01000001 	tsteq	r0, r1
     3f4:	00032565 	andeq	r2, r3, r5, ror #10
     3f8:	78030500 	stmdavc	r3, {r8, sl}
     3fc:	10200024 	eorne	r0, r0, r4, lsr #32
     400:	93010073 	movwls	r0, #4211	; 0x1073
     404:	00000266 	andeq	r0, r0, r6, ror #4
     408:	24800305 	strcs	r0, [r0], #773	; 0x305
     40c:	70102000 	andsvc	r2, r0, r0
     410:	ae010032 	mcrge	0, 0, r0, cr1, cr2, {1}
     414:	0000025b 	andeq	r0, r0, fp, asr r2
     418:	24840305 	strcs	r0, [r4], #773	; 0x305
     41c:	70102000 	andsvc	r2, r0, r0
     420:	01003270 	tsteq	r0, r0, ror r2
     424:	000266b7 			; <UNDEFINED> instruction: 0x000266b7
     428:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     42c:	10200024 	eorne	r0, r0, r4, lsr #32
     430:	b8010061 	stmdalt	r1, {r0, r5, r6}
     434:	00000266 	andeq	r0, r0, r6, ror #4
     438:	24b00305 	ldrtcs	r0, [r0], #773	; 0x305
     43c:	72112000 	andsvc	r2, r1, #0
     440:	01000002 	tsteq	r0, r2
     444:	000474c8 	andeq	r7, r4, r8, asr #9
     448:	0001bc20 	andeq	fp, r1, r0, lsr #24
     44c:	719c0100 	orrsvc	r0, ip, r0, lsl #2
     450:	12000004 	andne	r0, r0, #4
     454:	ca010063 	bgt	405e8 <startup-0x1ffbfa18>
     458:	0000031e 	andeq	r0, r0, lr, lsl r3
     45c:	13639102 	cmnne	r3, #-2147483648	; 0x80000000
     460:	200004a4 	andcs	r0, r0, r4, lsr #9
     464:	00000176 	andeq	r0, r0, r6, ror r1
     468:	00000014 	andeq	r0, r0, r4, lsl r0
     46c:	01000100 	mrseq	r0, (UNDEF: 16)
     470:	0000015b 	andeq	r0, r0, fp, asr r1
     474:	000003c1 	andeq	r0, r0, r1, asr #7
     478:	67140015 			; <UNDEFINED> instruction: 0x67140015
     47c:	01000002 	tsteq	r0, r2
     480:	015b0101 	cmpeq	fp, r1, lsl #2
     484:	03d30000 	bicseq	r0, r3, #0
     488:	00150000 	andseq	r0, r5, r0
     48c:	0004bc16 	andeq	fp, r4, r6, lsl ip
     490:	00002e20 	andeq	r2, r0, r0, lsr #28
     494:	00040400 	andeq	r0, r4, r0, lsl #8
     498:	00691200 	rsbeq	r1, r9, r0, lsl #4
     49c:	015bde01 	cmpeq	fp, r1, lsl #28
     4a0:	91020000 	mrsls	r0, (UNDEF: 2)
     4a4:	04c6136c 	strbeq	r1, [r6], #876	; 0x36c
     4a8:	00182000 	andseq	r2, r8, r0
     4ac:	70120000 	andsvc	r0, r2, r0
     4b0:	e0010078 	and	r0, r1, r8, ror r0
     4b4:	00000266 	andeq	r0, r0, r6, ror #4
     4b8:	00509102 	subseq	r9, r0, r2, lsl #2
     4bc:	04ea1600 	strbteq	r1, [sl], #1536	; 0x600
     4c0:	00462000 	subeq	r2, r6, r0
     4c4:	04350000 	ldrteq	r0, [r5], #-0
     4c8:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
     4cc:	5be40100 	blpl	ff9008d4 <a+0xdf8fe424>
     4d0:	02000001 	andeq	r0, r0, #1
     4d4:	f4136891 			; <UNDEFINED> instruction: 0xf4136891
     4d8:	30200004 	eorcc	r0, r0, r4
     4dc:	12000000 	andne	r0, r0, #0
     4e0:	01007870 	tsteq	r0, r0, ror r8
     4e4:	000266e6 	andeq	r6, r2, r6, ror #13
     4e8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     4ec:	48130000 	ldmdami	r3, {}	; <UNPREDICTABLE>
     4f0:	52200005 	eorpl	r0, r0, #5
     4f4:	12000000 	andne	r0, r0, #0
     4f8:	f0010069 			; <UNDEFINED> instruction: 0xf0010069
     4fc:	0000015b 	andeq	r0, r0, fp, asr r1
     500:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
     504:	20000552 	andcs	r0, r0, r2, asr r5
     508:	0000003c 	andeq	r0, r0, ip, lsr r0
     50c:	00787812 	rsbseq	r7, r8, r2, lsl r8
     510:	0266f201 	rsbeq	pc, r6, #268435456	; 0x10000000
     514:	91020000 	mrsls	r0, (UNDEF: 2)
     518:	7373125c 	cmnvc	r3, #92, 4	; 0xc0000005
     51c:	66f30100 	ldrbtvs	r0, [r3], r0, lsl #2
     520:	02000002 	andeq	r0, r0, #2
     524:	00005891 	muleq	r0, r1, r8
     528:	1d170000 	ldcne	0, cr0, [r7, #-0]
     52c:	01000002 	tsteq	r0, r2
     530:	000410bc 	strheq	r1, [r4], -ip
     534:	00006420 	andeq	r6, r0, r0, lsr #8
     538:	a39c0100 	orrsge	r0, ip, #0, 2
     53c:	18000004 	stmdane	r0, {r2}
     540:	0077656e 	rsbseq	r6, r7, lr, ror #10
     544:	0266bc01 	rsbeq	fp, r6, #256	; 0x100
     548:	91020000 	mrsls	r0, (UNDEF: 2)
     54c:	01cf1974 	biceq	r1, pc, r4, ror r9	; <UNPREDICTABLE>
     550:	bc010000 	stclt	0, cr0, [r1], {-0}
     554:	00000266 	andeq	r0, r0, r6, ror #4
     558:	00709102 	rsbseq	r9, r0, r2, lsl #2
     55c:	00031017 	andeq	r1, r3, r7, lsl r0
     560:	d8a80100 	stmiale	r8!, {r8}
     564:	38200003 	stmdacc	r0!, {r0, r1}
     568:	01000000 	mrseq	r0, (UNDEF: 0)
     56c:	0004d19c 	muleq	r4, ip, r1
     570:	006f1800 	rsbeq	r1, pc, r0, lsl #16
     574:	0266a801 	rsbeq	sl, r6, #65536	; 0x10000
     578:	91020000 	mrsls	r0, (UNDEF: 2)
     57c:	00691874 	rsbeq	r1, r9, r4, ror r8
     580:	015ba801 	cmpeq	fp, r1, lsl #16
     584:	91020000 	mrsls	r0, (UNDEF: 2)
     588:	8f110070 	svchi	0x00110070
     58c:	01000002 	tsteq	r0, r2
     590:	00037495 	muleq	r3, r5, r4
     594:	00006420 	andeq	r6, r0, r0, lsr #8
     598:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
     59c:	0f000004 	svceq	0x00000004
     5a0:	000001c8 	andeq	r0, r0, r8, asr #3
     5a4:	04f59701 	ldrbteq	r9, [r5], #1793	; 0x701
     5a8:	91020000 	mrsls	r0, (UNDEF: 2)
     5ac:	1e09006c 	cdpne	0, 0, cr0, cr9, cr12, {3}
     5b0:	05000003 	streq	r0, [r0, #-3]
     5b4:	0a000005 	beq	5d0 <startup-0x1ffffa30>
     5b8:	00000030 	andeq	r0, r0, r0, lsr r0
     5bc:	b6110009 	ldrlt	r0, [r1], -r9
     5c0:	01000002 	tsteq	r0, r2
     5c4:	0001a467 	andeq	sl, r1, r7, ror #8
     5c8:	0001d020 	andeq	sp, r1, r0, lsr #32
     5cc:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
     5d0:	19000005 	stmdbne	r0, {r0, r2}
     5d4:	0000015c 	andeq	r0, r0, ip, asr r1
     5d8:	05c46701 	strbeq	r6, [r4, #1793]	; 0x701
     5dc:	91020000 	mrsls	r0, (UNDEF: 2)
     5e0:	00611854 	rsbeq	r1, r1, r4, asr r8
     5e4:	02666701 	rsbeq	r6, r6, #262144	; 0x40000
     5e8:	91020000 	mrsls	r0, (UNDEF: 2)
     5ec:	00701250 	rsbseq	r1, r0, r0, asr r2
     5f0:	02666901 	rsbeq	r6, r6, #16384	; 0x4000
     5f4:	91020000 	mrsls	r0, (UNDEF: 2)
     5f8:	0220136c 	eoreq	r1, r0, #108, 6	; 0xb0000001
     5fc:	01322000 	teqeq	r2, r0
     600:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
     604:	66700100 	ldrbtvs	r0, [r0], -r0, lsl #2
     608:	02000002 	andeq	r0, r0, #2
     60c:	79126891 	ldmdbvc	r2, {r0, r4, r7, fp, sp, lr}
     610:	66710100 	ldrbtvs	r0, [r1], -r0, lsl #2
     614:	02000002 	andeq	r0, r0, #2
     618:	1d1a6491 	cfldrsne	mvf6, [sl, #-580]	; 0xfffffdbc
     61c:	01000002 	tsteq	r0, r2
     620:	00015b73 	andeq	r5, r1, r3, ror fp
     624:	00057200 	andeq	r7, r5, r0, lsl #4
     628:	0f001500 	svceq	0x00001500
     62c:	000001c8 	andeq	r0, r0, r8, asr #3
     630:	05ca7701 	strbeq	r7, [sl, #1793]	; 0x701
     634:	91020000 	mrsls	r0, (UNDEF: 2)
     638:	02e41658 	rsceq	r1, r4, #88, 12	; 0x5800000
     63c:	004a2000 	subeq	r2, sl, r0
     640:	05aa0000 	streq	r0, [sl, #0]!
     644:	170f0000 	strne	r0, [pc, -r0]
     648:	01000002 	tsteq	r0, r2
     64c:	00031e82 	andeq	r1, r3, r2, lsl #29
     650:	62910200 	addsvs	r0, r1, #0, 4
     654:	0002c00f 	andeq	ip, r2, pc
     658:	1e830100 	rmfnes	f0, f3, f0
     65c:	02000003 	andeq	r0, r0, #3
     660:	13006191 	movwne	r6, #401	; 0x191
     664:	20000330 	andcs	r0, r0, r0, lsr r3
     668:	00000018 	andeq	r0, r0, r8, lsl r0
     66c:	73747012 	cmnvc	r4, #18
     670:	1e870100 	rmfnes	f0, f7, f0
     674:	02000003 	andeq	r0, r0, #3
     678:	00006391 	muleq	r0, r1, r3
     67c:	66040b00 	strvs	r0, [r4], -r0, lsl #22
     680:	09000002 	stmdbeq	r0, {r1}
     684:	0000031e 	andeq	r0, r0, lr, lsl r3
     688:	000005da 	ldrdeq	r0, [r0], -sl
     68c:	0000300a 	andeq	r3, r0, sl
     690:	1b000700 	blne	2298 <startup-0x1fffdd68>
     694:	0000024e 	andeq	r0, r0, lr, asr #4
     698:	016c5601 	cmneq	ip, r1, lsl #12
     69c:	00382000 	eorseq	r2, r8, r0
     6a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6a4:	0001bc17 	andeq	fp, r1, r7, lsl ip
     6a8:	e4280100 	strt	r0, [r8], #-256	; 0xffffff00
     6ac:	88200000 	stmdahi	r0!, {}	; <UNPREDICTABLE>
     6b0:	01000000 	mrseq	r0, (UNDEF: 0)
     6b4:	00060d9c 	muleq	r6, ip, sp
     6b8:	006f1800 	rsbeq	r1, pc, r0, lsl #16
     6bc:	02662801 	rsbeq	r2, r6, #65536	; 0x10000
     6c0:	91020000 	mrsls	r0, (UNDEF: 2)
     6c4:	9f170074 	svcls	0x00170074
     6c8:	01000001 	tsteq	r0, r1
     6cc:	0000ac1e 	andeq	sl, r0, lr, lsl ip
     6d0:	00003820 	andeq	r3, r0, r0, lsr #16
     6d4:	4b9c0100 	blmi	fe700adc <a+0xde6fe62c>
     6d8:	18000006 	stmdane	r0, {r1, r2}
     6dc:	1e01006f 	cdpne	0, 0, cr0, cr1, cr15, {3}
     6e0:	00000266 	andeq	r0, r0, r6, ror #4
     6e4:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
     6e8:	00000309 	andeq	r0, r0, r9, lsl #6
     6ec:	015b1e01 	cmpeq	fp, r1, lsl #28
     6f0:	91020000 	mrsls	r0, (UNDEF: 2)
     6f4:	023b1970 	eorseq	r1, fp, #112, 18	; 0x1c0000
     6f8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     6fc:	0000015b 	andeq	r0, r0, fp, asr r1
     700:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     704:	0001541b 	andeq	r5, r1, fp, lsl r4
     708:	000e0100 	andeq	r0, lr, r0, lsl #2
     70c:	0c200000 	stceq	0, cr0, [r0], #-0
     710:	01000000 	mrseq	r0, (UNDEF: 0)
     714:	059e009c 	ldreq	r0, [lr, #156]	; 0x9c
     718:	00040000 	andeq	r0, r4, r0
     71c:	00000217 	andeq	r0, r0, r7, lsl r2
     720:	000c0104 	andeq	r0, ip, r4, lsl #2
     724:	540c0000 	strpl	r0, [ip], #-0
     728:	db000003 	blle	73c <startup-0x1ffff8c4>
     72c:	30000000 	andcc	r0, r0, r0
     730:	7c200006 	stcvc	0, cr0, [r0], #-24	; 0xffffffe8
     734:	b4000006 	strlt	r0, [r0], #-6
     738:	02000001 	andeq	r0, r0, #1
     73c:	000002e5 	andeq	r0, r0, r5, ror #5
     740:	00300702 	eorseq	r0, r0, r2, lsl #14
     744:	04030000 	streq	r0, [r3], #-0
     748:	00013d07 	andeq	r3, r1, r7, lsl #26
     74c:	02dc0200 	sbcseq	r0, ip, #0, 4
     750:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     754:	00000042 	andeq	r0, r0, r2, asr #32
     758:	37070203 	strcc	r0, [r7, -r3, lsl #4]
     75c:	02000001 	andeq	r0, r0, #1
     760:	00000287 	andeq	r0, r0, r7, lsl #5
     764:	00540902 	subseq	r0, r4, r2, lsl #18
     768:	01030000 	mrseq	r0, (UNDEF: 3)
     76c:	00012908 	andeq	r2, r1, r8, lsl #18
     770:	02180400 	andseq	r0, r8, #0, 8
     774:	0000e80b 	andeq	lr, r0, fp, lsl #16
     778:	02f30500 	rscseq	r0, r3, #0, 10
     77c:	0c020000 	stceq	0, cr0, [r2], {-0}
     780:	00000025 	andeq	r0, r0, r5, lsr #32
     784:	01b50500 			; <UNDEFINED> instruction: 0x01b50500
     788:	0d020000 	stceq	0, cr0, [r2, #-0]
     78c:	00000037 	andeq	r0, r0, r7, lsr r0
     790:	02570504 	subseq	r0, r7, #4, 10	; 0x1000000
     794:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     798:	00000037 	andeq	r0, r0, r7, lsr r0
     79c:	02c70506 	sbceq	r0, r7, #25165824	; 0x1800000
     7a0:	0f020000 	svceq	0x00020000
     7a4:	00000025 	andeq	r0, r0, r5, lsr #32
     7a8:	026c0508 	rsbeq	r0, ip, #8, 10	; 0x2000000
     7ac:	10020000 	andne	r0, r2, r0
     7b0:	00000025 	andeq	r0, r0, r5, lsr #32
     7b4:	02cf050c 	sbceq	r0, pc, #12, 10	; 0x3000000
     7b8:	11020000 	mrsne	r0, (UNDEF: 2)
     7bc:	00000049 	andeq	r0, r0, r9, asr #32
     7c0:	02ae0510 	adceq	r0, lr, #16, 10	; 0x4000000
     7c4:	12020000 	andne	r0, r2, #0
     7c8:	00000049 	andeq	r0, r0, r9, asr #32
     7cc:	02420511 	subeq	r0, r2, #71303168	; 0x4400000
     7d0:	13020000 	movwne	r0, #8192	; 0x2000
     7d4:	00000037 	andeq	r0, r0, r7, lsr r0
     7d8:	02980512 	addseq	r0, r8, #75497472	; 0x4800000
     7dc:	14020000 	strne	r0, [r2], #-0
     7e0:	00000049 	andeq	r0, r0, r9, asr #32
     7e4:	01d40514 	bicseq	r0, r4, r4, lsl r5
     7e8:	15020000 	strne	r0, [r2, #-0]
     7ec:	00000049 	andeq	r0, r0, r9, asr #32
     7f0:	01e90515 	mvneq	r0, r5, lsl r5
     7f4:	16020000 	strne	r0, [r2], -r0
     7f8:	00000037 	andeq	r0, r0, r7, lsr r0
     7fc:	2a020016 	bcs	8085c <startup-0x1ff7f7a4>
     800:	02000002 	andeq	r0, r0, #2
     804:	00005b17 	andeq	r5, r0, r7, lsl fp
     808:	01dc0600 	bicseq	r0, ip, r0, lsl #12
     80c:	03020000 	movweq	r0, #8192	; 0x2000
     810:	00011404 	andeq	r1, r1, r4, lsl #8
     814:	00780700 	rsbseq	r0, r8, r0, lsl #14
     818:	00540603 	subseq	r0, r4, r3, lsl #12
     81c:	07000000 	streq	r0, [r0, -r0]
     820:	07030079 	smlsdxeq	r3, r9, r0, r0
     824:	00000054 	andeq	r0, r0, r4, asr r0
     828:	e3020001 	movw	r0, #8193	; 0x2001
     82c:	03000001 	movweq	r0, #1
     830:	0000f308 	andeq	pc, r0, r8, lsl #6
     834:	027d0600 	rsbseq	r0, sp, #0, 12
     838:	03340000 	teqeq	r4, #0
     83c:	00015b0a 	andeq	r5, r1, sl, lsl #22
     840:	02f90500 	rscseq	r0, r9, #0, 10
     844:	0c030000 	stceq	0, cr0, [r3], {-0}
     848:	0000015b 	andeq	r0, r0, fp, asr r1
     84c:	02770500 	rsbseq	r0, r7, #0, 10
     850:	0d030000 	stceq	0, cr0, [r3, #-0]
     854:	0000015b 	andeq	r0, r0, fp, asr r1
     858:	029f0504 	addseq	r0, pc, #4, 10	; 0x1000000
     85c:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
     860:	0000015b 	andeq	r0, r0, fp, asr r1
     864:	78700708 	ldmdavc	r0!, {r3, r8, r9, sl}^
     868:	620f0300 	andvs	r0, pc, #0, 6
     86c:	0c000001 	stceq	0, cr0, [r0], {1}
     870:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     874:	00746e69 	rsbseq	r6, r4, r9, ror #28
     878:	00011409 	andeq	r1, r1, r9, lsl #8
     87c:	00017200 	andeq	r7, r1, r0, lsl #4
     880:	00300a00 	eorseq	r0, r0, r0, lsl #20
     884:	00130000 	andseq	r0, r3, r0
     888:	00014a02 	andeq	r4, r1, r2, lsl #20
     88c:	7d100300 	ldcvc	3, cr0, [r0, #-0]
     890:	0b000001 	bleq	89c <startup-0x1ffff764>
     894:	00011f04 	andeq	r1, r1, r4, lsl #30
     898:	02ee0600 	rsceq	r0, lr, #0, 12
     89c:	03240000 			; <UNDEFINED> instruction: 0x03240000
     8a0:	0001fc12 	andeq	pc, r1, r2, lsl ip	; <UNPREDICTABLE>
     8a4:	65670700 	strbvs	r0, [r7, #-1792]!	; 0xfffff900
     8a8:	1303006f 	movwne	r0, #12399	; 0x306f
     8ac:	00000172 	andeq	r0, r0, r2, ror r1
     8b0:	01b00500 	lslseq	r0, r0, #10
     8b4:	14030000 	strne	r0, [r3], #-0
     8b8:	0000015b 	andeq	r0, r0, fp, asr r1
     8bc:	02620504 	rsbeq	r0, r2, #4, 10	; 0x1000000
     8c0:	14030000 	strne	r0, [r3], #-0
     8c4:	0000015b 	andeq	r0, r0, fp, asr r1
     8c8:	01ff0508 	mvnseq	r0, r8, lsl #10
     8cc:	15030000 	strne	r0, [r3, #-0]
     8d0:	0000015b 	andeq	r0, r0, fp, asr r1
     8d4:	0204050c 	andeq	r0, r4, #12, 10	; 0x3000000
     8d8:	15030000 	strne	r0, [r3, #-0]
     8dc:	0000015b 	andeq	r0, r0, fp, asr r1
     8e0:	019a0510 	orrseq	r0, sl, r0, lsl r5
     8e4:	16030000 	strne	r0, [r3], -r0
     8e8:	0000020d 	andeq	r0, r0, sp, lsl #4
     8ec:	03b90514 			; <UNDEFINED> instruction: 0x03b90514
     8f0:	17030000 	strne	r0, [r3, -r0]
     8f4:	0000020d 	andeq	r0, r0, sp, lsl #4
     8f8:	02d70518 	sbcseq	r0, r7, #24, 10	; 0x6000000
     8fc:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     900:	0000020d 	andeq	r0, r0, sp, lsl #4
     904:	01f5051c 	mvnseq	r0, ip, lsl r5
     908:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
     90c:	00000228 	andeq	r0, r0, r8, lsr #4
     910:	070c0020 	streq	r0, [ip, -r0, lsr #32]
     914:	0d000002 	stceq	0, cr0, [r0, #-8]
     918:	00000207 	andeq	r0, r0, r7, lsl #4
     91c:	83040b00 	movwhi	r0, #19200	; 0x4b00
     920:	0b000001 	bleq	92c <startup-0x1ffff6d4>
     924:	0001fc04 	andeq	pc, r1, r4, lsl #24
     928:	02280c00 	eoreq	r0, r8, #0, 24
     92c:	070d0000 	streq	r0, [sp, -r0]
     930:	0d000002 	stceq	0, cr0, [r0, #-8]
     934:	0000015b 	andeq	r0, r0, fp, asr r1
     938:	00015b0d 	andeq	r5, r1, sp, lsl #22
     93c:	040b0000 	streq	r0, [fp], #-0
     940:	00000213 	andeq	r0, r0, r3, lsl r2
     944:	00031b02 	andeq	r1, r3, r2, lsl #22
     948:	071a0300 	ldreq	r0, [sl, -r0, lsl #6]
     94c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     950:	000003e7 	andeq	r0, r0, r7, ror #7
     954:	0c1ae501 	cfldr32eq	mvfx14, [sl], {1}
     958:	00922000 	addseq	r2, r2, r0
     95c:	9c010000 	stcls	0, cr0, [r1], {-0}
     960:	00000291 	muleq	r0, r1, r2
     964:	6a626f0f 	bvs	189c5a8 <startup-0x1e763a58>
     968:	2ee50100 	cdpcs	1, 14, cr0, cr5, cr0, {0}
     96c:	02000002 	andeq	r0, r0, #2
     970:	70106491 	mulsvc	r0, r1, r4
     974:	49e70100 	stmibmi	r7!, {r8}^
     978:	02000000 	andeq	r0, r0, #0
     97c:	6e106f91 	mrcvs	15, 0, r6, cr0, cr1, {4}
     980:	49e80100 	stmibmi	r8!, {r8}^
     984:	02000000 	andeq	r0, r0, #0
     988:	38116e91 	ldmdacc	r1, {r0, r4, r7, r9, sl, fp, sp, lr}
     98c:	01000004 	tsteq	r0, r4
     990:	000049e9 	andeq	r4, r0, r9, ror #19
     994:	6d910200 	lfmvs	f0, 4, [r1]
     998:	00032311 	andeq	r2, r3, r1, lsl r3
     99c:	49ea0100 	stmibmi	sl!, {r8}^
     9a0:	02000000 	andeq	r0, r0, #0
     9a4:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
     9a8:	00000343 	andeq	r0, r0, r3, asr #6
     9ac:	0b88d301 	bleq	fe2355b8 <a+0xde233108>
     9b0:	00922000 	addseq	r2, r2, r0
     9b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     9b8:	000002f5 	strdeq	r0, [r0], -r5
     9bc:	6a626f0f 	bvs	189c600 <startup-0x1e763a00>
     9c0:	2ed30100 	cdpcs	1, 13, cr0, cr3, cr0, {0}
     9c4:	02000002 	andeq	r0, r0, #2
     9c8:	70106491 	mulsvc	r0, r1, r4
     9cc:	49d50100 	ldmibmi	r5, {r8}^
     9d0:	02000000 	andeq	r0, r0, #0
     9d4:	6e106f91 	mrcvs	15, 0, r6, cr0, cr1, {4}
     9d8:	49d60100 	ldmibmi	r6, {r8}^
     9dc:	02000000 	andeq	r0, r0, #0
     9e0:	38116e91 	ldmdacc	r1, {r0, r4, r7, r9, sl, fp, sp, lr}
     9e4:	01000004 	tsteq	r0, r4
     9e8:	000049d7 	ldrdeq	r4, [r0], -r7
     9ec:	6d910200 	lfmvs	f0, 4, [r1]
     9f0:	00032311 	andeq	r2, r3, r1, lsl r3
     9f4:	49d80100 	ldmibmi	r8, {r8}^
     9f8:	02000000 	andeq	r0, r0, #0
     9fc:	73106c91 	tstvc	r0, #37120	; 0x9100
     a00:	14da0100 	ldrbne	r0, [sl], #256	; 0x100
     a04:	02000001 	andeq	r0, r0, #1
     a08:	0e006891 	mcreq	8, 0, r6, cr0, cr1, {4}
     a0c:	0000033d 	andeq	r0, r0, sp, lsr r3
     a10:	09f4a701 	ldmibeq	r4!, {r0, r8, r9, sl, sp, pc}^
     a14:	01942000 	orrseq	r2, r4, r0
     a18:	9c010000 	stcls	0, cr0, [r1], {-0}
     a1c:	00000367 	andeq	r0, r0, r7, ror #6
     a20:	0100780f 	tsteq	r0, pc, lsl #16
     a24:	00015ba7 	andeq	r5, r1, r7, lsr #23
     a28:	5c910200 	lfmpl	f0, 4, [r1], {0}
     a2c:	0100790f 	tsteq	r0, pc, lsl #18
     a30:	00015ba7 	andeq	r5, r1, r7, lsr #23
     a34:	58910200 	ldmpl	r1, {r9}
     a38:	7465730f 	strbtvc	r7, [r5], #-783	; 0xfffffcf1
     a3c:	5ba70100 	blpl	fe9c0e44 <a+0xde9be994>
     a40:	02000001 	andeq	r0, r0, #1
     a44:	f4115491 			; <UNDEFINED> instruction: 0xf4115491
     a48:	01000003 	tsteq	r0, r3
     a4c:	000049a9 	andeq	r4, r0, r9, lsr #19
     a50:	6f910200 	svcvs	0x00910200
     a54:	01006310 	tsteq	r0, r0, lsl r3
     a58:	000049a9 	andeq	r4, r0, r9, lsr #19
     a5c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     a60:	00053211 	andeq	r3, r5, r1, lsl r2
     a64:	49a90100 	stmibmi	r9!, {r8}
     a68:	02000000 	andeq	r0, r0, #0
     a6c:	25116e91 	ldrcs	r6, [r1, #-3729]	; 0xfffff16f
     a70:	01000004 	tsteq	r0, r4
     a74:	00015baa 	andeq	r5, r1, sl, lsr #23
     a78:	68910200 	ldmvs	r1, {r9}
     a7c:	04560e00 	ldrbeq	r0, [r6], #-3584	; 0xfffff200
     a80:	9a010000 	bls	40a88 <startup-0x1ffbf578>
     a84:	2000099e 	mulcs	r0, lr, r9
     a88:	00000056 	andeq	r0, r0, r6, asr r0
     a8c:	03ad9c01 			; <UNDEFINED> instruction: 0x03ad9c01
     a90:	a4120000 	ldrge	r0, [r2], #-0
     a94:	48200009 	stmdami	r0!, {r0, r3}
     a98:	11000000 	mrsne	r0, (UNDEF: 0)
     a9c:	0000034f 	andeq	r0, r0, pc, asr #6
     aa0:	00309c01 	eorseq	r9, r0, r1, lsl #24
     aa4:	91020000 	mrsls	r0, (UNDEF: 2)
     aa8:	09c61274 	stmibeq	r6, {r2, r4, r5, r6, r9, ip}^
     aac:	001a2000 	andseq	r2, sl, r0
     ab0:	61100000 	tstvs	r0, r0
     ab4:	01006464 	tsteq	r0, r4, ror #8
     ab8:	000030a0 	andeq	r3, r0, r0, lsr #1
     abc:	70910200 	addsvc	r0, r1, r0, lsl #4
     ac0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     ac4:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
     ac8:	09428a01 	stmdbeq	r2, {r0, r9, fp, pc}^
     acc:	005c2000 	subseq	r2, ip, r0
     ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ad4:	000003e1 	andeq	r0, r0, r1, ror #7
     ad8:	00011d13 	andeq	r1, r1, r3, lsl sp
     adc:	5b8d0100 	blpl	fe340ee4 <a+0xde33ea34>
     ae0:	d3000001 	movwle	r0, #1
     ae4:	14000003 	strne	r0, [r0], #-3
     ae8:	00001500 	andeq	r1, r0, r0, lsl #10
     aec:	8f010000 	svchi	0x00010000
     af0:	0000015b 	andeq	r0, r0, fp, asr r1
     af4:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
     af8:	0000032b 	andeq	r0, r0, fp, lsr #6
     afc:	08e87601 	stmiaeq	r8!, {r0, r9, sl, ip, sp, lr}^
     b00:	005a2000 	subseq	r2, sl, r0
     b04:	9c010000 	stcls	0, cr0, [r1], {-0}
     b08:	00000405 	andeq	r0, r0, r5, lsl #8
     b0c:	00053216 	andeq	r3, r5, r6, lsl r2
     b10:	49760100 	ldmdbmi	r6!, {r8}^
     b14:	02000000 	andeq	r0, r0, #0
     b18:	17007791 			; <UNDEFINED> instruction: 0x17007791
     b1c:	000003a8 	andeq	r0, r0, r8, lsr #7
     b20:	08a06e01 	stmiaeq	r0!, {r0, r9, sl, fp, sp, lr}
     b24:	00482000 	subeq	r2, r8, r0
     b28:	9c010000 	stcls	0, cr0, [r1], {-0}
     b2c:	00000433 	andeq	r0, r0, r3, lsr r4
     b30:	0100780f 	tsteq	r0, pc, lsl #16
     b34:	0000546e 	andeq	r5, r0, lr, ror #8
     b38:	6f910200 	svcvs	0x00910200
     b3c:	01006310 	tsteq	r0, r0, lsl r3
     b40:	00005470 	andeq	r5, r0, r0, ror r4
     b44:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     b48:	03d21700 	bicseq	r1, r2, #0, 14
     b4c:	66010000 	strvs	r0, [r1], -r0
     b50:	2000085c 	andcs	r0, r0, ip, asr r8
     b54:	00000044 	andeq	r0, r0, r4, asr #32
     b58:	04619c01 	strbteq	r9, [r1], #-3073	; 0xfffff3ff
     b5c:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
     b60:	49660100 	stmdbmi	r6!, {r8}^
     b64:	02000000 	andeq	r0, r0, #0
     b68:	63106f91 	tstvs	r0, #580	; 0x244
     b6c:	54680100 	strbtpl	r0, [r8], #-256	; 0xffffff00
     b70:	02000000 	andeq	r0, r0, #0
     b74:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     b78:	00000388 	andeq	r0, r0, r8, lsl #7
     b7c:	00496001 	subeq	r6, r9, r1
     b80:	08320000 	ldmdaeq	r2!, {}	; <UNPREDICTABLE>
     b84:	002a2000 	eoreq	r2, sl, r0
     b88:	9c010000 	stcls	0, cr0, [r1], {-0}
     b8c:	00000489 	andeq	r0, r0, r9, lsl #9
     b90:	00053216 	andeq	r3, r5, r6, lsl r2
     b94:	49600100 	stmdbmi	r0!, {r8}^
     b98:	02000000 	andeq	r0, r0, #0
     b9c:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
     ba0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     ba4:	07ec5701 	strbeq	r5, [ip, r1, lsl #14]!
     ba8:	00462000 	subeq	r2, r6, r0
     bac:	9c010000 	stcls	0, cr0, [r1], {-0}
     bb0:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
     bb4:	00039516 	andeq	r9, r3, r6, lsl r5
     bb8:	49570100 	ldmdbmi	r7, {r8}^
     bbc:	02000000 	andeq	r0, r0, #0
     bc0:	32167791 	andscc	r7, r6, #38010880	; 0x2440000
     bc4:	01000005 	tsteq	r0, r5
     bc8:	00004957 	andeq	r4, r0, r7, asr r9
     bcc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     bd0:	04400e00 	strbeq	r0, [r0], #-3584	; 0xfffff200
     bd4:	4f010000 	svcmi	0x00010000
     bd8:	200007ac 	andcs	r0, r0, ip, lsr #15
     bdc:	00000040 	andeq	r0, r0, r0, asr #32
     be0:	04ed9c01 	strbteq	r9, [sp], #3073	; 0xc01
     be4:	4e160000 	cdpmi	0, 1, cr0, cr6, cr0, {0}
     be8:	01000004 	tsteq	r0, r4
     bec:	0000494f 	andeq	r4, r0, pc, asr #18
     bf0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     bf4:	00053216 	andeq	r3, r5, r6, lsl r2
     bf8:	494f0100 	stmdbmi	pc, {r8}^	; <UNPREDICTABLE>
     bfc:	02000000 	andeq	r0, r0, #0
     c00:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
     c04:	0000039a 	muleq	r0, sl, r3
     c08:	072c3701 	streq	r3, [ip, -r1, lsl #14]!
     c0c:	00802000 	addeq	r2, r0, r0
     c10:	9c010000 	stcls	0, cr0, [r1], {-0}
     c14:	00000535 	andeq	r0, r0, r5, lsr r5
     c18:	0003f916 	andeq	pc, r3, r6, lsl r9	; <UNPREDICTABLE>
     c1c:	49370100 	ldmdbmi	r7!, {r8}
     c20:	02000000 	andeq	r0, r0, #0
     c24:	32167791 	andscc	r7, r6, #38010880	; 0x2440000
     c28:	01000005 	tsteq	r0, r5
     c2c:	00004937 	andeq	r4, r0, r7, lsr r9
     c30:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     c34:	01006319 	tsteq	r0, r9, lsl r3
     c38:	00004939 	andeq	r4, r0, r9, lsr r9
     c3c:	01111500 	tsteq	r1, r0, lsl #10
     c40:	0c010000 	stceq	0, cr0, [r1], {-0}
     c44:	0000015b 	andeq	r0, r0, fp, asr r1
     c48:	1a000014 	bne	ca0 <startup-0x1ffff360>
     c4c:	0000042b 	andeq	r0, r0, fp, lsr #8
     c50:	00491d01 	subeq	r1, r9, r1, lsl #26
     c54:	069c0000 	ldreq	r0, [ip], r0
     c58:	00902000 	addseq	r2, r0, r0
     c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
     c60:	00000576 	andeq	r0, r0, r6, ror r5
     c64:	00053216 	andeq	r3, r5, r6, lsl r2
     c68:	491d0100 	ldmdbmi	sp, {r8}
     c6c:	02000000 	andeq	r0, r0, #0
     c70:	63106f91 	tstvs	r0, #580	; 0x244
     c74:	491f0100 	ldmdbmi	pc, {r8}	; <UNPREDICTABLE>
     c78:	02000000 	andeq	r0, r0, #0
     c7c:	11157791 			; <UNDEFINED> instruction: 0x11157791
     c80:	01000001 	tsteq	r0, r1
     c84:	00015b0c 	andeq	r5, r1, ip, lsl #22
     c88:	00001400 	andeq	r1, r0, r0, lsl #8
     c8c:	0004121b 	andeq	r1, r4, fp, lsl r2
     c90:	30050100 	andcc	r0, r5, r0, lsl #2
     c94:	6c200006 	stcvs	0, cr0, [r0], #-24	; 0xffffffe8
     c98:	01000000 	mrseq	r0, (UNDEF: 0)
     c9c:	0063109c 	mlseq	r3, ip, r0, r1
     ca0:	00490701 	subeq	r0, r9, r1, lsl #14
     ca4:	91020000 	mrsls	r0, (UNDEF: 2)
     ca8:	01111577 	tsteq	r1, r7, ror r5
     cac:	0c010000 	stceq	0, cr0, [r1], {-0}
     cb0:	0000015b 	andeq	r0, r0, fp, asr r1
     cb4:	00000014 	andeq	r0, r0, r4, lsl r0
     cb8:	000002a3 	andeq	r0, r0, r3, lsr #5
     cbc:	03ae0004 			; <UNDEFINED> instruction: 0x03ae0004
     cc0:	01040000 	mrseq	r0, (UNDEF: 4)
     cc4:	0000000c 	andeq	r0, r0, ip
     cc8:	0005610c 	andeq	r6, r5, ip, lsl #2
     ccc:	0000db00 	andeq	sp, r0, r0, lsl #22
     cd0:	000cac00 	andeq	sl, ip, r0, lsl #24
     cd4:	0002e820 	andeq	lr, r2, r0, lsr #16
     cd8:	00033e00 	andeq	r3, r3, r0, lsl #28
     cdc:	02e50200 	rsceq	r0, r5, #0, 4
     ce0:	07020000 	streq	r0, [r2, -r0]
     ce4:	00000030 	andeq	r0, r0, r0, lsr r0
     ce8:	3d070403 	cfstrscc	mvf0, [r7, #-12]
     cec:	02000001 	andeq	r0, r0, #1
     cf0:	000002dc 	ldrdeq	r0, [r0], -ip
     cf4:	00420802 	subeq	r0, r2, r2, lsl #16
     cf8:	02030000 	andeq	r0, r3, #0
     cfc:	00013707 	andeq	r3, r1, r7, lsl #14
     d00:	02870200 	addeq	r0, r7, #0, 4
     d04:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     d08:	00000054 	andeq	r0, r0, r4, asr r0
     d0c:	29080103 	stmdbcs	r8, {r0, r1, r8}
     d10:	04000001 	streq	r0, [r0], #-1
     d14:	e80b0218 	stmda	fp, {r3, r4, r9}
     d18:	05000000 	streq	r0, [r0, #-0]
     d1c:	000002f3 	strdeq	r0, [r0], -r3
     d20:	00250c02 	eoreq	r0, r5, r2, lsl #24
     d24:	05000000 	streq	r0, [r0, #-0]
     d28:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     d2c:	00370d02 	eorseq	r0, r7, r2, lsl #26
     d30:	05040000 	streq	r0, [r4, #-0]
     d34:	00000257 	andeq	r0, r0, r7, asr r2
     d38:	00370e02 	eorseq	r0, r7, r2, lsl #28
     d3c:	05060000 	streq	r0, [r6, #-0]
     d40:	000002c7 	andeq	r0, r0, r7, asr #5
     d44:	00250f02 	eoreq	r0, r5, r2, lsl #30
     d48:	05080000 	streq	r0, [r8, #-0]
     d4c:	0000026c 	andeq	r0, r0, ip, ror #4
     d50:	00251002 	eoreq	r1, r5, r2
     d54:	050c0000 	streq	r0, [ip, #-0]
     d58:	000002cf 	andeq	r0, r0, pc, asr #5
     d5c:	00491102 	subeq	r1, r9, r2, lsl #2
     d60:	05100000 	ldreq	r0, [r0, #-0]
     d64:	000002ae 	andeq	r0, r0, lr, lsr #5
     d68:	00491202 	subeq	r1, r9, r2, lsl #4
     d6c:	05110000 	ldreq	r0, [r1, #-0]
     d70:	00000242 	andeq	r0, r0, r2, asr #4
     d74:	00371302 	eorseq	r1, r7, r2, lsl #6
     d78:	05120000 	ldreq	r0, [r2, #-0]
     d7c:	00000298 	muleq	r0, r8, r2
     d80:	00491402 	subeq	r1, r9, r2, lsl #8
     d84:	05140000 	ldreq	r0, [r4, #-0]
     d88:	000001d4 	ldrdeq	r0, [r0], -r4
     d8c:	00491502 	subeq	r1, r9, r2, lsl #10
     d90:	05150000 	ldreq	r0, [r5, #-0]
     d94:	000001e9 	andeq	r0, r0, r9, ror #3
     d98:	00371602 	eorseq	r1, r7, r2, lsl #12
     d9c:	00160000 	andseq	r0, r6, r0
     da0:	00022a02 	andeq	r2, r2, r2, lsl #20
     da4:	5b170200 	blpl	5c15ac <startup-0x1fa3ea54>
     da8:	06000000 	streq	r0, [r0], -r0
     dac:	00000593 	muleq	r0, r3, r5
     db0:	0efa6201 	cdpeq	2, 15, cr6, cr10, cr1, {0}
     db4:	009a2000 	addseq	r2, sl, r0
     db8:	9c010000 	stcls	0, cr0, [r1], {-0}
     dbc:	00054d07 	andeq	r4, r5, r7, lsl #26
     dc0:	c4570100 	ldrbgt	r0, [r7], #-256	; 0xffffff00
     dc4:	3620000e 	strtcc	r0, [r0], -lr
     dc8:	01000000 	mrseq	r0, (UNDEF: 0)
     dcc:	0001449c 	muleq	r1, ip, r4
     dd0:	6f720800 	svcvs	0x00720800
     dd4:	57010077 	smlsdxpl	r1, r7, r0, r0
     dd8:	00000144 	andeq	r0, r0, r4, asr #2
     ddc:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
     de0:	006c6f63 	rsbeq	r6, ip, r3, ror #30
     de4:	01445701 	cmpeq	r4, r1, lsl #14
     de8:	91020000 	mrsls	r0, (UNDEF: 2)
     dec:	055a0968 	ldrbeq	r0, [sl, #-2408]	; 0xfffff698
     df0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     df4:	00000030 	andeq	r0, r0, r0, lsr r0
     df8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     dfc:	6905040a 	stmdbvs	r5, {r1, r3, sl}
     e00:	0700746e 	streq	r7, [r0, -lr, ror #8]
     e04:	00000506 	andeq	r0, r0, r6, lsl #10
     e08:	0e884f01 	cdpeq	15, 8, cr4, cr8, cr1, {0}
     e0c:	003c2000 	eorseq	r2, ip, r0
     e10:	9c010000 	stcls	0, cr0, [r1], {-0}
     e14:	0000016d 	andeq	r0, r0, sp, ror #2
     e18:	01006308 	tsteq	r0, r8, lsl #6
     e1c:	0000544f 	andeq	r5, r0, pc, asr #8
     e20:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e24:	05170b00 	ldreq	r0, [r7, #-2816]	; 0xfffff500
     e28:	44010000 	strmi	r0, [r1], #-0
     e2c:	00000054 	andeq	r0, r0, r4, asr r0
     e30:	20000e3c 	andcs	r0, r0, ip, lsr lr
     e34:	0000004c 	andeq	r0, r0, ip, asr #32
     e38:	01949c01 	orrseq	r9, r4, r1, lsl #24
     e3c:	720c0000 	andvc	r0, ip, #0
     e40:	46010076 			; <UNDEFINED> instruction: 0x46010076
     e44:	00000054 	andeq	r0, r0, r4, asr r0
     e48:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     e4c:	0004f40b 	andeq	pc, r4, fp, lsl #8
     e50:	54390100 	ldrtpl	r0, [r9], #-256	; 0xffffff00
     e54:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     e58:	4c20000d 	stcmi	0, cr0, [r0], #-52	; 0xffffffcc
     e5c:	01000000 	mrseq	r0, (UNDEF: 0)
     e60:	0001bb9c 	muleq	r1, ip, fp
     e64:	76720c00 	ldrbtvc	r0, [r2], -r0, lsl #24
     e68:	543b0100 	ldrtpl	r0, [fp], #-256	; 0xffffff00
     e6c:	02000000 	andeq	r0, r0, #0
     e70:	07006f91 			; <UNDEFINED> instruction: 0x07006f91
     e74:	000004e3 	andeq	r0, r0, r3, ror #9
     e78:	0dc63001 	stcleq	0, cr3, [r6, #4]
     e7c:	002a2000 	eoreq	r2, sl, r0
     e80:	9c010000 	stcls	0, cr0, [r1], {-0}
     e84:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e88:	0003950d 	andeq	r9, r3, sp, lsl #10
     e8c:	54300100 	ldrtpl	r0, [r0], #-256	; 0xffffff00
     e90:	02000000 	andeq	r0, r0, #0
     e94:	07007791 			; <UNDEFINED> instruction: 0x07007791
     e98:	0000053d 	andeq	r0, r0, sp, lsr r5
     e9c:	0d9c2801 	ldceq	8, cr2, [ip, #4]
     ea0:	002a2000 	eoreq	r2, sl, r0
     ea4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ea8:	00000203 	andeq	r0, r0, r3, lsl #4
     eac:	00044e0d 	andeq	r4, r4, sp, lsl #28
     eb0:	54280100 	strtpl	r0, [r8], #-256	; 0xffffff00
     eb4:	02000000 	andeq	r0, r0, #0
     eb8:	0b007791 	bleq	1ed04 <startup-0x1ffe12fc>
     ebc:	00000527 	andeq	r0, r0, r7, lsr #10
     ec0:	00541c01 	subseq	r1, r4, r1, lsl #24
     ec4:	0d680000 	stcleq	0, cr0, [r8, #-0]
     ec8:	00342000 	eorseq	r2, r4, r0
     ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed0:	0000022a 	andeq	r0, r0, sl, lsr #4
     ed4:	0076720c 	rsbseq	r7, r6, ip, lsl #4
     ed8:	00541e01 	subseq	r1, r4, r1, lsl #28
     edc:	91020000 	mrsls	r0, (UNDEF: 2)
     ee0:	b4070077 	strlt	r0, [r7], #-119	; 0xffffff89
     ee4:	01000004 	tsteq	r0, r4
     ee8:	000d3814 	andeq	r3, sp, r4, lsl r8
     eec:	00003020 	andeq	r3, r0, r0, lsr #32
     ef0:	4e9c0100 	fmlmie	f0, f4, f0
     ef4:	0d000002 	stceq	0, cr0, [r0, #-8]
     ef8:	000004cb 	andeq	r0, r0, fp, asr #9
     efc:	00541401 	subseq	r1, r4, r1, lsl #8
     f00:	91020000 	mrsls	r0, (UNDEF: 2)
     f04:	9f0e0077 	svcls	0x000e0077
     f08:	01000004 	tsteq	r0, r4
     f0c:	000cf00c 	andeq	pc, ip, ip
     f10:	00004820 	andeq	r4, r0, r0, lsr #16
     f14:	7c9c0100 	ldfvcs	f0, [ip], {0}
     f18:	08000002 	stmdaeq	r0, {r1}
     f1c:	0c010078 	stceq	0, cr0, [r1], {120}	; 0x78
     f20:	00000054 	andeq	r0, r0, r4, asr r0
     f24:	0c6f9102 	stfeqp	f1, [pc], #-8	; f24 <startup-0x1ffff0dc>
     f28:	0e010063 	cdpeq	0, 0, cr0, cr1, cr3, {3}
     f2c:	00000054 	andeq	r0, r0, r4, asr r0
     f30:	00779102 	rsbseq	r9, r7, r2, lsl #2
     f34:	0004d00f 	andeq	sp, r4, pc
     f38:	ac040100 	stfges	f0, [r4], {-0}
     f3c:	4420000c 	strtmi	r0, [r0], #-12
     f40:	01000000 	mrseq	r0, (UNDEF: 0)
     f44:	0078089c 			; <UNDEFINED> instruction: 0x0078089c
     f48:	00540401 	subseq	r0, r4, r1, lsl #8
     f4c:	91020000 	mrsls	r0, (UNDEF: 2)
     f50:	00630c6f 	rsbeq	r0, r3, pc, ror #24
     f54:	00540601 	subseq	r0, r4, r1, lsl #12
     f58:	91020000 	mrsls	r0, (UNDEF: 2)
     f5c:	ca000077 	bgt	1140 <startup-0x1fffeec0>
     f60:	04000001 	streq	r0, [r0], #-1
     f64:	0004bd00 	andeq	fp, r4, r0, lsl #26
     f68:	0c010400 	cfstrseq	mvf0, [r1], {-0}
     f6c:	0c000000 	stceq	0, cr0, [r0], {-0}
     f70:	0000059e 	muleq	r0, lr, r5
     f74:	000000db 	ldrdeq	r0, [r0], -fp
     f78:	20000f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
     f7c:	00000110 	andeq	r0, r0, r0, lsl r1
     f80:	0000041b 	andeq	r0, r0, fp, lsl r4
     f84:	0002e502 	andeq	lr, r2, r2, lsl #10
     f88:	30070200 	andcc	r0, r7, r0, lsl #4
     f8c:	03000000 	movweq	r0, #0
     f90:	013d0704 	teqeq	sp, r4, lsl #14
     f94:	dc020000 	stcle	0, cr0, [r2], {-0}
     f98:	02000002 	andeq	r0, r0, #2
     f9c:	00004208 	andeq	r4, r0, r8, lsl #4
     fa0:	07020300 	streq	r0, [r2, -r0, lsl #6]
     fa4:	00000137 	andeq	r0, r0, r7, lsr r1
     fa8:	00028702 	andeq	r8, r2, r2, lsl #14
     fac:	54090200 	strpl	r0, [r9], #-512	; 0xfffffe00
     fb0:	03000000 	movweq	r0, #0
     fb4:	01290801 			; <UNDEFINED> instruction: 0x01290801
     fb8:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
     fbc:	00e80b02 	rsceq	r0, r8, r2, lsl #22
     fc0:	f3050000 	vhadd.u8	d0, d5, d0
     fc4:	02000002 	andeq	r0, r0, #2
     fc8:	0000250c 	andeq	r2, r0, ip, lsl #10
     fcc:	b5050000 	strlt	r0, [r5, #-0]
     fd0:	02000001 	andeq	r0, r0, #1
     fd4:	0000370d 	andeq	r3, r0, sp, lsl #14
     fd8:	57050400 	strpl	r0, [r5, -r0, lsl #8]
     fdc:	02000002 	andeq	r0, r0, #2
     fe0:	0000370e 	andeq	r3, r0, lr, lsl #14
     fe4:	c7050600 	strgt	r0, [r5, -r0, lsl #12]
     fe8:	02000002 	andeq	r0, r0, #2
     fec:	0000250f 	andeq	r2, r0, pc, lsl #10
     ff0:	6c050800 	stcvs	8, cr0, [r5], {-0}
     ff4:	02000002 	andeq	r0, r0, #2
     ff8:	00002510 	andeq	r2, r0, r0, lsl r5
     ffc:	cf050c00 	svcgt	0x00050c00
    1000:	02000002 	andeq	r0, r0, #2
    1004:	00004911 	andeq	r4, r0, r1, lsl r9
    1008:	ae051000 	cdpge	0, 0, cr1, cr5, cr0, {0}
    100c:	02000002 	andeq	r0, r0, #2
    1010:	00004912 	andeq	r4, r0, r2, lsl r9
    1014:	42051100 	andmi	r1, r5, #0, 2
    1018:	02000002 	andeq	r0, r0, #2
    101c:	00003713 	andeq	r3, r0, r3, lsl r7
    1020:	98051200 	stmdals	r5, {r9, ip}
    1024:	02000002 	andeq	r0, r0, #2
    1028:	00004914 	andeq	r4, r0, r4, lsl r9
    102c:	d4051400 	strle	r1, [r5], #-1024	; 0xfffffc00
    1030:	02000001 	andeq	r0, r0, #1
    1034:	00004915 	andeq	r4, r0, r5, lsl r9
    1038:	e9051500 	stmdb	r5, {r8, sl, ip}
    103c:	02000001 	andeq	r0, r0, #1
    1040:	00003716 	andeq	r3, r0, r6, lsl r7
    1044:	02001600 	andeq	r1, r0, #0, 12
    1048:	0000022a 	andeq	r0, r0, sl, lsr #4
    104c:	005b1702 	subseq	r1, fp, r2, lsl #14
    1050:	cf060000 	svcgt	0x00060000
    1054:	01000005 	tsteq	r0, r5
    1058:	0001191e 	andeq	r1, r1, lr, lsl r9
    105c:	00105000 	andseq	r5, r0, r0
    1060:	00005420 	andeq	r5, r0, r0, lsr #8
    1064:	199c0100 	ldmibne	ip, {r8}
    1068:	07000001 	streq	r0, [r0, -r1]
    106c:	20010063 	andcs	r0, r1, r3, rrx
    1070:	00000054 	andeq	r0, r0, r4, asr r0
    1074:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1078:	69050408 	stmdbvs	r5, {r3, sl}
    107c:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1080:	000005d9 	ldrdeq	r0, [r0], -r9
    1084:	0ffc1301 	svceq	0x00fc1301
    1088:	00542000 	subseq	r2, r4, r0
    108c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1090:	00000144 	andeq	r0, r0, r4, asr #2
    1094:	776f720a 	strbvc	r7, [pc, -sl, lsl #4]!
    1098:	30130100 	andscc	r0, r3, r0, lsl #2
    109c:	02000000 	andeq	r0, r0, #0
    10a0:	0b007491 	bleq	1e2ec <startup-0x1ffe1d14>
    10a4:	00000267 	andeq	r0, r0, r7, ror #4
    10a8:	00540301 	subseq	r0, r4, r1, lsl #6
    10ac:	0f940000 	svceq	0x00940000
    10b0:	00682000 	rsbeq	r2, r8, r0
    10b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10b8:	000001c1 	andeq	r0, r0, r1, asr #3
    10bc:	79656b07 	stmdbvc	r5!, {r0, r1, r2, r8, r9, fp, sp, lr}^
    10c0:	c1050100 	mrsgt	r0, (UNDEF: 21)
    10c4:	02000001 	andeq	r0, r0, #1
    10c8:	72075891 	andvc	r5, r7, #9502720	; 0x910000
    10cc:	0100776f 	tsteq	r0, pc, ror #14
    10d0:	00011906 	andeq	r1, r1, r6, lsl #18
    10d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    10d8:	6c6f6307 	stclvs	3, cr6, [pc], #-28	; 10c4 <startup-0x1fffef3c>
    10dc:	19060100 	stmdbne	r6, {r8}
    10e0:	02000001 	andeq	r0, r0, #1
    10e4:	d90c6891 	stmdble	ip, {r0, r4, r7, fp, sp, lr}
    10e8:	01000005 	tsteq	r0, r5
    10ec:	00011908 	andeq	r1, r1, r8, lsl #18
    10f0:	00019800 	andeq	r9, r1, r0, lsl #16
    10f4:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    10f8:	20000fac 	andcs	r0, r0, ip, lsr #31
    10fc:	0000002e 	andeq	r0, r0, lr, lsr #32
    1100:	0005d90c 	andeq	sp, r5, ip, lsl #18
    1104:	19080100 	stmdbne	r8, {r8}
    1108:	b2000001 	andlt	r0, r0, #1
    110c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1110:	05cf0f00 	strbeq	r0, [pc, #3840]	; 2018 <startup-0x1fffdfe8>
    1114:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1118:	00000119 	andeq	r0, r0, r9, lsl r1
    111c:	0000000d 	andeq	r0, r0, sp
    1120:	00005410 	andeq	r5, r0, r0, lsl r4
    1124:	00301100 	eorseq	r1, r0, r0, lsl #2
    1128:	000f0000 	andeq	r0, pc, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f00 	tsteq	r9, #0, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	1119270b 	tstne	r9, fp, lsl #14
  2c:	40061201 	andmi	r1, r6, r1, lsl #4
  30:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  34:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
  38:	03193f01 	tsteq	r9, #1, 30
  3c:	3b0b3a0e 	blcc	2ce87c <startup-0x1fd31784>
  40:	1119270b 	tstne	r9, fp, lsl #14
  44:	40061201 	andmi	r1, r6, r1, lsl #4
  48:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  4c:	00001301 	andeq	r1, r0, r1, lsl #6
  50:	03003405 	movweq	r3, #1029	; 0x405
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  5c:	06000018 			; <UNDEFINED> instruction: 0x06000018
  60:	08030005 	stmdaeq	r3, {r0, r2}
  64:	0b3b0b3a 	bleq	ec2d54 <startup-0x1f13d2ac>
  68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  6c:	24070000 	strcs	r0, [r7], #-0
  70:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  74:	0008030b 	andeq	r0, r8, fp, lsl #6
  78:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
  7c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  80:	0b3b0b3a 	bleq	ec2d70 <startup-0x1f13d290>
  84:	01111927 	tsteq	r1, r7, lsr #18
  88:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  8c:	00194297 	mulseq	r9, r7, r2
  90:	11010000 	mrsne	r0, (UNDEF: 1)
  94:	130e2501 	movwne	r2, #58625	; 0xe501
  98:	1b0e030b 	blne	380ccc <startup-0x1fc7f334>
  9c:	1117550e 	tstne	r7, lr, lsl #10
  a0:	00171001 	andseq	r1, r7, r1
  a4:	00160200 	andseq	r0, r6, r0, lsl #4
  a8:	0b3a0e03 	bleq	e838bc <startup-0x1f17c744>
  ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b0:	24030000 	strcs	r0, [r3], #-0
  b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b8:	000e030b 	andeq	r0, lr, fp, lsl #6
  bc:	01130400 	tsteq	r3, r0, lsl #8
  c0:	0b3a0b0b 	bleq	e82cf4 <startup-0x1f17d30c>
  c4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  c8:	0d050000 	stceq	0, cr0, [r5, #-0]
  cc:	3a0e0300 	bcc	380cd4 <startup-0x1fc7f32c>
  d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d4:	000b3813 	andeq	r3, fp, r3, lsl r8
  d8:	01130600 	tsteq	r3, r0, lsl #12
  dc:	0b0b0e03 	bleq	2c38f0 <startup-0x1fd3c710>
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	03000d07 	movweq	r0, #3335	; 0xd07
  ec:	3b0b3a08 	blcc	2ce914 <startup-0x1fd316ec>
  f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  f4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  f8:	0b0b0024 	bleq	2c0190 <startup-0x1fd3fe70>
  fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 100:	01090000 	mrseq	r0, (UNDEF: 9)
 104:	01134901 	tsteq	r3, r1, lsl #18
 108:	0a000013 	beq	15c <startup-0x1ffffea4>
 10c:	13490021 	movtne	r0, #36897	; 0x9021
 110:	00000b2f 	andeq	r0, r0, pc, lsr #22
 114:	0b000f0b 	bleq	3d48 <startup-0x1fffc2b8>
 118:	0013490b 	andseq	r4, r3, fp, lsl #18
 11c:	01150c00 	tsteq	r5, r0, lsl #24
 120:	13011927 	movwne	r1, #6439	; 0x1927
 124:	050d0000 	streq	r0, [sp, #-0]
 128:	00134900 	andseq	r4, r3, r0, lsl #18
 12c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 130:	0b3a0e03 	bleq	e83944 <startup-0x1f17c6bc>
 134:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 138:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 13c:	340f0000 	strcc	r0, [pc], #-0	; 144 <startup-0x1ffffebc>
 140:	3a0e0300 	bcc	380d48 <startup-0x1fc7f2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	00180213 	andseq	r0, r8, r3, lsl r2
 14c:	00341000 	eorseq	r1, r4, r0
 150:	0b3a0803 	bleq	e82164 <startup-0x1f17de9c>
 154:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 158:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 15c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 160:	03193f01 	tsteq	r9, #1, 30
 164:	3b0b3a0e 	blcc	2ce9a4 <startup-0x1fd3165c>
 168:	1119270b 	tstne	r9, fp, lsl #14
 16c:	40061201 	andmi	r1, r6, r1, lsl #4
 170:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 174:	00001301 	andeq	r1, r0, r1, lsl #6
 178:	03003412 	movweq	r3, #1042	; 0x412
 17c:	3b0b3a08 	blcc	2ce9a4 <startup-0x1fd3165c>
 180:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 184:	13000018 	movwne	r0, #24
 188:	0111010b 	tsteq	r1, fp, lsl #2
 18c:	00000612 	andeq	r0, r0, r2, lsl r6
 190:	3f012e14 	svccc	0x00012e14
 194:	3a0e0319 	bcc	380e00 <startup-0x1fc7f200>
 198:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	01193c13 	tsteq	r9, r3, lsl ip
 1a0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 1a4:	00000018 	andeq	r0, r0, r8, lsl r0
 1a8:	11010b16 	tstne	r1, r6, lsl fp
 1ac:	01061201 	tsteq	r6, r1, lsl #4
 1b0:	17000013 	smladne	r0, r3, r0, r0
 1b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1b8:	0b3a0e03 	bleq	e839cc <startup-0x1f17c634>
 1bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1c8:	00130119 	andseq	r0, r3, r9, lsl r1
 1cc:	00051800 	andeq	r1, r5, r0, lsl #16
 1d0:	0b3a0803 	bleq	e821e4 <startup-0x1f17de1c>
 1d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1d8:	00001802 	andeq	r1, r0, r2, lsl #16
 1dc:	03000519 	movweq	r0, #1305	; 0x519
 1e0:	3b0b3a0e 	blcc	2cea20 <startup-0x1fd315e0>
 1e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1e8:	1a000018 	bne	250 <startup-0x1ffffdb0>
 1ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1f8:	1301193c 	movwne	r1, #6460	; 0x193c
 1fc:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 200:	03193f00 	tsteq	r9, #0, 30
 204:	3b0b3a0e 	blcc	2cea44 <startup-0x1fd315bc>
 208:	1119270b 	tstne	r9, fp, lsl #14
 20c:	40061201 	andmi	r1, r6, r1, lsl #4
 210:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 214:	01000000 	mrseq	r0, (UNDEF: 0)
 218:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 21c:	0e030b13 	vmoveq.32	d3[0], r0
 220:	01110e1b 	tsteq	r1, fp, lsl lr
 224:	17100612 			; <UNDEFINED> instruction: 0x17100612
 228:	16020000 	strne	r0, [r2], -r0
 22c:	3a0e0300 	bcc	380e34 <startup-0x1fc7f1cc>
 230:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 234:	03000013 	movweq	r0, #19
 238:	0b0b0024 	bleq	2c02d0 <startup-0x1fd3fd30>
 23c:	0e030b3e 	vmoveq.16	d3[0], r0
 240:	13040000 	movwne	r0, #16384	; 0x4000
 244:	3a0b0b01 	bcc	2c2e50 <startup-0x1fd3d1b0>
 248:	010b3b0b 	tsteq	fp, fp, lsl #22
 24c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 250:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	0b381349 	bleq	e04f84 <startup-0x1f1fb07c>
 25c:	13060000 	movwne	r0, #24576	; 0x6000
 260:	0b0e0301 	bleq	380e6c <startup-0x1fc7f194>
 264:	3b0b3a0b 	blcc	2cea98 <startup-0x1fd31568>
 268:	0013010b 	andseq	r0, r3, fp, lsl #2
 26c:	000d0700 	andeq	r0, sp, r0, lsl #14
 270:	0b3a0803 	bleq	e82284 <startup-0x1f17dd7c>
 274:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 278:	00000b38 	andeq	r0, r0, r8, lsr fp
 27c:	0b002408 	bleq	92a4 <startup-0x1fff6d5c>
 280:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 284:	09000008 	stmdbeq	r0, {r3}
 288:	13490101 	movtne	r0, #37121	; 0x9101
 28c:	00001301 	andeq	r1, r0, r1, lsl #6
 290:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
 294:	000b2f13 	andeq	r2, fp, r3, lsl pc
 298:	000f0b00 	andeq	r0, pc, r0, lsl #22
 29c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 2a0:	150c0000 	strne	r0, [ip, #-0]
 2a4:	01192701 	tsteq	r9, r1, lsl #14
 2a8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 2ac:	13490005 	movtne	r0, #36869	; 0x9005
 2b0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 2b4:	03193f01 	tsteq	r9, #1, 30
 2b8:	3b0b3a0e 	blcc	2ceaf8 <startup-0x1fd31508>
 2bc:	1119270b 	tstne	r9, fp, lsl #14
 2c0:	40061201 	andmi	r1, r6, r1, lsl #4
 2c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2c8:	00001301 	andeq	r1, r0, r1, lsl #6
 2cc:	0300050f 	movweq	r0, #1295	; 0x50f
 2d0:	3b0b3a08 	blcc	2ceaf8 <startup-0x1fd31508>
 2d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2d8:	10000018 	andne	r0, r0, r8, lsl r0
 2dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2e0:	0b3b0b3a 	bleq	ec2fd0 <startup-0x1f13d030>
 2e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2e8:	34110000 	ldrcc	r0, [r1], #-0
 2ec:	3a0e0300 	bcc	380ef4 <startup-0x1fc7f10c>
 2f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f4:	00180213 	andseq	r0, r8, r3, lsl r2
 2f8:	010b1200 	mrseq	r1, R11_fiq
 2fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 300:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 304:	03193f01 	tsteq	r9, #1, 30
 308:	3b0b3a0e 	blcc	2ceb48 <startup-0x1fd314b8>
 30c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 310:	00130119 	andseq	r0, r3, r9, lsl r1
 314:	00181400 	andseq	r1, r8, r0, lsl #8
 318:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 31c:	03193f01 	tsteq	r9, #1, 30
 320:	3b0b3a0e 	blcc	2ceb60 <startup-0x1fd314a0>
 324:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 328:	16000019 			; <UNDEFINED> instruction: 0x16000019
 32c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 330:	0b3b0b3a 	bleq	ec3020 <startup-0x1f13cfe0>
 334:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 338:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 33c:	03193f01 	tsteq	r9, #1, 30
 340:	3b0b3a0e 	blcc	2ceb80 <startup-0x1fd31480>
 344:	1119270b 	tstne	r9, fp, lsl #14
 348:	40061201 	andmi	r1, r6, r1, lsl #4
 34c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 350:	00001301 	andeq	r1, r0, r1, lsl #6
 354:	3f012e18 	svccc	0x00012e18
 358:	3a0e0319 	bcc	380fc4 <startup-0x1fc7f03c>
 35c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 360:	11134919 	tstne	r3, r9, lsl r9
 364:	40061201 	andmi	r1, r6, r1, lsl #4
 368:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 36c:	00001301 	andeq	r1, r0, r1, lsl #6
 370:	03003419 	movweq	r3, #1049	; 0x419
 374:	3b0b3a08 	blcc	2ceb9c <startup-0x1fd31464>
 378:	0013490b 	andseq	r4, r3, fp, lsl #18
 37c:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 380:	0b3a0e03 	bleq	e83b94 <startup-0x1f17c46c>
 384:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 388:	01111349 	tsteq	r1, r9, asr #6
 38c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 390:	01194296 			; <UNDEFINED> instruction: 0x01194296
 394:	1b000013 	blne	3e8 <startup-0x1ffffc18>
 398:	0e03012e 	adfeqsp	f0, f3, #0.5
 39c:	0b3b0b3a 	bleq	ec308c <startup-0x1f13cf74>
 3a0:	01111927 	tsteq	r1, r7, lsr #18
 3a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3a8:	00194296 	mulseq	r9, r6, r2
 3ac:	11010000 	mrsne	r0, (UNDEF: 1)
 3b0:	130e2501 	movwne	r2, #58625	; 0xe501
 3b4:	1b0e030b 	blne	380fe8 <startup-0x1fc7f018>
 3b8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3bc:	00171006 	andseq	r1, r7, r6
 3c0:	00160200 	andseq	r0, r6, r0, lsl #4
 3c4:	0b3a0e03 	bleq	e83bd8 <startup-0x1f17c428>
 3c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3cc:	24030000 	strcs	r0, [r3], #-0
 3d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3d4:	000e030b 	andeq	r0, lr, fp, lsl #6
 3d8:	01130400 	tsteq	r3, r0, lsl #8
 3dc:	0b3a0b0b 	bleq	e83010 <startup-0x1f17cff0>
 3e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3e4:	0d050000 	stceq	0, cr0, [r5, #-0]
 3e8:	3a0e0300 	bcc	380ff0 <startup-0x1fc7f010>
 3ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3f0:	000b3813 	andeq	r3, fp, r3, lsl r8
 3f4:	002e0600 	eoreq	r0, lr, r0, lsl #12
 3f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3fc:	0b3b0b3a 	bleq	ec30ec <startup-0x1f13cf14>
 400:	01111927 	tsteq	r1, r7, lsr #18
 404:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 408:	00194296 	mulseq	r9, r6, r2
 40c:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 410:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 414:	0b3b0b3a 	bleq	ec3104 <startup-0x1f13cefc>
 418:	01111927 	tsteq	r1, r7, lsr #18
 41c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 420:	01194296 			; <UNDEFINED> instruction: 0x01194296
 424:	08000013 	stmdaeq	r0, {r0, r1, r4}
 428:	08030005 	stmdaeq	r3, {r0, r2}
 42c:	0b3b0b3a 	bleq	ec311c <startup-0x1f13cee4>
 430:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 434:	34090000 	strcc	r0, [r9], #-0
 438:	3a0e0300 	bcc	381040 <startup-0x1fc7efc0>
 43c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 440:	00180213 	andseq	r0, r8, r3, lsl r2
 444:	00240a00 	eoreq	r0, r4, r0, lsl #20
 448:	0b3e0b0b 	bleq	f8307c <startup-0x1f07cf84>
 44c:	00000803 	andeq	r0, r0, r3, lsl #16
 450:	3f012e0b 	svccc	0x00012e0b
 454:	3a0e0319 	bcc	3810c0 <startup-0x1fc7ef40>
 458:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 45c:	11134919 	tstne	r3, r9, lsl r9
 460:	40061201 	andmi	r1, r6, r1, lsl #4
 464:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 468:	00001301 	andeq	r1, r0, r1, lsl #6
 46c:	0300340c 	movweq	r3, #1036	; 0x40c
 470:	3b0b3a08 	blcc	2cec98 <startup-0x1fd31368>
 474:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 478:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 47c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 488:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 48c:	03193f01 	tsteq	r9, #1, 30
 490:	3b0b3a0e 	blcc	2cecd0 <startup-0x1fd31330>
 494:	1119270b 	tstne	r9, fp, lsl #14
 498:	40061201 	andmi	r1, r6, r1, lsl #4
 49c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4a0:	00001301 	andeq	r1, r0, r1, lsl #6
 4a4:	3f012e0f 	svccc	0x00012e0f
 4a8:	3a0e0319 	bcc	381114 <startup-0x1fc7eeec>
 4ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4b4:	97184006 	ldrls	r4, [r8, -r6]
 4b8:	00001942 	andeq	r1, r0, r2, asr #18
 4bc:	01110100 	tsteq	r1, r0, lsl #2
 4c0:	0b130e25 	bleq	4c3d5c <startup-0x1fb3c2a4>
 4c4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 4c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4cc:	00001710 	andeq	r1, r0, r0, lsl r7
 4d0:	03001602 	movweq	r1, #1538	; 0x602
 4d4:	3b0b3a0e 	blcc	2ced14 <startup-0x1fd312ec>
 4d8:	0013490b 	andseq	r4, r3, fp, lsl #18
 4dc:	00240300 	eoreq	r0, r4, r0, lsl #6
 4e0:	0b3e0b0b 	bleq	f83114 <startup-0x1f07ceec>
 4e4:	00000e03 	andeq	r0, r0, r3, lsl #28
 4e8:	0b011304 	bleq	45100 <startup-0x1ffbaf00>
 4ec:	3b0b3a0b 	blcc	2ced20 <startup-0x1fd312e0>
 4f0:	0013010b 	andseq	r0, r3, fp, lsl #2
 4f4:	000d0500 	andeq	r0, sp, r0, lsl #10
 4f8:	0b3a0e03 	bleq	e83d0c <startup-0x1f17c2f4>
 4fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 500:	00000b38 	andeq	r0, r0, r8, lsr fp
 504:	3f012e06 	svccc	0x00012e06
 508:	3a0e0319 	bcc	381174 <startup-0x1fc7ee8c>
 50c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 510:	11134919 	tstne	r3, r9, lsl r9
 514:	40061201 	andmi	r1, r6, r1, lsl #4
 518:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 51c:	00001301 	andeq	r1, r0, r1, lsl #6
 520:	03003407 	movweq	r3, #1031	; 0x407
 524:	3b0b3a08 	blcc	2ced4c <startup-0x1fd312b4>
 528:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 52c:	08000018 	stmdaeq	r0, {r3, r4}
 530:	0b0b0024 	bleq	2c05c8 <startup-0x1fd3fa38>
 534:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 538:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 53c:	03193f01 	tsteq	r9, #1, 30
 540:	3b0b3a0e 	blcc	2ced80 <startup-0x1fd31280>
 544:	1119270b 	tstne	r9, fp, lsl #14
 548:	40061201 	andmi	r1, r6, r1, lsl #4
 54c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 550:	00001301 	andeq	r1, r0, r1, lsl #6
 554:	0300050a 	movweq	r0, #1290	; 0x50a
 558:	3b0b3a08 	blcc	2ced80 <startup-0x1fd31280>
 55c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 560:	0b000018 	bleq	5c8 <startup-0x1ffffa38>
 564:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 568:	0b3a0e03 	bleq	e83d7c <startup-0x1f17c284>
 56c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 570:	01111349 	tsteq	r1, r9, asr #6
 574:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 578:	01194296 			; <UNDEFINED> instruction: 0x01194296
 57c:	0c000013 	stceq	0, cr0, [r0], {19}
 580:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 584:	0b3a0e03 	bleq	e83d98 <startup-0x1f17c268>
 588:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 58c:	1301193c 	movwne	r1, #6460	; 0x193c
 590:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
 594:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 598:	0111010b 	tsteq	r1, fp, lsl #2
 59c:	00000612 	andeq	r0, r0, r2, lsl r6
 5a0:	3f012e0f 	svccc	0x00012e0f
 5a4:	3a0e0319 	bcc	381210 <startup-0x1fc7edf0>
 5a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5ac:	00193c13 	andseq	r3, r9, r3, lsl ip
 5b0:	01011000 	mrseq	r1, (UNDEF: 1)
 5b4:	00001349 	andeq	r1, r0, r9, asr #6
 5b8:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
 5bc:	000b2f13 	andeq	r2, fp, r3, lsl pc
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000009a 	muleq	r0, sl, r0
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	00b90002 	adcseq	r0, r9, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000ac 	andcs	r0, r0, ip, lsr #1
  34:	00000584 	andeq	r0, r0, r4, lsl #11
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	07160002 	ldreq	r0, [r6, -r2]
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000630 	andcs	r0, r0, r0, lsr r6
  5c:	0000067c 	andeq	r0, r0, ip, ror r6
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0cb80002 	ldceq	0, cr0, [r8], #8
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000cac 	andcs	r0, r0, ip, lsr #25
  7c:	000002e8 	andeq	r0, r0, r8, ror #5
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0f5f0002 	svceq	0x005f0002
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
  9c:	00000110 	andeq	r0, r0, r0, lsl r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000007a 	andeq	r0, r0, sl, ror r0
   4:	00480002 	subeq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
  28:	6f442f61 	svcvs	0x00442f61
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; ffffff18 <a+0xdfffda68>
  38:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; ffffff04 <a+0xdfffda54>
  3c:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
  40:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  44:	65640000 	strbvs	r0, [r4, #-0]!
  48:	2e79616c 	rpwcsez	f6, f1, #4.0
  4c:	00010063 	andeq	r0, r1, r3, rrx
  50:	05000000 	streq	r0, [r0, #-0]
  54:	00001002 	andeq	r1, r0, r2
  58:	254b1620 	strbcs	r1, [fp, #-1568]	; 0xfffff9e0
  5c:	4b4d4337 	blmi	1350d40 <startup-0x1ecaf2c0>
  60:	3c780328 	ldclcc	3, cr0, [r8], #-160	; 0xffffff60
  64:	4d3c0a03 	vldmdbmi	ip!, {s0-s2}
  68:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  6c:	0200673d 	andeq	r6, r0, #15990784	; 0xf40000
  70:	20060104 	andcs	r0, r6, r4, lsl #2
  74:	af3e6706 	svcge	0x003e6706
  78:	00030233 	andeq	r0, r3, r3, lsr r2
  7c:	01320101 	teqeq	r2, r1, lsl #2
  80:	00020000 	andeq	r0, r2, r0
  84:	00000065 	andeq	r0, r0, r5, rrx
  88:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  8c:	0101000d 	tsteq	r1, sp
  90:	00000101 	andeq	r0, r0, r1, lsl #2
  94:	00000100 	andeq	r0, r0, r0, lsl #2
  98:	2f3a4301 	svccs	0x003a4301
  9c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  a0:	614d2f73 	hvcvs	54003	; 0xd2f3
  a4:	2f616972 	svccs	0x00616972
  a8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  ac:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  b0:	54492f73 	strbpl	r2, [r9], #-3955	; 0xfffff08d
  b4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  b8:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  bc:	616e732f 	cmnvs	lr, pc, lsr #6
  c0:	0000656b 	andeq	r6, r0, fp, ror #10
  c4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  c8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  cc:	00010063 	andeq	r0, r1, r3, rrx
  d0:	672f2e00 	strvs	r2, [pc, -r0, lsl #28]!
  d4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
  d8:	00000068 	andeq	r0, r0, r8, rrx
  dc:	732f2e00 			; <UNDEFINED> instruction: 0x732f2e00
  e0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
  e4:	682e7374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
  e8:	00000000 	andeq	r0, r0, r0
  ec:	02050000 	andeq	r0, r5, #0
  f0:	20000000 	andcs	r0, r0, r0
  f4:	13010e03 	movwne	r0, #7683	; 0x1e03
  f8:	0003025e 	andeq	r0, r3, lr, asr r2
  fc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
 100:	0000ac02 	andeq	sl, r0, r2, lsl #24
 104:	011d0320 	tsteq	sp, r0, lsr #6
 108:	673e6867 	ldrvs	r6, [lr, -r7, ror #16]!
 10c:	754c4c3e 	strbvc	r4, [ip, #-3134]	; 0xfffff3c2
 110:	91764b76 	cmnls	r6, r6, ror fp
 114:	91764b3e 	cmnls	r6, lr, lsr fp
 118:	4a1d033f 	bmi	740e1c <startup-0x1f8bf1e4>
 11c:	4b4b3d34 	blmi	12cf5f4 <startup-0x1ed30a0c>
 120:	3d59c13d 	ldfccp	f4, [r9, #-244]	; 0xffffff0c
 124:	a008a008 	andge	sl, r8, r8
 128:	929f594b 	addsls	r5, pc, #1228800	; 0x12c000
 12c:	5ad73d08 	bpl	ff5cf554 <a+0xdf5cd0a4>
 130:	224d3d59 	subcs	r3, sp, #5696	; 0x1640
 134:	bb4b5d8e 	bllt	12d7774 <startup-0x1ed2888c>
 138:	756859e5 	strbvc	r5, [r8, #-2533]!	; 0xfffff61b
 13c:	17085b5e 	smlsdne	r8, lr, fp, r5
 140:	4c3d673d 	ldcmi	7, cr6, [sp], #-244	; 0xffffff0c
 144:	4b5d8e22 	blmi	17639d4 <startup-0x1e89c62c>
 148:	835ab14c 	cmphi	sl, #76, 2
 14c:	74110383 	ldrvc	r0, [r1], #-899	; 0xfffffc7d
 150:	4b4b3d59 	blmi	12cf6bc <startup-0x1ed30944>
 154:	3d3d4b83 	fldmdbxcc	sp!, {d4-d68}	;@ Deprecated
 158:	4b3ecb3d 	blmi	fb2e54 <startup-0x1f04d1ac>
 15c:	2f2f3e4c 	svccs	0x002f3e4c
 160:	5a75522f 	bpl	1d54a24 <startup-0x1e2ab5dc>
 164:	03040200 	movweq	r0, #16896	; 0x4200
 168:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 16c:	02005903 	andeq	r5, r0, #49152	; 0xc000
 170:	00710304 	rsbseq	r0, r1, r4, lsl #6
 174:	06010402 	streq	r0, [r1], -r2, lsl #8
 178:	5a42063c 	bpl	1081a70 <startup-0x1ef7e590>
 17c:	003d7559 	eorseq	r7, sp, r9, asr r5
 180:	8b020402 	blhi	81190 <startup-0x1ff7ee70>
 184:	01040200 	mrseq	r0, R12_usr
 188:	03063c06 	movweq	r3, #27654	; 0x6c06
 18c:	76593c09 	ldrbvc	r3, [r9], -r9, lsl #24
 190:	a03d595a 	eorsge	r5, sp, sl, asr r9
 194:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
 198:	2e780302 	cdpcs	3, 7, cr0, cr8, cr2, {0}
 19c:	01040200 	mrseq	r0, R12_usr
 1a0:	03063c06 	movweq	r3, #27654	; 0x6c06
 1a4:	673d3c10 			; <UNDEFINED> instruction: 0x673d3c10
 1a8:	adad9fca 	stcge	15, cr9, [sp, #808]!	; 0x328
 1ac:	029e5303 	addseq	r5, lr, #201326592	; 0xc000000
 1b0:	0101000b 	tsteq	r1, fp
 1b4:	00000186 	andeq	r0, r0, r6, lsl #3
 1b8:	00650002 	rsbeq	r0, r5, r2
 1bc:	01020000 	mrseq	r0, (UNDEF: 2)
 1c0:	000d0efb 	strdeq	r0, [sp], -fp
 1c4:	01010101 	tsteq	r1, r1, lsl #2
 1c8:	01000000 	mrseq	r0, (UNDEF: 0)
 1cc:	43010000 	movwmi	r0, #4096	; 0x1000
 1d0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 1d4:	2f737265 	svccs	0x00737265
 1d8:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
 1dc:	6f442f61 	svcvs	0x00442f61
 1e0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 1e4:	2f73746e 	svccs	0x0073746e
 1e8:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; cc <startup-0x1fffff34>
 1ec:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; b8 <startup-0x1fffff48>
 1f0:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
 1f4:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 1f8:	72670000 	rsbvc	r0, r7, #0
 1fc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 200:	00632e63 	rsbeq	r2, r3, r3, ror #28
 204:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
 208:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 20c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 210:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
 214:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
 218:	73746375 	cmnvc	r4, #-738197503	; 0xd4000001
 21c:	0000682e 	andeq	r6, r0, lr, lsr #16
 220:	00000000 	andeq	r0, r0, r0
 224:	06300205 	ldrteq	r0, [r0], -r5, lsl #4
 228:	3e172000 	cdpcc	0, 1, cr2, cr7, cr0, {0}
 22c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 230:	752f3d32 	strvc	r3, [pc, #-3378]!	; fffff506 <a+0xdfffd056>
 234:	27452f3d 	smlaldxcs	r2, r5, sp, pc	; <UNPREDICTABLE>
 238:	68af3d23 	stmiavs	pc!, {r0, r1, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 23c:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 240:	592f3d2f 	stmdbpl	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 244:	3d593e3d 	ldclcc	14, cr3, [r9, #-244]	; 0xffffff0c
 248:	303d5a30 	eorscc	r5, sp, r0, lsr sl
 24c:	4b92af3d 	blmi	fe4abf48 <a+0xde4a9a98>
 250:	2f3d2f59 	svccs	0x003d2f59
 254:	303d593e 	eorscc	r5, sp, lr, lsr r9
 258:	3d303d5a 	ldccc	13, cr3, [r0, #-360]!	; 0xfffffe98
 25c:	91773d3d 	cmnls	r7, sp, lsr sp
 260:	833d593d 	teqhi	sp, #999424	; 0xf4000
 264:	593d914d 	ldmdbpl	sp!, {r0, r2, r3, r6, r8, ip, pc}
 268:	4d833d3d 	stcmi	13, cr3, [r3, #244]	; 0xf4
 26c:	4d675967 			; <UNDEFINED> instruction: 0x4d675967
 270:	4bc95968 	blmi	ff256818 <a+0xdf254368>
 274:	c9596869 	ldmdbgt	r9, {r0, r3, r5, r6, fp, sp, lr}^
 278:	03677759 	cmneq	r7, #23330816	; 0x1640000
 27c:	70037410 	andvc	r7, r3, r0, lsl r4
 280:	4a100320 	bmi	400f08 <startup-0x1fbff0f8>
 284:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 288:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 28c:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 290:	3d2f4d22 	stccc	13, cr4, [pc, #-136]!	; 210 <startup-0x1ffffdf0>
 294:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 298:	4b4b4b3d 	blmi	12d2f94 <startup-0x1ed2d06c>
 29c:	3f3d4b4b 	svccc	0x003d4b4b
 2a0:	4b9f3e3d 	blmi	fe7cfb9c <a+0xde7cd6ec>
 2a4:	03040200 	movweq	r0, #16896	; 0x4200
 2a8:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 2ac:	02004803 	andeq	r4, r0, #196608	; 0x30000
 2b0:	3c060104 	stfccs	f0, [r6], {4}
 2b4:	02040200 	andeq	r0, r4, #0, 4
 2b8:	02003806 	andeq	r3, r0, #393216	; 0x60000
 2bc:	3c060104 	stfccs	f0, [r6], {4}
 2c0:	3c090306 	stccc	3, cr0, [r9], {6}
 2c4:	02006a4d 	andeq	r6, r0, #315392	; 0x4d000
 2c8:	4a060104 	bmi	1806e0 <startup-0x1fe7f920>
 2cc:	02040200 	andeq	r0, r4, #0, 4
 2d0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 2d4:	4c064a03 			; <UNDEFINED> instruction: 0x4c064a03
 2d8:	59130876 	ldmdbpl	r3, {r1, r2, r4, r5, r6, fp}
 2dc:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 2e0:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 2e4:	4c4b3d68 	mcrrmi	13, 6, r3, fp, cr8
 2e8:	c9c93f4b 	stmibgt	r9, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}^
 2ec:	a03dbc91 	mlasge	sp, r1, ip, fp
 2f0:	ac5c0392 	mrrcge	3, 9, r0, ip, cr2
 2f4:	85202503 	strhi	r2, [r0, #-1283]!	; 0xfffffafd
 2f8:	02006b4c 	andeq	r6, r0, #76, 22	; 0x13000
 2fc:	005a0304 	subseq	r0, sl, r4, lsl #6
 300:	08030402 	stmdaeq	r3, {r1, sl}
 304:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 308:	0200f503 	andeq	pc, r0, #12582912	; 0xc00000
 30c:	7a030304 	bvc	c0f24 <startup-0x1ff3f0dc>
 310:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 314:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 318:	694c4d8a 	stmdbvs	ip, {r1, r3, r7, r8, sl, fp, lr}^
 31c:	03040200 	movweq	r0, #16896	; 0x4200
 320:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 324:	00130803 	andseq	r0, r3, r3, lsl #16
 328:	f3030402 	vshl.u8	d0, d2, d3
 32c:	03040200 	movweq	r0, #16896	; 0x4200
 330:	0402007f 	streq	r0, [r2], #-127	; 0xffffff81
 334:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 338:	00040287 	andeq	r0, r4, r7, lsl #5
 33c:	00d90101 	sbcseq	r0, r9, r1, lsl #2
 340:	00020000 	andeq	r0, r2, r0
 344:	00000054 	andeq	r0, r0, r4, asr r0
 348:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 34c:	0101000d 	tsteq	r1, sp
 350:	00000101 	andeq	r0, r0, r1, lsl #2
 354:	00000100 	andeq	r0, r0, r0, lsl #2
 358:	2f3a4301 	svccs	0x003a4301
 35c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 360:	614d2f73 	hvcvs	54003	; 0xd2f3
 364:	2f616972 	svccs	0x00616972
 368:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 36c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 370:	54492f73 	strbpl	r2, [r9], #-3955	; 0xfffff08d
 374:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 378:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 37c:	616e732f 	cmnvs	lr, pc, lsr #6
 380:	0000656b 	andeq	r6, r0, fp, ror #10
 384:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 388:	00632e69 	rsbeq	r2, r3, r9, ror #28
 38c:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
 390:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 394:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 398:	00000000 	andeq	r0, r0, r0
 39c:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
 3a0:	1620000c 	strtne	r0, [r0], -ip
 3a4:	59ad5968 	stmibpl	sp!, {r3, r5, r6, r8, fp, ip, lr}
 3a8:	e5596877 	ldrb	r6, [r9, #-2167]	; 0xfffff789
 3ac:	3d67694b 			; <UNDEFINED> instruction: 0x3d67694b
 3b0:	693d2f4b 	ldmdbvs	sp!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
 3b4:	2f2f3d3e 	svccs	0x002f3d3e
 3b8:	77303d4b 	ldrvc	r3, [r0, -fp, asr #26]!
 3bc:	5a3d3d67 	bpl	f4f960 <startup-0x1f0b06a0>
 3c0:	3d3d674d 	ldccc	7, cr6, [sp, #-308]!	; 0xfffffecc
 3c4:	673e4f59 			; <UNDEFINED> instruction: 0x673e4f59
 3c8:	67593d3d 	smmlarvs	r9, sp, sp, r3
 3cc:	673ea12f 	ldrvs	sl, [lr, -pc, lsr #2]!
 3d0:	67593d3d 	smmlarvs	r9, sp, sp, r3
 3d4:	0067a12f 	rsbeq	sl, r7, pc, lsr #2
 3d8:	06010402 	streq	r0, [r1], -r2, lsl #8
 3dc:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 3e0:	5a4d3d59 	bpl	134f94c <startup-0x1ecb06b4>
 3e4:	913e3e3d 	teqls	lr, sp, lsr lr
 3e8:	02002f4d 	andeq	r2, r0, #308	; 0x134
 3ec:	20060104 	andcs	r0, r6, r4, lsl #2
 3f0:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 3f4:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 3f8:	06200601 	strteq	r0, [r0], -r1, lsl #12
 3fc:	3e3d3d83 	cdpcc	13, 3, cr3, cr13, cr3, {4}
 400:	01040200 	mrseq	r0, R12_usr
 404:	83062006 	movwhi	r2, #24582	; 0x6006
 408:	003e3d3d 	eorseq	r3, lr, sp, lsr sp
 40c:	06010402 	streq	r0, [r1], -r2, lsl #8
 410:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 414:	03023d3d 	movweq	r3, #11581	; 0x2d3d
 418:	ac010100 	stfges	f0, [r1], {-0}
 41c:	02000000 	andeq	r0, r0, #0
 420:	00005300 	andeq	r5, r0, r0, lsl #6
 424:	fb010200 	blx	40c2e <startup-0x1ffbf3d2>
 428:	01000d0e 	tsteq	r0, lr, lsl #26
 42c:	00010101 	andeq	r0, r1, r1, lsl #2
 430:	00010000 	andeq	r0, r1, r0
 434:	3a430100 	bcc	10c083c <startup-0x1ef3f7c4>
 438:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 43c:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 27c <startup-0x1ffffd84>
 440:	61697261 	cmnvs	r9, r1, ror #4
 444:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 448:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 44c:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 450:	4f4d2f54 	svcmi	0x004d2f54
 454:	4f4d2f50 	svcmi	0x004d2f50
 458:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 45c:	00656b61 	rsbeq	r6, r5, r1, ror #22
 460:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 464:	00632e62 	rsbeq	r2, r3, r2, ror #28
 468:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
 46c:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 470:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 474:	00000000 	andeq	r0, r0, r0
 478:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
 47c:	1520000f 	strne	r0, [r0, #-15]!
 480:	4b3d683d 	blmi	f5a57c <startup-0x1f0a5a84>
 484:	003d3d4b 	eorseq	r3, sp, fp, asr #26
 488:	8b020402 	blhi	81498 <startup-0x1ff7eb68>
 48c:	01040200 	mrseq	r0, R12_usr
 490:	44063c06 	strmi	r3, [r6], #-3078	; 0xfffff3fa
 494:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 498:	4b772101 	blmi	1dc88a4 <startup-0x1e23775c>
 49c:	4b4b4b92 	blmi	12d32ec <startup-0x1ed2cd14>
 4a0:	3e924c4b 	cdpcc	12, 9, cr4, cr2, cr11, {2}
 4a4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 4a8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 4ac:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 4b0:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 4b4:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 4b8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 4bc:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 4c0:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 4c4:	0602212f 	streq	r2, [r2], -pc, lsr #2
 4c8:	Address 0x000004c8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	20554e47 	subscs	r4, r5, r7, asr #28
  10:	20393943 	eorscs	r3, r9, r3, asr #18
  14:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  18:	30322031 	eorscc	r2, r2, r1, lsr r0
  1c:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  20:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  24:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  28:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  2c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  30:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  34:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  38:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  3c:	6172622d 	cmnvs	r2, sp, lsr #4
  40:	2068636e 	rsbcs	r6, r8, lr, ror #6
  44:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  48:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  4c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  50:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  54:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  58:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  70:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  74:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  78:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  7c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  80:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  84:	616d2d20 	cmnvs	sp, r0, lsr #26
  88:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  8c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  90:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  94:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  98:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  9c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  a0:	00393963 	eorseq	r3, r9, r3, ror #18
  a4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff669 <a+0xdfffd1b9>
  a8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  ac:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
  b0:	442f6169 	strtmi	r6, [pc], #-361	; b8 <startup-0x1fffff48>
  b4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  b8:	73746e65 	cmnvc	r4, #1616	; 0x650
  bc:	2f54492f 	svccs	0x0054492f
  c0:	2f504f4d 	svccs	0x00504f4d
  c4:	2f504f4d 	svccs	0x00504f4d
  c8:	6b616e73 	blvs	185ba9c <startup-0x1e7a4564>
  cc:	65642f65 	strbvs	r2, [r4, #-3941]!	; 0xfffff09b
  d0:	2e79616c 	rpwcsez	f6, f1, #4.0
  d4:	74630063 	strbtvc	r0, [r3], #-99	; 0xffffff9d
  d8:	43006c72 	movwmi	r6, #3186	; 0xc72
  dc:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  e0:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  e4:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
  e8:	6f445c61 	svcvs	0x00445c61
  ec:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  f0:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  f4:	4d5c5449 	cfldrdmi	mvd5, [ip, #-292]	; 0xfffffedc
  f8:	4d5c504f 	ldclmi	0, cr5, [ip, #-316]	; 0xfffffec4
  fc:	735c504f 	cmpvc	ip, #79	; 0x4f
 100:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 104:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 108:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 10c:	736e3035 	cmnvc	lr, #53	; 0x35
 110:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 114:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff7bb <a+0xdfffd30b>
 118:	736e3030 	cmnvc	lr, #48	; 0x30
 11c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 120:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 66 <startup-0x1fffff9a>	; <UNPREDICTABLE>
 124:	6f726369 	svcvs	0x00726369
 128:	736e7500 	cmnvc	lr, #0, 10
 12c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 130:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 134:	73007261 	movwvc	r7, #609	; 0x261
 138:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 13c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 140:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 144:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 148:	47500074 			; <UNDEFINED> instruction: 0x47500074
 14c:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 150:	00595254 	subseq	r5, r9, r4, asr r2
 154:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 158:	00707574 	rsbseq	r7, r0, r4, ror r5
 15c:	616e5370 	smcvs	58672	; 0xe530
 160:	6556656b 	ldrbvs	r6, [r6, #-1387]	; 0xfffffa95
 164:	3a430063 	bcc	10c02f8 <startup-0x1ef3fd08>
 168:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 16c:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; ffffffac <a+0xdfffdafc>
 170:	61697261 	cmnvs	r9, r1, ror #4
 174:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 178:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 17c:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 180:	4f4d2f54 	svcmi	0x004d2f54
 184:	4f4d2f50 	svcmi	0x004d2f50
 188:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 18c:	2f656b61 	svccs	0x00656b61
 190:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 194:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 198:	72640063 	rsbvc	r0, r4, #99	; 0x63
 19c:	73007761 	movwvc	r7, #1889	; 0x761
 1a0:	6f5f7465 	svcvs	0x005f7465
 1a4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1a8:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 1ac:	00646565 	rsbeq	r6, r4, r5, ror #10
 1b0:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 1b4:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
 1b8:	00726570 	rsbseq	r6, r2, r0, ror r5
 1bc:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 1c0:	6a626f5f 	bvs	189bf44 <startup-0x1e7640bc>
 1c4:	00746365 	rsbseq	r6, r4, r5, ror #6
 1c8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1cc:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
 1d0:	006c6961 	rsbeq	r6, ip, r1, ror #18
 1d4:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 1d8:	00686769 	rsbeq	r6, r8, r9, ror #14
 1dc:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 1e0:	5000746e 	andpl	r7, r0, lr, ror #8
 1e4:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 1e8:	72646f00 	rsbvc	r6, r4, #0, 30
 1ec:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 1f0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 1f4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 1f8:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 1fc:	70006465 	andvc	r6, r0, r5, ror #8
 200:	0078736f 	rsbseq	r7, r8, pc, ror #6
 204:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 208:	6c616200 	sfmvs	f6, 2, [r1], #-0
 20c:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 210:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 214:	65007972 	strvs	r7, [r0, #-2418]	; 0xfffff68e
 218:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
 21c:	74786500 	ldrbtvc	r6, [r8], #-1280	; 0xfffffb00
 220:	5f646e65 	svcpl	0x00646e65
 224:	6b616e73 	blvs	185bbf8 <startup-0x1e7a4408>
 228:	50470065 	subpl	r0, r7, r5, rrx
 22c:	73004f49 	movwvc	r4, #3913	; 0xf49
 230:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 234:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 238:	73006874 	movwvc	r6, #2164	; 0x874
 23c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 240:	64690079 	strbtvs	r0, [r9], #-121	; 0xffffff87
 244:	73655272 	cmnvc	r5, #536870919	; 0x20000007
 248:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 24c:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
 250:	615f7469 	cmpvs	pc, r9, ror #8
 254:	6f007070 	svcvs	0x00007070
 258:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
 25c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 260:	69640064 	stmdbvs	r4!, {r2, r5, r6}^
 264:	6b007972 	blvs	1e834 <startup-0x1ffe17cc>
 268:	00627965 	rsbeq	r7, r2, r5, ror #18
 26c:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 270:	616d0072 	smcvs	53250	; 0xd002
 274:	73006e69 	movwvc	r6, #3689	; 0xe69
 278:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 27c:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 280:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 284:	75007972 	strvc	r7, [r0, #-2418]	; 0xfffff68e
 288:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 28c:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 290:	4f656d61 	svcmi	0x00656d61
 294:	00726576 	rsbseq	r6, r2, r6, ror r5
 298:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 29c:	7300776f 	movwvc	r7, #1903	; 0x76f
 2a0:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 2a4:	616e7300 	cmnvs	lr, r0, lsl #6
 2a8:	6556656b 	ldrbvs	r6, [r6, #-1387]	; 0xfffffa95
 2ac:	64690063 	strbtvs	r0, [r9], #-99	; 0xffffff9d
 2b0:	67694872 			; <UNDEFINED> instruction: 0x67694872
 2b4:	6f630068 	svcvs	0x00630068
 2b8:	73696c6c 	cmnvc	r9, #108, 24	; 0x6c00
 2bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 2c0:	746f6974 	strbtvc	r6, [pc], #-2420	; 2c8 <startup-0x1ffffd38>
 2c4:	6f006c61 	svcvs	0x00006c61
 2c8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2cc:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
 2d0:	6f4c7264 	svcvs	0x004c7264
 2d4:	6d730077 	ldclvs	0, cr0, [r3, #-476]!	; 0xfffffe24
 2d8:	0065766f 	rsbeq	r7, r5, pc, ror #12
 2dc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 2e0:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2e8 <startup-0x1ffffd18>
 2e4:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 2e8:	5f323374 	svcpl	0x00323374
 2ec:	4f740074 	svcmi	0x00740074
 2f0:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
 2f4:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 2f8:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 2fc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 300:	61007374 	tstvs	r0, r4, ror r3
 304:	656c7070 	strbvs	r7, [ip, #-112]!	; 0xffffff90
 308:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 30c:	00786465 	rsbseq	r6, r8, r5, ror #8
 310:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 314:	616e735f 	cmnvs	lr, pc, asr r3
 318:	5000656b 	andpl	r6, r0, fp, ror #10
 31c:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 320:	79005443 	stmdbvc	r0, {r0, r1, r6, sl, ip, lr}
 324:	6f6f635f 	svcvs	0x006f635f
 328:	73006472 	movwvc	r6, #1138	; 0x472
 32c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 330:	6f635f74 	svcvs	0x00635f74
 334:	6f72746e 	svcvs	0x0072746e
 338:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 33c:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 340:	64006c65 	strvs	r6, [r0], #-3173	; 0xfffff39b
 344:	5f776172 	svcpl	0x00776172
 348:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 34c:	70007463 	andvc	r7, r0, r3, ror #8
 350:	00656761 	rsbeq	r6, r5, r1, ror #14
 354:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff919 <a+0xdfffd469>
 358:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 35c:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 360:	442f6169 	strtmi	r6, [pc], #-361	; 368 <startup-0x1ffffc98>
 364:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 368:	73746e65 	cmnvc	r4, #1616	; 0x650
 36c:	2f54492f 	svccs	0x0054492f
 370:	2f504f4d 	svccs	0x00504f4d
 374:	2f504f4d 	svccs	0x00504f4d
 378:	6b616e73 	blvs	185bd4c <startup-0x1e7a42b4>
 37c:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 380:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 384:	00632e63 	rsbeq	r2, r3, r3, ror #28
 388:	70617267 	rsbvc	r7, r1, r7, ror #4
 38c:	5f636968 	svcpl	0x00636968
 390:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 394:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 398:	72670061 	rsbvc	r0, r7, #97	; 0x61
 39c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3a0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 3a4:	00657469 	rsbeq	r7, r5, r9, ror #8
 3a8:	70617267 	rsbvc	r7, r1, r7, ror #4
 3ac:	5f636968 	svcpl	0x00636968
 3b0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 3b4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 3b8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 3bc:	67007261 	strvs	r7, [r0, -r1, ror #4]
 3c0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3c4:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 3c8:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 3cc:	7a696c61 	bvc	1a5b558 <startup-0x1e5a4aa8>
 3d0:	72670065 	rsbvc	r0, r7, #101	; 0x65
 3d4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3d8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 3dc:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 3e0:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 3e4:	63007465 	movwvs	r7, #1125	; 0x465
 3e8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 3ec:	6a626f5f 	bvs	189c170 <startup-0x1e763e90>
 3f0:	00746365 	rsbseq	r6, r4, r5, ror #6
 3f4:	6b73616d 	blvs	1cd89b0 <startup-0x1e327650>
 3f8:	6c617600 	stclvs	6, cr7, [r1], #-0
 3fc:	67006575 	smlsdxvs	r0, r5, r5, r6
 400:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 404:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 408:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 40c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 410:	72670061 	rsbvc	r0, r7, #97	; 0x61
 414:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 418:	61775f63 	cmnvs	r7, r3, ror #30
 41c:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 420:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 424:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 428:	67007865 	strvs	r7, [r0, -r5, ror #16]
 42c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 430:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 434:	00646165 	rsbeq	r6, r4, r5, ror #2
 438:	6f635f78 	svcvs	0x00635f78
 43c:	0064726f 	rsbeq	r7, r4, pc, ror #4
 440:	70617267 	rsbvc	r7, r1, r7, ror #4
 444:	5f636968 	svcpl	0x00636968
 448:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 44c:	6f635f65 	svcvs	0x00635f65
 450:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 454:	72670064 	rsbvc	r0, r7, #100	; 0x64
 458:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 45c:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 460:	5f726165 	svcpl	0x00726165
 464:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 468:	43006e65 	movwmi	r6, #3685	; 0xe65
 46c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 470:	2f737265 	svccs	0x00737265
 474:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
 478:	6f442f61 	svcvs	0x00442f61
 47c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 480:	2f73746e 	svccs	0x0073746e
 484:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; 368 <startup-0x1ffffc98>
 488:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 354 <startup-0x1ffffcac>
 48c:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
 490:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 494:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
 498:	73746375 	cmnvc	r4, #-738197503	; 0xd4000001
 49c:	6100632e 	tstvs	r0, lr, lsr #6
 4a0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4a4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 4a8:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 4ac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 4b0:	00726165 	rsbseq	r6, r2, r5, ror #2
 4b4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4b8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 4bc:	5f657469 	svcpl	0x00657469
 4c0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 4c4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 4c8:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
 4cc:	00657479 	rsbeq	r7, r5, r9, ror r4
 4d0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4d4:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 4d8:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 4dc:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 4e0:	61007465 	tstvs	r0, r5, ror #8
 4e4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4e8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4ec:	645f6574 	ldrbvs	r6, [pc], #-1396	; 4f4 <startup-0x1ffffb0c>
 4f0:	00617461 	rsbeq	r7, r1, r1, ror #8
 4f4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4f8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 4fc:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 500:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 504:	73610073 	cmnvc	r1, #115	; 0x73
 508:	5f696963 	svcpl	0x00696963
 50c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 510:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 514:	61007261 	tstvs	r0, r1, ror #4
 518:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 51c:	6165725f 	cmnvs	r5, pc, asr r2
 520:	61645f64 	cmnvs	r4, r4, ror #30
 524:	61006174 	tstvs	r0, r4, ror r1
 528:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 52c:	6165725f 	cmnvs	r5, pc, asr r2
 530:	6f635f64 	svcvs	0x00635f64
 534:	6f72746e 	svcvs	0x0072746e
 538:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 53c:	63736100 	cmnvs	r3, #0, 2
 540:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 544:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 548:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 54c:	63736100 	cmnvs	r3, #0, 2
 550:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 554:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 558:	64610079 	strbtvs	r0, [r1], #-121	; 0xffffff87
 55c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 560:	2f3a4300 	svccs	0x003a4300
 564:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 568:	614d2f73 	hvcvs	54003	; 0xd2f3
 56c:	2f616972 	svccs	0x00616972
 570:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 574:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 578:	54492f73 	strbpl	r2, [r9], #-3955	; 0xfffff08d
 57c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 580:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 584:	616e732f 	cmnvs	lr, pc, lsr #6
 588:	612f656b 			; <UNDEFINED> instruction: 0x612f656b
 58c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 590:	6100632e 	tstvs	r0, lr, lsr #6
 594:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 598:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 59c:	3a430074 	bcc	10c0774 <startup-0x1ef3f88c>
 5a0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 5a4:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 3e4 <startup-0x1ffffc1c>
 5a8:	61697261 	cmnvs	r9, r1, ror #4
 5ac:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 5b0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 5b4:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 5b8:	4f4d2f54 	svcmi	0x004d2f54
 5bc:	4f4d2f50 	svcmi	0x004d2f50
 5c0:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 5c4:	2f656b61 	svccs	0x00656b61
 5c8:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 5cc:	6b00632e 	blvs	1928c <startup-0x1ffe6d74>
 5d0:	65476462 	strbvs	r6, [r7, #-1122]	; 0xfffffb9e
 5d4:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; 40c <startup-0x1ffffbf4>
 5d8:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
 5dc:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 5e0:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <a+0xdfffce5e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	0000001e 	andeq	r0, r0, lr, lsl r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000002e 	andcs	r0, r0, lr, lsr #32
  3c:	0000001e 	andeq	r0, r0, lr, lsl r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000004c 	andcs	r0, r0, ip, asr #32
  5c:	00000054 	andeq	r0, r0, r4, asr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000a0 	andcs	r0, r0, r0, lsr #1
  7c:	0000000a 	andeq	r0, r0, sl
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000000c 	andeq	r0, r0, ip
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	20000000 	andcs	r0, r0, r0
  a8:	0000000c 	andeq	r0, r0, ip
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	0000008c 	andeq	r0, r0, ip, lsl #1
  b4:	200000ac 	andcs	r0, r0, ip, lsr #1
  b8:	00000038 	andeq	r0, r0, r8, lsr r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	180e4101 	stmdane	lr, {r0, r8, lr}
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	0000008c 	andeq	r0, r0, ip, lsl #1
  d4:	200000e4 	andcs	r0, r0, r4, ror #1
  d8:	00000088 	andeq	r0, r0, r8, lsl #1
  dc:	40080e41 	andmi	r0, r8, r1, asr #28
  e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e4:	100e4101 	andne	r4, lr, r1, lsl #2
  e8:	00070d41 	andeq	r0, r7, r1, asr #26
  ec:	00000018 	andeq	r0, r0, r8, lsl r0
  f0:	0000008c 	andeq	r0, r0, ip, lsl #1
  f4:	2000016c 	andcs	r0, r0, ip, ror #2
  f8:	00000038 	andeq	r0, r0, r8, lsr r0
  fc:	40080e41 	andmi	r0, r8, r1, asr #28
 100:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 104:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 108:	00000020 	andeq	r0, r0, r0, lsr #32
 10c:	0000008c 	andeq	r0, r0, ip, lsl #1
 110:	200001a4 	andcs	r0, r0, r4, lsr #3
 114:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 118:	400c0e41 	andmi	r0, ip, r1, asr #28
 11c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 120:	018e4002 	orreq	r4, lr, r2
 124:	41300e41 	teqmi	r0, r1, asr #28
 128:	0000070d 	andeq	r0, r0, sp, lsl #14
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	0000008c 	andeq	r0, r0, ip, lsl #1
 134:	20000374 	andcs	r0, r0, r4, ror r3
 138:	00000064 	andeq	r0, r0, r4, rrx
 13c:	40080e41 	andmi	r0, r8, r1, asr #28
 140:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 144:	180e4101 	stmdane	lr, {r0, r8, lr}
 148:	00070d41 	andeq	r0, r7, r1, asr #26
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000008c 	andeq	r0, r0, ip, lsl #1
 154:	200003d8 	ldrdcs	r0, [r0], -r8
 158:	00000038 	andeq	r0, r0, r8, lsr r0
 15c:	40080e41 	andmi	r0, r8, r1, asr #28
 160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 164:	100e4101 	andne	r4, lr, r1, lsl #2
 168:	00070d41 	andeq	r0, r7, r1, asr #26
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000008c 	andeq	r0, r0, ip, lsl #1
 174:	20000410 	andcs	r0, r0, r0, lsl r4
 178:	00000064 	andeq	r0, r0, r4, rrx
 17c:	40080e41 	andmi	r0, r8, r1, asr #28
 180:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 184:	100e4101 	andne	r4, lr, r1, lsl #2
 188:	00070d41 	andeq	r0, r7, r1, asr #26
 18c:	00000020 	andeq	r0, r0, r0, lsr #32
 190:	0000008c 	andeq	r0, r0, ip, lsl #1
 194:	20000474 	andcs	r0, r0, r4, ror r4
 198:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 19c:	400c0e41 	andmi	r0, ip, r1, asr #28
 1a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1a4:	018e4002 	orreq	r4, lr, r2
 1a8:	41300e41 	teqmi	r0, r1, asr #28
 1ac:	0000070d 	andeq	r0, r0, sp, lsl #14
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 1c8:	20000630 	andcs	r0, r0, r0, lsr r6
 1cc:	0000006c 	andeq	r0, r0, ip, rrx
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	100e4101 	andne	r4, lr, r1, lsl #2
 1dc:	00070d41 	andeq	r0, r7, r1, asr #26
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 1e8:	2000069c 	mulcs	r0, ip, r6
 1ec:	00000090 	muleq	r0, r0, r0
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1fc:	00070d41 	andeq	r0, r7, r1, asr #26
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 208:	2000072c 	andcs	r0, r0, ip, lsr #14
 20c:	00000080 	andeq	r0, r0, r0, lsl #1
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	100e4101 	andne	r4, lr, r1, lsl #2
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 228:	200007ac 	andcs	r0, r0, ip, lsr #15
 22c:	00000040 	andeq	r0, r0, r0, asr #32
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	100e4101 	andne	r4, lr, r1, lsl #2
 23c:	00070d41 	andeq	r0, r7, r1, asr #26
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 248:	200007ec 	andcs	r0, r0, ip, ror #15
 24c:	00000046 	andeq	r0, r0, r6, asr #32
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	100e4101 	andne	r4, lr, r1, lsl #2
 25c:	00070d41 	andeq	r0, r7, r1, asr #26
 260:	0000001c 	andeq	r0, r0, ip, lsl r0
 264:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 268:	20000832 	andcs	r0, r0, r2, lsr r8
 26c:	0000002a 	andeq	r0, r0, sl, lsr #32
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	100e4101 	andne	r4, lr, r1, lsl #2
 27c:	00070d41 	andeq	r0, r7, r1, asr #26
 280:	0000001c 	andeq	r0, r0, ip, lsl r0
 284:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 288:	2000085c 	andcs	r0, r0, ip, asr r8
 28c:	00000044 	andeq	r0, r0, r4, asr #32
 290:	40080e41 	andmi	r0, r8, r1, asr #28
 294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 298:	180e4101 	stmdane	lr, {r0, r8, lr}
 29c:	00070d41 	andeq	r0, r7, r1, asr #26
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 2a8:	200008a0 	andcs	r0, r0, r0, lsr #17
 2ac:	00000048 	andeq	r0, r0, r8, asr #32
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2bc:	00070d41 	andeq	r0, r7, r1, asr #26
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 2c8:	200008e8 	andcs	r0, r0, r8, ror #17
 2cc:	0000005a 	andeq	r0, r0, sl, asr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	100e4101 	andne	r4, lr, r1, lsl #2
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	00000018 	andeq	r0, r0, r8, lsl r0
 2e4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 2e8:	20000942 	andcs	r0, r0, r2, asr #18
 2ec:	0000005c 	andeq	r0, r0, ip, asr r0
 2f0:	40080e41 	andmi	r0, r8, r1, asr #28
 2f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 304:	2000099e 	mulcs	r0, lr, r9
 308:	00000056 	andeq	r0, r0, r6, asr r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	100e4101 	andne	r4, lr, r1, lsl #2
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	00000024 	andeq	r0, r0, r4, lsr #32
 320:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 324:	200009f4 	strdcs	r0, [r0], -r4
 328:	00000194 	muleq	r0, r4, r1
 32c:	40100e41 	andsmi	r0, r0, r1, asr #28
 330:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 334:	02874003 	addeq	r4, r7, #3
 338:	41018e40 	tstmi	r1, r0, asr #28
 33c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	00000024 	andeq	r0, r0, r4, lsr #32
 348:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 34c:	20000b88 	andcs	r0, r0, r8, lsl #23
 350:	00000092 	muleq	r0, r2, r0
 354:	40100e41 	andsmi	r0, r0, r1, asr #28
 358:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 35c:	02874003 	addeq	r4, r7, #3
 360:	41018e40 	tstmi	r1, r0, asr #28
 364:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 368:	00000007 	andeq	r0, r0, r7
 36c:	00000024 	andeq	r0, r0, r4, lsr #32
 370:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 374:	20000c1a 	andcs	r0, r0, sl, lsl ip
 378:	00000092 	muleq	r0, r2, r0
 37c:	40100e41 	andsmi	r0, r0, r1, asr #28
 380:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 384:	02874003 	addeq	r4, r7, #3
 388:	41018e40 	tstmi	r1, r0, asr #28
 38c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 390:	00000007 	andeq	r0, r0, r7
 394:	0000000c 	andeq	r0, r0, ip
 398:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 39c:	7c020001 	stcvc	0, cr0, [r2], {1}
 3a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	00000394 	muleq	r0, r4, r3
 3ac:	20000cac 	andcs	r0, r0, ip, lsr #25
 3b0:	00000044 	andeq	r0, r0, r4, asr #32
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c0:	00070d41 	andeq	r0, r7, r1, asr #26
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	00000394 	muleq	r0, r4, r3
 3cc:	20000cf0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3d0:	00000048 	andeq	r0, r0, r8, asr #32
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	00000394 	muleq	r0, r4, r3
 3ec:	20000d38 	andcs	r0, r0, r8, lsr sp
 3f0:	00000030 	andeq	r0, r0, r0, lsr r0
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	100e4101 	andne	r4, lr, r1, lsl #2
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	00000394 	muleq	r0, r4, r3
 40c:	20000d68 	andcs	r0, r0, r8, ror #26
 410:	00000034 	andeq	r0, r0, r4, lsr r0
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	100e4101 	andne	r4, lr, r1, lsl #2
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	00000394 	muleq	r0, r4, r3
 42c:	20000d9c 	mulcs	r0, ip, sp
 430:	0000002a 	andeq	r0, r0, sl, lsr #32
 434:	40080e41 	andmi	r0, r8, r1, asr #28
 438:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 43c:	100e4101 	andne	r4, lr, r1, lsl #2
 440:	00070d41 	andeq	r0, r7, r1, asr #26
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000394 	muleq	r0, r4, r3
 44c:	20000dc6 	andcs	r0, r0, r6, asr #27
 450:	0000002a 	andeq	r0, r0, sl, lsr #32
 454:	40080e41 	andmi	r0, r8, r1, asr #28
 458:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 45c:	100e4101 	andne	r4, lr, r1, lsl #2
 460:	00070d41 	andeq	r0, r7, r1, asr #26
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000394 	muleq	r0, r4, r3
 46c:	20000df0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 470:	0000004c 	andeq	r0, r0, ip, asr #32
 474:	400c0e41 	andmi	r0, ip, r1, asr #28
 478:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 47c:	018e4002 	orreq	r4, lr, r2
 480:	41180e41 	tstmi	r8, r1, asr #28
 484:	0000070d 	andeq	r0, r0, sp, lsl #14
 488:	00000020 	andeq	r0, r0, r0, lsr #32
 48c:	00000394 	muleq	r0, r4, r3
 490:	20000e3c 	andcs	r0, r0, ip, lsr lr
 494:	0000004c 	andeq	r0, r0, ip, asr #32
 498:	400c0e41 	andmi	r0, ip, r1, asr #28
 49c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4a0:	018e4002 	orreq	r4, lr, r2
 4a4:	41180e41 	tstmi	r8, r1, asr #28
 4a8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000394 	muleq	r0, r4, r3
 4b4:	20000e88 	andcs	r0, r0, r8, lsl #29
 4b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000394 	muleq	r0, r4, r3
 4d4:	20000ec4 	andcs	r0, r0, r4, asr #29
 4d8:	00000036 	andeq	r0, r0, r6, lsr r0
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	00000018 	andeq	r0, r0, r8, lsl r0
 4f0:	00000394 	muleq	r0, r4, r3
 4f4:	20000efa 	strdcs	r0, [r0], -sl
 4f8:	0000009a 	muleq	r0, sl, r0
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 508:	0000000c 	andeq	r0, r0, ip
 50c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 510:	7c020001 	stcvc	0, cr0, [r2], {1}
 514:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 518:	00000020 	andeq	r0, r0, r0, lsr #32
 51c:	00000508 	andeq	r0, r0, r8, lsl #10
 520:	20000f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
 524:	00000068 	andeq	r0, r0, r8, rrx
 528:	400c0e41 	andmi	r0, ip, r1, asr #28
 52c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 530:	018e4002 	orreq	r4, lr, r2
 534:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 538:	0000070d 	andeq	r0, r0, sp, lsl #14
 53c:	0000001c 	andeq	r0, r0, ip, lsl r0
 540:	00000508 	andeq	r0, r0, r8, lsl #10
 544:	20000ffc 	strdcs	r0, [r0], -ip
 548:	00000054 	andeq	r0, r0, r4, asr r0
 54c:	40080e41 	andmi	r0, r8, r1, asr #28
 550:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 554:	100e4101 	andne	r4, lr, r1, lsl #2
 558:	00070d41 	andeq	r0, r7, r1, asr #26
 55c:	0000001c 	andeq	r0, r0, ip, lsl r0
 560:	00000508 	andeq	r0, r0, r8, lsl #10
 564:	20001050 	andcs	r1, r0, r0, asr r0
 568:	00000054 	andeq	r0, r0, r4, asr r0
 56c:	40080e41 	andmi	r0, r8, r1, asr #28
 570:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 574:	100e4101 	andne	r4, lr, r1, lsl #2
 578:	00070d41 	andeq	r0, r7, r1, asr #26
 57c:	0000000c 	andeq	r0, r0, ip
 580:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 584:	7c010001 	stcvc	0, cr0, [r1], {1}
 588:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 58c:	0000000c 	andeq	r0, r0, ip
 590:	0000057c 	andeq	r0, r0, ip, ror r5
 594:	200010a5 	andcs	r1, r0, r5, lsr #1
 598:	000001cc 	andeq	r0, r0, ip, asr #3

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200000ac 	andcs	r0, r0, ip, lsr #1
   4:	20000630 	andcs	r0, r0, r0, lsr r6
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
