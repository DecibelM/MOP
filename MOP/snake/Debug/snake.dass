
./Debug/snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9d8 	bl	200003b8 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_milli>:
#include <delay.h>
#include <gpio.h>

void delay_milli(int ms)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
	while(ms > 0)
20000018:	e002      	b.n	20000020 <delay_milli+0x10>
	{
	#ifndef SIMULATOR
	delay_micro(1000);
	#endif
	ms--;
2000001a:	687b      	ldr	r3, [r7, #4]
2000001c:	3b01      	subs	r3, #1
2000001e:	607b      	str	r3, [r7, #4]
	while(ms > 0)
20000020:	687b      	ldr	r3, [r7, #4]
20000022:	2b00      	cmp	r3, #0
20000024:	dcf9      	bgt.n	2000001a <delay_milli+0xa>
	}
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	b002      	add	sp, #8
2000002c:	bd80      	pop	{r7, pc}

2000002e <delay_micro>:

void delay_micro(int us)
{
2000002e:	b580      	push	{r7, lr}
20000030:	b082      	sub	sp, #8
20000032:	af00      	add	r7, sp, #0
20000034:	6078      	str	r0, [r7, #4]
	while(us > 0)
20000036:	e002      	b.n	2000003e <delay_micro+0x10>
	delay_250ns();
	delay_250ns();
	delay_250ns();
	delay_250ns();
	#endif
	us--;
20000038:	687b      	ldr	r3, [r7, #4]
2000003a:	3b01      	subs	r3, #1
2000003c:	607b      	str	r3, [r7, #4]
	while(us > 0)
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	2b00      	cmp	r3, #0
20000042:	dcf9      	bgt.n	20000038 <delay_micro+0xa>
	}
}
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	46bd      	mov	sp, r7
20000048:	b002      	add	sp, #8
2000004a:	bd80      	pop	{r7, pc}

2000004c <delay_250ns>:

void delay_250ns(void)
{
2000004c:	b580      	push	{r7, lr}
2000004e:	b082      	sub	sp, #8
20000050:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <delay_250ns+0x48>)
20000054:	2200      	movs	r2, #0
20000056:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 0x29; //0x2A - 1
20000058:	4b0f      	ldr	r3, [pc, #60]	; (20000098 <delay_250ns+0x4c>)
2000005a:	2229      	movs	r2, #41	; 0x29
2000005c:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0x0;
2000005e:	4b0f      	ldr	r3, [pc, #60]	; (2000009c <delay_250ns+0x50>)
20000060:	2200      	movs	r2, #0
20000062:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000064:	4b0b      	ldr	r3, [pc, #44]	; (20000094 <delay_250ns+0x48>)
20000066:	2205      	movs	r2, #5
20000068:	601a      	str	r2, [r3, #0]
	unsigned int ctrl = *STK_CTRL & 0x10000;
2000006a:	4b0a      	ldr	r3, [pc, #40]	; (20000094 <delay_250ns+0x48>)
2000006c:	681a      	ldr	r2, [r3, #0]
2000006e:	2380      	movs	r3, #128	; 0x80
20000070:	025b      	lsls	r3, r3, #9
20000072:	4013      	ands	r3, r2
20000074:	607b      	str	r3, [r7, #4]
	while((*STK_CTRL & 0x10000) == 0);
20000076:	46c0      	nop			; (mov r8, r8)
20000078:	4b06      	ldr	r3, [pc, #24]	; (20000094 <delay_250ns+0x48>)
2000007a:	681a      	ldr	r2, [r3, #0]
2000007c:	2380      	movs	r3, #128	; 0x80
2000007e:	025b      	lsls	r3, r3, #9
20000080:	4013      	ands	r3, r2
20000082:	d0f9      	beq.n	20000078 <delay_250ns+0x2c>
	*STK_CTRL= 0;
20000084:	4b03      	ldr	r3, [pc, #12]	; (20000094 <delay_250ns+0x48>)
20000086:	2200      	movs	r2, #0
20000088:	601a      	str	r2, [r3, #0]
	
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	e000e010 	and	lr, r0, r0, lsl r0
20000098:	e000e014 	and	lr, r0, r4, lsl r0
2000009c:	e000e018 	and	lr, r0, r8, lsl r0

200000a0 <delay_500ns>:

void delay_500ns(void)
{
200000a0:	b580      	push	{r7, lr}
200000a2:	af00      	add	r7, sp, #0
	#ifndef SIMULATOR
	delay_250ns();
	delay_250ns();
	#endif
}
200000a4:	46c0      	nop			; (mov r8, r8)
200000a6:	46bd      	mov	sp, r7
200000a8:	bd80      	pop	{r7, pc}
200000aa:	46c0      	nop			; (mov r8, r8)

200000ac <set_object_speed>:

int snakeLength;
OBJECT snakeVec[100];
POBJECT pSnakeVec[100];

void set_object_speed(POBJECT o, int speedx, int speedy){
200000ac:	b580      	push	{r7, lr}
200000ae:	b084      	sub	sp, #16
200000b0:	af00      	add	r7, sp, #0
200000b2:	60f8      	str	r0, [r7, #12]
200000b4:	60b9      	str	r1, [r7, #8]
200000b6:	607a      	str	r2, [r7, #4]
	if(speedx != -o->dirx)
200000b8:	68fb      	ldr	r3, [r7, #12]
200000ba:	685b      	ldr	r3, [r3, #4]
200000bc:	425b      	negs	r3, r3
200000be:	68ba      	ldr	r2, [r7, #8]
200000c0:	429a      	cmp	r2, r3
200000c2:	d002      	beq.n	200000ca <set_object_speed+0x1e>
	{
		o->dirx = speedx;
200000c4:	68fb      	ldr	r3, [r7, #12]
200000c6:	68ba      	ldr	r2, [r7, #8]
200000c8:	605a      	str	r2, [r3, #4]
	}
	if(speedy != -o->diry){
200000ca:	68fb      	ldr	r3, [r7, #12]
200000cc:	689b      	ldr	r3, [r3, #8]
200000ce:	425b      	negs	r3, r3
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	429a      	cmp	r2, r3
200000d4:	d002      	beq.n	200000dc <set_object_speed+0x30>
		o->diry = speedy;
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	687a      	ldr	r2, [r7, #4]
200000da:	609a      	str	r2, [r3, #8]
	}
}
200000dc:	46c0      	nop			; (mov r8, r8)
200000de:	46bd      	mov	sp, r7
200000e0:	b004      	add	sp, #16
200000e2:	bd80      	pop	{r7, pc}

200000e4 <move_object>:

void move_object(POBJECT o){
200000e4:	b580      	push	{r7, lr}
200000e6:	b082      	sub	sp, #8
200000e8:	af00      	add	r7, sp, #0
200000ea:	6078      	str	r0, [r7, #4]
	//clear_object(o);
	o->posx += o->dirx;
200000ec:	687b      	ldr	r3, [r7, #4]
200000ee:	68da      	ldr	r2, [r3, #12]
200000f0:	687b      	ldr	r3, [r7, #4]
200000f2:	685b      	ldr	r3, [r3, #4]
200000f4:	18d2      	adds	r2, r2, r3
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	691a      	ldr	r2, [r3, #16]
200000fe:	687b      	ldr	r3, [r7, #4]
20000100:	689b      	ldr	r3, [r3, #8]
20000102:	18d2      	adds	r2, r2, r3
20000104:	687b      	ldr	r3, [r7, #4]
20000106:	611a      	str	r2, [r3, #16]
	
	if(o->posx <= 1){
20000108:	687b      	ldr	r3, [r7, #4]
2000010a:	68db      	ldr	r3, [r3, #12]
2000010c:	2b01      	cmp	r3, #1
2000010e:	dc06      	bgt.n	2000011e <move_object+0x3a>
		o->posx = 128 - o->geo->sizex;
20000110:	687b      	ldr	r3, [r7, #4]
20000112:	681b      	ldr	r3, [r3, #0]
20000114:	685b      	ldr	r3, [r3, #4]
20000116:	2280      	movs	r2, #128	; 0x80
20000118:	1ad2      	subs	r2, r2, r3
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	60da      	str	r2, [r3, #12]
	}
	if(o->posx > 128 - o->geo->sizex){
2000011e:	687b      	ldr	r3, [r7, #4]
20000120:	68da      	ldr	r2, [r3, #12]
20000122:	687b      	ldr	r3, [r7, #4]
20000124:	681b      	ldr	r3, [r3, #0]
20000126:	685b      	ldr	r3, [r3, #4]
20000128:	2180      	movs	r1, #128	; 0x80
2000012a:	1acb      	subs	r3, r1, r3
2000012c:	429a      	cmp	r2, r3
2000012e:	dd02      	ble.n	20000136 <move_object+0x52>
		o->posx = 1;
20000130:	687b      	ldr	r3, [r7, #4]
20000132:	2201      	movs	r2, #1
20000134:	60da      	str	r2, [r3, #12]
	}
	if(o->posy <= 1){
20000136:	687b      	ldr	r3, [r7, #4]
20000138:	691b      	ldr	r3, [r3, #16]
2000013a:	2b01      	cmp	r3, #1
2000013c:	dc06      	bgt.n	2000014c <move_object+0x68>
		o->posy = 64 - o->geo->sizey;
2000013e:	687b      	ldr	r3, [r7, #4]
20000140:	681b      	ldr	r3, [r3, #0]
20000142:	689b      	ldr	r3, [r3, #8]
20000144:	2240      	movs	r2, #64	; 0x40
20000146:	1ad2      	subs	r2, r2, r3
20000148:	687b      	ldr	r3, [r7, #4]
2000014a:	611a      	str	r2, [r3, #16]
	}
	if(o->posy > 64 - o->geo->sizey){
2000014c:	687b      	ldr	r3, [r7, #4]
2000014e:	691a      	ldr	r2, [r3, #16]
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	681b      	ldr	r3, [r3, #0]
20000154:	689b      	ldr	r3, [r3, #8]
20000156:	2140      	movs	r1, #64	; 0x40
20000158:	1acb      	subs	r3, r1, r3
2000015a:	429a      	cmp	r2, r3
2000015c:	dd02      	ble.n	20000164 <move_object+0x80>
		o->posy = 1 ;
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	2201      	movs	r2, #1
20000162:	611a      	str	r2, [r3, #16]
	}
	//draw_object(o);
}
20000164:	46c0      	nop			; (mov r8, r8)
20000166:	46bd      	mov	sp, r7
20000168:	b002      	add	sp, #8
2000016a:	bd80      	pop	{r7, pc}

2000016c <init_app>:
move_object,
set_object_speed};


void init_app(void)
{
2000016c:	b580      	push	{r7, lr}
2000016e:	af00      	add	r7, sp, #0
	#ifdef USBDM
	*((unsigned long*) 0x40023830) = 0x18;
	__asm volatile("LDR R0,=0x08000209\n BLX R0\n");
	#endif
	
	GPIO_D.moder= 0x55005555;
20000170:	4b08      	ldr	r3, [pc, #32]	; (20000194 <init_app+0x28>)
20000172:	4a09      	ldr	r2, [pc, #36]	; (20000198 <init_app+0x2c>)
20000174:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper = 0x0100;
20000176:	4b07      	ldr	r3, [pc, #28]	; (20000194 <init_app+0x28>)
20000178:	2280      	movs	r2, #128	; 0x80
2000017a:	0052      	lsls	r2, r2, #1
2000017c:	809a      	strh	r2, [r3, #4]
	GPIO_D.pupdr = 0x00AA0000;
2000017e:	4b05      	ldr	r3, [pc, #20]	; (20000194 <init_app+0x28>)
20000180:	22aa      	movs	r2, #170	; 0xaa
20000182:	0412      	lsls	r2, r2, #16
20000184:	60da      	str	r2, [r3, #12]
	GPIO_E.moder = 0x55555555;
20000186:	4b05      	ldr	r3, [pc, #20]	; (2000019c <init_app+0x30>)
20000188:	4a05      	ldr	r2, [pc, #20]	; (200001a0 <init_app+0x34>)
2000018a:	601a      	str	r2, [r3, #0]
}
2000018c:	46c0      	nop			; (mov r8, r8)
2000018e:	46bd      	mov	sp, r7
20000190:	bd80      	pop	{r7, pc}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	40020c00 	andmi	r0, r2, r0, lsl #24
20000198:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
2000019c:	40021000 	andmi	r1, r2, r0
200001a0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001a4 <collision>:
int points =0;
char *s;
char string[] = "Points";

void collision(POBJECT pSnakeVec[], POBJECT a)
{
200001a4:	b590      	push	{r4, r7, lr}
200001a6:	b089      	sub	sp, #36	; 0x24
200001a8:	af00      	add	r7, sp, #0
200001aa:	6078      	str	r0, [r7, #4]
200001ac:	6039      	str	r1, [r7, #0]
	POBJECT p = pSnakeVec[0];
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	681b      	ldr	r3, [r3, #0]
200001b2:	61fb      	str	r3, [r7, #28]
	if(p->posx +4 >= a->posx & p->posx <= a->posx + 4)
200001b4:	69fb      	ldr	r3, [r7, #28]
200001b6:	68db      	ldr	r3, [r3, #12]
200001b8:	1d1a      	adds	r2, r3, #4
200001ba:	683b      	ldr	r3, [r7, #0]
200001bc:	68db      	ldr	r3, [r3, #12]
200001be:	17d0      	asrs	r0, r2, #31
200001c0:	0fd9      	lsrs	r1, r3, #31
200001c2:	429a      	cmp	r2, r3
200001c4:	4148      	adcs	r0, r1
200001c6:	0003      	movs	r3, r0
200001c8:	b2d9      	uxtb	r1, r3
200001ca:	69fb      	ldr	r3, [r7, #28]
200001cc:	68db      	ldr	r3, [r3, #12]
200001ce:	683a      	ldr	r2, [r7, #0]
200001d0:	68d2      	ldr	r2, [r2, #12]
200001d2:	3204      	adds	r2, #4
200001d4:	0fdc      	lsrs	r4, r3, #31
200001d6:	17d0      	asrs	r0, r2, #31
200001d8:	429a      	cmp	r2, r3
200001da:	4144      	adcs	r4, r0
200001dc:	0023      	movs	r3, r4
200001de:	b2db      	uxtb	r3, r3
200001e0:	400b      	ands	r3, r1
200001e2:	b2db      	uxtb	r3, r3
200001e4:	2b00      	cmp	r3, #0
200001e6:	d100      	bne.n	200001ea <collision+0x46>
200001e8:	e088      	b.n	200002fc <collision+0x158>
	{
		if(p->posy +4 >= a->posy & p->posy <= a->posy + 4)
200001ea:	69fb      	ldr	r3, [r7, #28]
200001ec:	691b      	ldr	r3, [r3, #16]
200001ee:	1d1a      	adds	r2, r3, #4
200001f0:	683b      	ldr	r3, [r7, #0]
200001f2:	691b      	ldr	r3, [r3, #16]
200001f4:	17d0      	asrs	r0, r2, #31
200001f6:	0fd9      	lsrs	r1, r3, #31
200001f8:	429a      	cmp	r2, r3
200001fa:	4148      	adcs	r0, r1
200001fc:	0003      	movs	r3, r0
200001fe:	b2d9      	uxtb	r1, r3
20000200:	69fb      	ldr	r3, [r7, #28]
20000202:	691b      	ldr	r3, [r3, #16]
20000204:	683a      	ldr	r2, [r7, #0]
20000206:	6912      	ldr	r2, [r2, #16]
20000208:	3204      	adds	r2, #4
2000020a:	0fdc      	lsrs	r4, r3, #31
2000020c:	17d0      	asrs	r0, r2, #31
2000020e:	429a      	cmp	r2, r3
20000210:	4144      	adcs	r4, r0
20000212:	0023      	movs	r3, r4
20000214:	b2db      	uxtb	r3, r3
20000216:	400b      	ands	r3, r1
20000218:	b2db      	uxtb	r3, r3
2000021a:	2b00      	cmp	r3, #0
2000021c:	d06e      	beq.n	200002fc <collision+0x158>
		{
			clear_object(a);
2000021e:	683b      	ldr	r3, [r7, #0]
20000220:	0018      	movs	r0, r3
20000222:	f000 fc66 	bl	20000af2 <clear_object>
			points++;
20000226:	4b37      	ldr	r3, [pc, #220]	; (20000304 <collision+0x160>)
20000228:	681b      	ldr	r3, [r3, #0]
2000022a:	1c5a      	adds	r2, r3, #1
2000022c:	4b35      	ldr	r3, [pc, #212]	; (20000304 <collision+0x160>)
2000022e:	601a      	str	r2, [r3, #0]
			POBJECT x = pSnakeVec[snakeLength-1];
20000230:	4b35      	ldr	r3, [pc, #212]	; (20000308 <collision+0x164>)
20000232:	681b      	ldr	r3, [r3, #0]
20000234:	4a35      	ldr	r2, [pc, #212]	; (2000030c <collision+0x168>)
20000236:	4694      	mov	ip, r2
20000238:	4463      	add	r3, ip
2000023a:	009b      	lsls	r3, r3, #2
2000023c:	687a      	ldr	r2, [r7, #4]
2000023e:	18d3      	adds	r3, r2, r3
20000240:	681b      	ldr	r3, [r3, #0]
20000242:	61bb      	str	r3, [r7, #24]
			POBJECT y = &snakeVec[snakeLength];
20000244:	4b30      	ldr	r3, [pc, #192]	; (20000308 <collision+0x164>)
20000246:	681a      	ldr	r2, [r3, #0]
20000248:	0013      	movs	r3, r2
2000024a:	009b      	lsls	r3, r3, #2
2000024c:	189b      	adds	r3, r3, r2
2000024e:	00db      	lsls	r3, r3, #3
20000250:	4a2f      	ldr	r2, [pc, #188]	; (20000310 <collision+0x16c>)
20000252:	189b      	adds	r3, r3, r2
20000254:	617b      	str	r3, [r7, #20]
			extend_snake(&snakeVec[snakeLength],pSnakeVec[snakeLength-1] );
20000256:	4b2c      	ldr	r3, [pc, #176]	; (20000308 <collision+0x164>)
20000258:	681a      	ldr	r2, [r3, #0]
2000025a:	0013      	movs	r3, r2
2000025c:	009b      	lsls	r3, r3, #2
2000025e:	189b      	adds	r3, r3, r2
20000260:	00db      	lsls	r3, r3, #3
20000262:	4a2b      	ldr	r2, [pc, #172]	; (20000310 <collision+0x16c>)
20000264:	1898      	adds	r0, r3, r2
20000266:	4b28      	ldr	r3, [pc, #160]	; (20000308 <collision+0x164>)
20000268:	681b      	ldr	r3, [r3, #0]
2000026a:	4a28      	ldr	r2, [pc, #160]	; (2000030c <collision+0x168>)
2000026c:	4694      	mov	ip, r2
2000026e:	4463      	add	r3, ip
20000270:	009b      	lsls	r3, r3, #2
20000272:	687a      	ldr	r2, [r7, #4]
20000274:	18d3      	adds	r3, r2, r3
20000276:	681b      	ldr	r3, [r3, #0]
20000278:	0019      	movs	r1, r3
2000027a:	f000 f86b 	bl	20000354 <extend_snake>
			pSnakeVec[snakeLength] = &snakeVec[snakeLength];
2000027e:	4b22      	ldr	r3, [pc, #136]	; (20000308 <collision+0x164>)
20000280:	6819      	ldr	r1, [r3, #0]
20000282:	4b21      	ldr	r3, [pc, #132]	; (20000308 <collision+0x164>)
20000284:	681b      	ldr	r3, [r3, #0]
20000286:	009b      	lsls	r3, r3, #2
20000288:	687a      	ldr	r2, [r7, #4]
2000028a:	18d2      	adds	r2, r2, r3
2000028c:	000b      	movs	r3, r1
2000028e:	009b      	lsls	r3, r3, #2
20000290:	185b      	adds	r3, r3, r1
20000292:	00db      	lsls	r3, r3, #3
20000294:	491e      	ldr	r1, [pc, #120]	; (20000310 <collision+0x16c>)
20000296:	185b      	adds	r3, r3, r1
20000298:	6013      	str	r3, [r2, #0]
			snakeLength++;
2000029a:	4b1b      	ldr	r3, [pc, #108]	; (20000308 <collision+0x164>)
2000029c:	681b      	ldr	r3, [r3, #0]
2000029e:	1c5a      	adds	r2, r3, #1
200002a0:	4b19      	ldr	r3, [pc, #100]	; (20000308 <collision+0x164>)
200002a2:	601a      	str	r2, [r3, #0]
			
			char string[] = "Points:";
200002a4:	2108      	movs	r1, #8
200002a6:	187b      	adds	r3, r7, r1
200002a8:	4a1a      	ldr	r2, [pc, #104]	; (20000314 <collision+0x170>)
200002aa:	ca11      	ldmia	r2!, {r0, r4}
200002ac:	c311      	stmia	r3!, {r0, r4}
			s = string;
200002ae:	4b1a      	ldr	r3, [pc, #104]	; (20000318 <collision+0x174>)
200002b0:	187a      	adds	r2, r7, r1
200002b2:	601a      	str	r2, [r3, #0]
			ascii_gotoxy(1,1);
200002b4:	2101      	movs	r1, #1
200002b6:	2001      	movs	r0, #1
200002b8:	f000 fd70 	bl	20000d9c <ascii_gotoxy>
			while(*s)
200002bc:	e008      	b.n	200002d0 <collision+0x12c>
			{
			ascii_write_char(*s++);
200002be:	4b16      	ldr	r3, [pc, #88]	; (20000318 <collision+0x174>)
200002c0:	681b      	ldr	r3, [r3, #0]
200002c2:	1c59      	adds	r1, r3, #1
200002c4:	4a14      	ldr	r2, [pc, #80]	; (20000318 <collision+0x174>)
200002c6:	6011      	str	r1, [r2, #0]
200002c8:	781b      	ldrb	r3, [r3, #0]
200002ca:	0018      	movs	r0, r3
200002cc:	f000 fd48 	bl	20000d60 <ascii_write_char>
			while(*s)
200002d0:	4b11      	ldr	r3, [pc, #68]	; (20000318 <collision+0x174>)
200002d2:	681b      	ldr	r3, [r3, #0]
200002d4:	781b      	ldrb	r3, [r3, #0]
200002d6:	2b00      	cmp	r3, #0
200002d8:	d1f1      	bne.n	200002be <collision+0x11a>
			}
			char pts = points + '0';
200002da:	4b0a      	ldr	r3, [pc, #40]	; (20000304 <collision+0x160>)
200002dc:	681b      	ldr	r3, [r3, #0]
200002de:	b2da      	uxtb	r2, r3
200002e0:	2113      	movs	r1, #19
200002e2:	187b      	adds	r3, r7, r1
200002e4:	3230      	adds	r2, #48	; 0x30
200002e6:	701a      	strb	r2, [r3, #0]
			ascii_write_char(pts);
200002e8:	187b      	adds	r3, r7, r1
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	0018      	movs	r0, r3
200002ee:	f000 fd37 	bl	20000d60 <ascii_write_char>
			
			a->move(a);
200002f2:	683b      	ldr	r3, [r7, #0]
200002f4:	69db      	ldr	r3, [r3, #28]
200002f6:	683a      	ldr	r2, [r7, #0]
200002f8:	0010      	movs	r0, r2
200002fa:	4798      	blx	r3
		}
	}
}
200002fc:	46c0      	nop			; (mov r8, r8)
200002fe:	46bd      	mov	sp, r7
20000300:	b009      	add	sp, #36	; 0x24
20000302:	bd90      	pop	{r4, r7, pc}
20000304:	20000f7c 	andcs	r0, r0, ip, ror pc
20000308:	20001f20 	andcs	r1, r0, r0, lsr #30
2000030c:	3fffffff 	svccc	0x00ffffff
20000310:	20000f80 	andcs	r0, r0, r0, lsl #31
20000314:	200021a8 	andcs	r2, r0, r8, lsr #3
20000318:	20001f24 	andcs	r1, r0, r4, lsr #30

2000031c <move_snake>:

void move_snake(POBJECT o, int i){
2000031c:	b580      	push	{r7, lr}
2000031e:	b082      	sub	sp, #8
20000320:	af00      	add	r7, sp, #0
20000322:	6078      	str	r0, [r7, #4]
20000324:	6039      	str	r1, [r7, #0]
	//clear_object(o);
	o->posx = pSnakeVec[i-1]->posx;
20000326:	683b      	ldr	r3, [r7, #0]
20000328:	1e5a      	subs	r2, r3, #1
2000032a:	4b09      	ldr	r3, [pc, #36]	; (20000350 <move_snake+0x34>)
2000032c:	0092      	lsls	r2, r2, #2
2000032e:	58d3      	ldr	r3, [r2, r3]
20000330:	68da      	ldr	r2, [r3, #12]
20000332:	687b      	ldr	r3, [r7, #4]
20000334:	60da      	str	r2, [r3, #12]
	o->posy = pSnakeVec[i-1]->posy;
20000336:	683b      	ldr	r3, [r7, #0]
20000338:	1e5a      	subs	r2, r3, #1
2000033a:	4b05      	ldr	r3, [pc, #20]	; (20000350 <move_snake+0x34>)
2000033c:	0092      	lsls	r2, r2, #2
2000033e:	58d3      	ldr	r3, [r2, r3]
20000340:	691a      	ldr	r2, [r3, #16]
20000342:	687b      	ldr	r3, [r7, #4]
20000344:	611a      	str	r2, [r3, #16]
}
20000346:	46c0      	nop			; (mov r8, r8)
20000348:	46bd      	mov	sp, r7
2000034a:	b002      	add	sp, #8
2000034c:	bd80      	pop	{r7, pc}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	20001f28 	andcs	r1, r0, r8, lsr #30

20000354 <extend_snake>:


void extend_snake(POBJECT new, POBJECT tail)
{
20000354:	b580      	push	{r7, lr}
20000356:	b082      	sub	sp, #8
20000358:	af00      	add	r7, sp, #0
2000035a:	6078      	str	r0, [r7, #4]
2000035c:	6039      	str	r1, [r7, #0]
	new->geo = &ball_geometry;
2000035e:	687b      	ldr	r3, [r7, #4]
20000360:	4a11      	ldr	r2, [pc, #68]	; (200003a8 <extend_snake+0x54>)
20000362:	601a      	str	r2, [r3, #0]
	new->dirx = tail->dirx;
20000364:	683b      	ldr	r3, [r7, #0]
20000366:	685a      	ldr	r2, [r3, #4]
20000368:	687b      	ldr	r3, [r7, #4]
2000036a:	605a      	str	r2, [r3, #4]
	new->diry = tail->diry;
2000036c:	683b      	ldr	r3, [r7, #0]
2000036e:	689a      	ldr	r2, [r3, #8]
20000370:	687b      	ldr	r3, [r7, #4]
20000372:	609a      	str	r2, [r3, #8]
	new->posx = tail->posx - tail->geo->sizex;
20000374:	683b      	ldr	r3, [r7, #0]
20000376:	68da      	ldr	r2, [r3, #12]
20000378:	683b      	ldr	r3, [r7, #0]
2000037a:	681b      	ldr	r3, [r3, #0]
2000037c:	685b      	ldr	r3, [r3, #4]
2000037e:	1ad2      	subs	r2, r2, r3
20000380:	687b      	ldr	r3, [r7, #4]
20000382:	60da      	str	r2, [r3, #12]
	new->posy = tail->posy;
20000384:	683b      	ldr	r3, [r7, #0]
20000386:	691a      	ldr	r2, [r3, #16]
20000388:	687b      	ldr	r3, [r7, #4]
2000038a:	611a      	str	r2, [r3, #16]
	new->draw = draw_object;
2000038c:	687b      	ldr	r3, [r7, #4]
2000038e:	4a07      	ldr	r2, [pc, #28]	; (200003ac <extend_snake+0x58>)
20000390:	615a      	str	r2, [r3, #20]
	new->clear = clear_object;
20000392:	687b      	ldr	r3, [r7, #4]
20000394:	4a06      	ldr	r2, [pc, #24]	; (200003b0 <extend_snake+0x5c>)
20000396:	619a      	str	r2, [r3, #24]
	new->smove = move_snake;
20000398:	687b      	ldr	r3, [r7, #4]
2000039a:	4a06      	ldr	r2, [pc, #24]	; (200003b4 <extend_snake+0x60>)
2000039c:	625a      	str	r2, [r3, #36]	; 0x24
}
2000039e:	46c0      	nop			; (mov r8, r8)
200003a0:	46bd      	mov	sp, r7
200003a2:	b002      	add	sp, #8
200003a4:	bd80      	pop	{r7, pc}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	200020b8 	strhcs	r2, [r0], -r8
200003ac:	20000a61 	andcs	r0, r0, r1, ror #20
200003b0:	20000af3 	strdcs	r0, [r0], -r3
200003b4:	2000031d 	andcs	r0, r0, sp, lsl r3

200003b8 <main>:
	clear_object,
	move_snake,
	set_object_speed};

void main(void)
{
200003b8:	b580      	push	{r7, lr}
200003ba:	b088      	sub	sp, #32
200003bc:	af00      	add	r7, sp, #0
	char c;
	
	POBJECT s = &snake;
200003be:	4b4d      	ldr	r3, [pc, #308]	; (200004f4 <main+0x13c>)
200003c0:	617b      	str	r3, [r7, #20]
	POBJECT pp2 = &p2;
200003c2:	4b4d      	ldr	r3, [pc, #308]	; (200004f8 <main+0x140>)
200003c4:	613b      	str	r3, [r7, #16]
	POBJECT a = &apple;
200003c6:	4b4d      	ldr	r3, [pc, #308]	; (200004fc <main+0x144>)
200003c8:	60fb      	str	r3, [r7, #12]
	pSnakeVec[0] = s;
200003ca:	4b4d      	ldr	r3, [pc, #308]	; (20000500 <main+0x148>)
200003cc:	697a      	ldr	r2, [r7, #20]
200003ce:	601a      	str	r2, [r3, #0]
	pSnakeVec[1] = pp2;
200003d0:	4b4b      	ldr	r3, [pc, #300]	; (20000500 <main+0x148>)
200003d2:	693a      	ldr	r2, [r7, #16]
200003d4:	605a      	str	r2, [r3, #4]
	
	snakeLength = 2;
200003d6:	4b4b      	ldr	r3, [pc, #300]	; (20000504 <main+0x14c>)
200003d8:	2202      	movs	r2, #2
200003da:	601a      	str	r2, [r3, #0]
	
	init_app();
200003dc:	f7ff fec6 	bl	2000016c <init_app>
	graphic_initialize();
200003e0:	f000 fa1b 	bl	2000081a <graphic_initialize>
	ascii_init();
200003e4:	f000 fcf5 	bl	20000dd2 <ascii_init>
	ascii_gotoxy(1,1);
200003e8:	2101      	movs	r1, #1
200003ea:	2001      	movs	r0, #1
200003ec:	f000 fcd6 	bl	20000d9c <ascii_gotoxy>
		graphic_clear_screen();
	#endif
	
	while(1)
	{
		s->move(s);
200003f0:	697b      	ldr	r3, [r7, #20]
200003f2:	69db      	ldr	r3, [r3, #28]
200003f4:	697a      	ldr	r2, [r7, #20]
200003f6:	0010      	movs	r0, r2
200003f8:	4798      	blx	r3
		draw_object(s);
200003fa:	697b      	ldr	r3, [r7, #20]
200003fc:	0018      	movs	r0, r3
200003fe:	f000 fb2f 	bl	20000a60 <draw_object>
		
		for(int i = snakeLength -1; i>0; i--)
20000402:	4b40      	ldr	r3, [pc, #256]	; (20000504 <main+0x14c>)
20000404:	681b      	ldr	r3, [r3, #0]
20000406:	3b01      	subs	r3, #1
20000408:	61fb      	str	r3, [r7, #28]
2000040a:	e00e      	b.n	2000042a <main+0x72>
		{
			POBJECT px = pSnakeVec[i];
2000040c:	4b3c      	ldr	r3, [pc, #240]	; (20000500 <main+0x148>)
2000040e:	69fa      	ldr	r2, [r7, #28]
20000410:	0092      	lsls	r2, r2, #2
20000412:	58d3      	ldr	r3, [r2, r3]
20000414:	603b      	str	r3, [r7, #0]
			draw_object(pSnakeVec[i]);			
20000416:	4b3a      	ldr	r3, [pc, #232]	; (20000500 <main+0x148>)
20000418:	69fa      	ldr	r2, [r7, #28]
2000041a:	0092      	lsls	r2, r2, #2
2000041c:	58d3      	ldr	r3, [r2, r3]
2000041e:	0018      	movs	r0, r3
20000420:	f000 fb1e 	bl	20000a60 <draw_object>
		for(int i = snakeLength -1; i>0; i--)
20000424:	69fb      	ldr	r3, [r7, #28]
20000426:	3b01      	subs	r3, #1
20000428:	61fb      	str	r3, [r7, #28]
2000042a:	69fb      	ldr	r3, [r7, #28]
2000042c:	2b00      	cmp	r3, #0
2000042e:	dced      	bgt.n	2000040c <main+0x54>
		}
		
		for(int i = snakeLength -1; i>= 0; i--)
20000430:	4b34      	ldr	r3, [pc, #208]	; (20000504 <main+0x14c>)
20000432:	681b      	ldr	r3, [r3, #0]
20000434:	3b01      	subs	r3, #1
20000436:	61bb      	str	r3, [r7, #24]
20000438:	e01a      	b.n	20000470 <main+0xb8>
		{
			POBJECT px = pSnakeVec[i];
2000043a:	4b31      	ldr	r3, [pc, #196]	; (20000500 <main+0x148>)
2000043c:	69ba      	ldr	r2, [r7, #24]
2000043e:	0092      	lsls	r2, r2, #2
20000440:	58d3      	ldr	r3, [r2, r3]
20000442:	607b      	str	r3, [r7, #4]
			clear_object(pSnakeVec[i]);
20000444:	4b2e      	ldr	r3, [pc, #184]	; (20000500 <main+0x148>)
20000446:	69ba      	ldr	r2, [r7, #24]
20000448:	0092      	lsls	r2, r2, #2
2000044a:	58d3      	ldr	r3, [r2, r3]
2000044c:	0018      	movs	r0, r3
2000044e:	f000 fb50 	bl	20000af2 <clear_object>
			if(i!=0){
20000452:	69bb      	ldr	r3, [r7, #24]
20000454:	2b00      	cmp	r3, #0
20000456:	d008      	beq.n	2000046a <main+0xb2>
				move_snake(pSnakeVec[i], i);
20000458:	4b29      	ldr	r3, [pc, #164]	; (20000500 <main+0x148>)
2000045a:	69ba      	ldr	r2, [r7, #24]
2000045c:	0092      	lsls	r2, r2, #2
2000045e:	58d3      	ldr	r3, [r2, r3]
20000460:	69ba      	ldr	r2, [r7, #24]
20000462:	0011      	movs	r1, r2
20000464:	0018      	movs	r0, r3
20000466:	f7ff ff59 	bl	2000031c <move_snake>
		for(int i = snakeLength -1; i>= 0; i--)
2000046a:	69bb      	ldr	r3, [r7, #24]
2000046c:	3b01      	subs	r3, #1
2000046e:	61bb      	str	r3, [r7, #24]
20000470:	69bb      	ldr	r3, [r7, #24]
20000472:	2b00      	cmp	r3, #0
20000474:	dae1      	bge.n	2000043a <main+0x82>
			}
		}
		
		draw_object(a);
20000476:	68fb      	ldr	r3, [r7, #12]
20000478:	0018      	movs	r0, r3
2000047a:	f000 faf1 	bl	20000a60 <draw_object>
		collision(pSnakeVec,a);
2000047e:	68fa      	ldr	r2, [r7, #12]
20000480:	4b1f      	ldr	r3, [pc, #124]	; (20000500 <main+0x148>)
20000482:	0011      	movs	r1, r2
20000484:	0018      	movs	r0, r3
20000486:	f7ff fe8d 	bl	200001a4 <collision>
		
		delay_milli(40);
2000048a:	2028      	movs	r0, #40	; 0x28
2000048c:	f7ff fdc0 	bl	20000010 <delay_milli>
		c = keyb();
20000490:	f000 fcec 	bl	20000e6c <keyb>
20000494:	0002      	movs	r2, r0
20000496:	210b      	movs	r1, #11
20000498:	187b      	adds	r3, r7, r1
2000049a:	701a      	strb	r2, [r3, #0]
		switch(c)
2000049c:	187b      	adds	r3, r7, r1
2000049e:	781b      	ldrb	r3, [r3, #0]
200004a0:	2b04      	cmp	r3, #4
200004a2:	d00f      	beq.n	200004c4 <main+0x10c>
200004a4:	dc02      	bgt.n	200004ac <main+0xf4>
200004a6:	2b02      	cmp	r3, #2
200004a8:	d014      	beq.n	200004d4 <main+0x11c>
200004aa:	e022      	b.n	200004f2 <main+0x13a>
200004ac:	2b06      	cmp	r3, #6
200004ae:	d002      	beq.n	200004b6 <main+0xfe>
200004b0:	2b08      	cmp	r3, #8
200004b2:	d017      	beq.n	200004e4 <main+0x12c>
200004b4:	e01d      	b.n	200004f2 <main+0x13a>
		{
			case 6: s->set_speed(s,4,0); break;
200004b6:	697b      	ldr	r3, [r7, #20]
200004b8:	6a1b      	ldr	r3, [r3, #32]
200004ba:	6978      	ldr	r0, [r7, #20]
200004bc:	2200      	movs	r2, #0
200004be:	2104      	movs	r1, #4
200004c0:	4798      	blx	r3
200004c2:	e016      	b.n	200004f2 <main+0x13a>
			case 4: s->set_speed(s,-4,0); break;
200004c4:	697b      	ldr	r3, [r7, #20]
200004c6:	6a1b      	ldr	r3, [r3, #32]
200004c8:	2204      	movs	r2, #4
200004ca:	4251      	negs	r1, r2
200004cc:	6978      	ldr	r0, [r7, #20]
200004ce:	2200      	movs	r2, #0
200004d0:	4798      	blx	r3
200004d2:	e00e      	b.n	200004f2 <main+0x13a>
			case 2: s->set_speed(s,0,-4); break;
200004d4:	697b      	ldr	r3, [r7, #20]
200004d6:	6a1b      	ldr	r3, [r3, #32]
200004d8:	2204      	movs	r2, #4
200004da:	4252      	negs	r2, r2
200004dc:	6978      	ldr	r0, [r7, #20]
200004de:	2100      	movs	r1, #0
200004e0:	4798      	blx	r3
200004e2:	e006      	b.n	200004f2 <main+0x13a>
			case 8: s->set_speed(s,0,4); break;
200004e4:	697b      	ldr	r3, [r7, #20]
200004e6:	6a1b      	ldr	r3, [r3, #32]
200004e8:	6978      	ldr	r0, [r7, #20]
200004ea:	2204      	movs	r2, #4
200004ec:	2100      	movs	r1, #0
200004ee:	4798      	blx	r3
200004f0:	46c0      	nop			; (mov r8, r8)
	{
200004f2:	e77d      	b.n	200003f0 <main+0x38>
200004f4:	20002128 	andcs	r2, r0, r8, lsr #2
200004f8:	20002180 	andcs	r2, r0, r0, lsl #3
200004fc:	20002150 	andcs	r2, r0, r0, asr r1
20000500:	20001f28 	andcs	r1, r0, r8, lsr #30
20000504:	20001f20 	andcs	r1, r0, r0, lsr #30

20000508 <graphic_wait_ready>:
#include <graphic.h>
#include <delay.h>
#include <gpio.h>

static void graphic_wait_ready(void)
{
20000508:	b580      	push	{r7, lr}
2000050a:	b082      	sub	sp, #8
2000050c:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
2000050e:	2040      	movs	r0, #64	; 0x40
20000510:	f000 f932 	bl	20000778 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555;
20000514:	4b14      	ldr	r3, [pc, #80]	; (20000568 <graphic_wait_ready+0x60>)
20000516:	4a15      	ldr	r2, [pc, #84]	; (2000056c <graphic_wait_ready+0x64>)
20000518:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
2000051a:	2001      	movs	r0, #1
2000051c:	f000 f92c 	bl	20000778 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000520:	2002      	movs	r0, #2
20000522:	f000 f907 	bl	20000734 <graphic_ctrl_bit_set>
	delay_500ns();
20000526:	f7ff fdbb 	bl	200000a0 <delay_500ns>
	
	while(1)
	{
		graphic_ctrl_bit_set(B_E);
2000052a:	2040      	movs	r0, #64	; 0x40
2000052c:	f000 f902 	bl	20000734 <graphic_ctrl_bit_set>
		delay_500ns();
20000530:	f7ff fdb6 	bl	200000a0 <delay_500ns>
		c = GPIO_E.idrHigh & LCD_BUSY; //LCD_BUSY?????
20000534:	4b0c      	ldr	r3, [pc, #48]	; (20000568 <graphic_wait_ready+0x60>)
20000536:	7c5b      	ldrb	r3, [r3, #17]
20000538:	b2da      	uxtb	r2, r3
2000053a:	1dfb      	adds	r3, r7, #7
2000053c:	217f      	movs	r1, #127	; 0x7f
2000053e:	438a      	bics	r2, r1
20000540:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000542:	2040      	movs	r0, #64	; 0x40
20000544:	f000 f918 	bl	20000778 <graphic_ctrl_bit_clear>
		delay_500ns();
20000548:	f7ff fdaa 	bl	200000a0 <delay_500ns>
		if(c == 0)
2000054c:	1dfb      	adds	r3, r7, #7
2000054e:	781b      	ldrb	r3, [r3, #0]
20000550:	2b00      	cmp	r3, #0
20000552:	d000      	beq.n	20000556 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20000554:	e7e9      	b.n	2000052a <graphic_wait_ready+0x22>
		{
			break;
20000556:	46c0      	nop			; (mov r8, r8)
		}
	}
	GPIO_E.moder = 0x55555555;
20000558:	4b03      	ldr	r3, [pc, #12]	; (20000568 <graphic_wait_ready+0x60>)
2000055a:	4a05      	ldr	r2, [pc, #20]	; (20000570 <graphic_wait_ready+0x68>)
2000055c:	601a      	str	r2, [r3, #0]
}
2000055e:	46c0      	nop			; (mov r8, r8)
20000560:	46bd      	mov	sp, r7
20000562:	b002      	add	sp, #8
20000564:	bd80      	pop	{r7, pc}
20000566:	46c0      	nop			; (mov r8, r8)
20000568:	40021000 	andmi	r1, r2, r0
2000056c:	00005555 	andeq	r5, r0, r5, asr r5
20000570:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000574 <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
20000574:	b580      	push	{r7, lr}
20000576:	b084      	sub	sp, #16
20000578:	af00      	add	r7, sp, #0
2000057a:	0002      	movs	r2, r0
2000057c:	1dfb      	adds	r3, r7, #7
2000057e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000580:	2040      	movs	r0, #64	; 0x40
20000582:	f000 f8f9 	bl	20000778 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555;
20000586:	4b1c      	ldr	r3, [pc, #112]	; (200005f8 <graphic_read+0x84>)
20000588:	4a1c      	ldr	r2, [pc, #112]	; (200005fc <graphic_read+0x88>)
2000058a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
2000058c:	2003      	movs	r0, #3
2000058e:	f000 f8d1 	bl	20000734 <graphic_ctrl_bit_set>
	select_controller(controller);
20000592:	1dfb      	adds	r3, r7, #7
20000594:	781b      	ldrb	r3, [r3, #0]
20000596:	0018      	movs	r0, r3
20000598:	f000 f912 	bl	200007c0 <select_controller>
	delay_500ns();
2000059c:	f7ff fd80 	bl	200000a0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200005a0:	2040      	movs	r0, #64	; 0x40
200005a2:	f000 f8c7 	bl	20000734 <graphic_ctrl_bit_set>
	delay_500ns();
200005a6:	f7ff fd7b 	bl	200000a0 <delay_500ns>
	c = GPIO_E.idrHigh;
200005aa:	4a13      	ldr	r2, [pc, #76]	; (200005f8 <graphic_read+0x84>)
200005ac:	230f      	movs	r3, #15
200005ae:	18fb      	adds	r3, r7, r3
200005b0:	7c52      	ldrb	r2, [r2, #17]
200005b2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200005b4:	2040      	movs	r0, #64	; 0x40
200005b6:	f000 f8df 	bl	20000778 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x55555555;
200005ba:	4b0f      	ldr	r3, [pc, #60]	; (200005f8 <graphic_read+0x84>)
200005bc:	4a10      	ldr	r2, [pc, #64]	; (20000600 <graphic_read+0x8c>)
200005be:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1){
200005c0:	1dfb      	adds	r3, r7, #7
200005c2:	781b      	ldrb	r3, [r3, #0]
200005c4:	2208      	movs	r2, #8
200005c6:	4013      	ands	r3, r2
200005c8:	d004      	beq.n	200005d4 <graphic_read+0x60>
		select_controller(B_CS1);
200005ca:	2008      	movs	r0, #8
200005cc:	f000 f8f8 	bl	200007c0 <select_controller>
		graphic_wait_ready();
200005d0:	f7ff ff9a 	bl	20000508 <graphic_wait_ready>
	}
	if(controller & B_CS2)
200005d4:	1dfb      	adds	r3, r7, #7
200005d6:	781b      	ldrb	r3, [r3, #0]
200005d8:	2210      	movs	r2, #16
200005da:	4013      	ands	r3, r2
200005dc:	d004      	beq.n	200005e8 <graphic_read+0x74>
	{
		select_controller(B_CS2);
200005de:	2010      	movs	r0, #16
200005e0:	f000 f8ee 	bl	200007c0 <select_controller>
		graphic_wait_ready();
200005e4:	f7ff ff90 	bl	20000508 <graphic_wait_ready>
	}
	return c;
200005e8:	230f      	movs	r3, #15
200005ea:	18fb      	adds	r3, r7, r3
200005ec:	781b      	ldrb	r3, [r3, #0]
}
200005ee:	0018      	movs	r0, r3
200005f0:	46bd      	mov	sp, r7
200005f2:	b004      	add	sp, #16
200005f4:	bd80      	pop	{r7, pc}
200005f6:	46c0      	nop			; (mov r8, r8)
200005f8:	40021000 	andmi	r1, r2, r0
200005fc:	00005555 	andeq	r5, r0, r5, asr r5
20000600:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000604 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
20000604:	b580      	push	{r7, lr}
20000606:	b082      	sub	sp, #8
20000608:	af00      	add	r7, sp, #0
2000060a:	0002      	movs	r2, r0
2000060c:	1dfb      	adds	r3, r7, #7
2000060e:	701a      	strb	r2, [r3, #0]
20000610:	1dbb      	adds	r3, r7, #6
20000612:	1c0a      	adds	r2, r1, #0
20000614:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	GPIO_E.odrHigh = value;
20000616:	4a1a      	ldr	r2, [pc, #104]	; (20000680 <graphic_write+0x7c>)
20000618:	1dfb      	adds	r3, r7, #7
2000061a:	781b      	ldrb	r3, [r3, #0]
2000061c:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
2000061e:	1dbb      	adds	r3, r7, #6
20000620:	781b      	ldrb	r3, [r3, #0]
20000622:	0018      	movs	r0, r3
20000624:	f000 f8cc 	bl	200007c0 <select_controller>
	delay_500ns();
20000628:	f7ff fd3a 	bl	200000a0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000062c:	2040      	movs	r0, #64	; 0x40
2000062e:	f000 f881 	bl	20000734 <graphic_ctrl_bit_set>
	delay_500ns();
20000632:	f7ff fd35 	bl	200000a0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000636:	2040      	movs	r0, #64	; 0x40
20000638:	f000 f89e 	bl	20000778 <graphic_ctrl_bit_clear>

	if(controller & B_CS1){
2000063c:	1dbb      	adds	r3, r7, #6
2000063e:	781b      	ldrb	r3, [r3, #0]
20000640:	2208      	movs	r2, #8
20000642:	4013      	ands	r3, r2
20000644:	d004      	beq.n	20000650 <graphic_write+0x4c>
		select_controller(B_CS1);
20000646:	2008      	movs	r0, #8
20000648:	f000 f8ba 	bl	200007c0 <select_controller>
		graphic_wait_ready();
2000064c:	f7ff ff5c 	bl	20000508 <graphic_wait_ready>
	}
	if(controller & B_CS2)
20000650:	1dbb      	adds	r3, r7, #6
20000652:	781b      	ldrb	r3, [r3, #0]
20000654:	2210      	movs	r2, #16
20000656:	4013      	ands	r3, r2
20000658:	d004      	beq.n	20000664 <graphic_write+0x60>
	{
		select_controller(B_CS2);
2000065a:	2010      	movs	r0, #16
2000065c:	f000 f8b0 	bl	200007c0 <select_controller>
		graphic_wait_ready();
20000660:	f7ff ff52 	bl	20000508 <graphic_wait_ready>
	}
	GPIO_E.odrHigh = 0;
20000664:	4b06      	ldr	r3, [pc, #24]	; (20000680 <graphic_write+0x7c>)
20000666:	2200      	movs	r2, #0
20000668:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
2000066a:	2040      	movs	r0, #64	; 0x40
2000066c:	f000 f862 	bl	20000734 <graphic_ctrl_bit_set>
	select_controller(0);
20000670:	2000      	movs	r0, #0
20000672:	f000 f8a5 	bl	200007c0 <select_controller>
}
20000676:	46c0      	nop			; (mov r8, r8)
20000678:	46bd      	mov	sp, r7
2000067a:	b002      	add	sp, #8
2000067c:	bd80      	pop	{r7, pc}
2000067e:	46c0      	nop			; (mov r8, r8)
20000680:	40021000 	andmi	r1, r2, r0

20000684 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller)
{
20000684:	b580      	push	{r7, lr}
20000686:	b082      	sub	sp, #8
20000688:	af00      	add	r7, sp, #0
2000068a:	0002      	movs	r2, r0
2000068c:	1dfb      	adds	r3, r7, #7
2000068e:	701a      	strb	r2, [r3, #0]
20000690:	1dbb      	adds	r3, r7, #6
20000692:	1c0a      	adds	r2, r1, #0
20000694:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000696:	2040      	movs	r0, #64	; 0x40
20000698:	f000 f86e 	bl	20000778 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000069c:	1dbb      	adds	r3, r7, #6
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	0018      	movs	r0, r3
200006a2:	f000 f88d 	bl	200007c0 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200006a6:	2003      	movs	r0, #3
200006a8:	f000 f866 	bl	20000778 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200006ac:	1dbb      	adds	r3, r7, #6
200006ae:	781a      	ldrb	r2, [r3, #0]
200006b0:	1dfb      	adds	r3, r7, #7
200006b2:	781b      	ldrb	r3, [r3, #0]
200006b4:	0011      	movs	r1, r2
200006b6:	0018      	movs	r0, r3
200006b8:	f7ff ffa4 	bl	20000604 <graphic_write>
}
200006bc:	46c0      	nop			; (mov r8, r8)
200006be:	46bd      	mov	sp, r7
200006c0:	b002      	add	sp, #8
200006c2:	bd80      	pop	{r7, pc}

200006c4 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
200006c4:	b580      	push	{r7, lr}
200006c6:	b082      	sub	sp, #8
200006c8:	af00      	add	r7, sp, #0
200006ca:	0002      	movs	r2, r0
200006cc:	1dfb      	adds	r3, r7, #7
200006ce:	701a      	strb	r2, [r3, #0]
200006d0:	1dbb      	adds	r3, r7, #6
200006d2:	1c0a      	adds	r2, r1, #0
200006d4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200006d6:	2040      	movs	r0, #64	; 0x40
200006d8:	f000 f84e 	bl	20000778 <graphic_ctrl_bit_clear>
	select_controller(controller);
200006dc:	1dbb      	adds	r3, r7, #6
200006de:	781b      	ldrb	r3, [r3, #0]
200006e0:	0018      	movs	r0, r3
200006e2:	f000 f86d 	bl	200007c0 <select_controller>
	graphic_ctrl_bit_clear(B_RW);
200006e6:	2002      	movs	r0, #2
200006e8:	f000 f846 	bl	20000778 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RS);
200006ec:	2001      	movs	r0, #1
200006ee:	f000 f821 	bl	20000734 <graphic_ctrl_bit_set>
	graphic_write(data, controller);
200006f2:	1dbb      	adds	r3, r7, #6
200006f4:	781a      	ldrb	r2, [r3, #0]
200006f6:	1dfb      	adds	r3, r7, #7
200006f8:	781b      	ldrb	r3, [r3, #0]
200006fa:	0011      	movs	r1, r2
200006fc:	0018      	movs	r0, r3
200006fe:	f7ff ff81 	bl	20000604 <graphic_write>
}
20000702:	46c0      	nop			; (mov r8, r8)
20000704:	46bd      	mov	sp, r7
20000706:	b002      	add	sp, #8
20000708:	bd80      	pop	{r7, pc}

2000070a <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
2000070a:	b580      	push	{r7, lr}
2000070c:	b082      	sub	sp, #8
2000070e:	af00      	add	r7, sp, #0
20000710:	0002      	movs	r2, r0
20000712:	1dfb      	adds	r3, r7, #7
20000714:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000716:	1dfb      	adds	r3, r7, #7
20000718:	781b      	ldrb	r3, [r3, #0]
2000071a:	0018      	movs	r0, r3
2000071c:	f7ff ff2a 	bl	20000574 <graphic_read>
	return graphic_read(controller);
20000720:	1dfb      	adds	r3, r7, #7
20000722:	781b      	ldrb	r3, [r3, #0]
20000724:	0018      	movs	r0, r3
20000726:	f7ff ff25 	bl	20000574 <graphic_read>
2000072a:	0003      	movs	r3, r0
}
2000072c:	0018      	movs	r0, r3
2000072e:	46bd      	mov	sp, r7
20000730:	b002      	add	sp, #8
20000732:	bd80      	pop	{r7, pc}

20000734 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
20000734:	b580      	push	{r7, lr}
20000736:	b084      	sub	sp, #16
20000738:	af00      	add	r7, sp, #0
2000073a:	0002      	movs	r2, r0
2000073c:	1dfb      	adds	r3, r7, #7
2000073e:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
20000740:	4a0c      	ldr	r2, [pc, #48]	; (20000774 <graphic_ctrl_bit_set+0x40>)
20000742:	210f      	movs	r1, #15
20000744:	187b      	adds	r3, r7, r1
20000746:	7d12      	ldrb	r2, [r2, #20]
20000748:	701a      	strb	r2, [r3, #0]
	c |= ( ~B_SELECT & x ); //Nollställer B_Select!
2000074a:	1dfb      	adds	r3, r7, #7
2000074c:	781b      	ldrb	r3, [r3, #0]
2000074e:	b25b      	sxtb	r3, r3
20000750:	2204      	movs	r2, #4
20000752:	4393      	bics	r3, r2
20000754:	b25a      	sxtb	r2, r3
20000756:	187b      	adds	r3, r7, r1
20000758:	781b      	ldrb	r3, [r3, #0]
2000075a:	b25b      	sxtb	r3, r3
2000075c:	4313      	orrs	r3, r2
2000075e:	b25a      	sxtb	r2, r3
20000760:	187b      	adds	r3, r7, r1
20000762:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
20000764:	4a03      	ldr	r2, [pc, #12]	; (20000774 <graphic_ctrl_bit_set+0x40>)
20000766:	187b      	adds	r3, r7, r1
20000768:	781b      	ldrb	r3, [r3, #0]
2000076a:	7513      	strb	r3, [r2, #20]
}
2000076c:	46c0      	nop			; (mov r8, r8)
2000076e:	46bd      	mov	sp, r7
20000770:	b004      	add	sp, #16
20000772:	bd80      	pop	{r7, pc}
20000774:	40021000 	andmi	r1, r2, r0

20000778 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x)
{
20000778:	b580      	push	{r7, lr}
2000077a:	b084      	sub	sp, #16
2000077c:	af00      	add	r7, sp, #0
2000077e:	0002      	movs	r2, r0
20000780:	1dfb      	adds	r3, r7, #7
20000782:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;;
20000784:	4a0d      	ldr	r2, [pc, #52]	; (200007bc <graphic_ctrl_bit_clear+0x44>)
20000786:	210f      	movs	r1, #15
20000788:	187b      	adds	r3, r7, r1
2000078a:	7d12      	ldrb	r2, [r2, #20]
2000078c:	701a      	strb	r2, [r3, #0]
	c &= (~B_SELECT & ~x); //~ bildar 1-komplement
2000078e:	1dfb      	adds	r3, r7, #7
20000790:	781b      	ldrb	r3, [r3, #0]
20000792:	43db      	mvns	r3, r3
20000794:	b2db      	uxtb	r3, r3
20000796:	187a      	adds	r2, r7, r1
20000798:	7812      	ldrb	r2, [r2, #0]
2000079a:	4013      	ands	r3, r2
2000079c:	b2da      	uxtb	r2, r3
2000079e:	0008      	movs	r0, r1
200007a0:	187b      	adds	r3, r7, r1
200007a2:	2104      	movs	r1, #4
200007a4:	438a      	bics	r2, r1
200007a6:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
200007a8:	4a04      	ldr	r2, [pc, #16]	; (200007bc <graphic_ctrl_bit_clear+0x44>)
200007aa:	0001      	movs	r1, r0
200007ac:	187b      	adds	r3, r7, r1
200007ae:	781b      	ldrb	r3, [r3, #0]
200007b0:	7513      	strb	r3, [r2, #20]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40021000 	andmi	r1, r2, r0

200007c0 <select_controller>:

void select_controller(uint8_t controller)
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b082      	sub	sp, #8
200007c4:	af00      	add	r7, sp, #0
200007c6:	0002      	movs	r2, r0
200007c8:	1dfb      	adds	r3, r7, #7
200007ca:	701a      	strb	r2, [r3, #0]
	switch(controller){
200007cc:	1dfb      	adds	r3, r7, #7
200007ce:	781b      	ldrb	r3, [r3, #0]
200007d0:	2b08      	cmp	r3, #8
200007d2:	d00c      	beq.n	200007ee <select_controller+0x2e>
200007d4:	dc02      	bgt.n	200007dc <select_controller+0x1c>
200007d6:	2b00      	cmp	r3, #0
200007d8:	d005      	beq.n	200007e6 <select_controller+0x26>
				break;
		case B_CS1|B_CS2:
				graphic_ctrl_bit_set(B_CS1|B_CS2);
				break;
	}
}
200007da:	e01a      	b.n	20000812 <select_controller+0x52>
	switch(controller){
200007dc:	2b10      	cmp	r3, #16
200007de:	d00d      	beq.n	200007fc <select_controller+0x3c>
200007e0:	2b18      	cmp	r3, #24
200007e2:	d012      	beq.n	2000080a <select_controller+0x4a>
}
200007e4:	e015      	b.n	20000812 <select_controller+0x52>
				graphic_ctrl_bit_clear(B_CS1|B_CS2);
200007e6:	2018      	movs	r0, #24
200007e8:	f7ff ffc6 	bl	20000778 <graphic_ctrl_bit_clear>
				break;
200007ec:	e011      	b.n	20000812 <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1);
200007ee:	2008      	movs	r0, #8
200007f0:	f7ff ffa0 	bl	20000734 <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS2);
200007f4:	2010      	movs	r0, #16
200007f6:	f7ff ffbf 	bl	20000778 <graphic_ctrl_bit_clear>
				break;
200007fa:	e00a      	b.n	20000812 <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS2);
200007fc:	2010      	movs	r0, #16
200007fe:	f7ff ff99 	bl	20000734 <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS1);
20000802:	2008      	movs	r0, #8
20000804:	f7ff ffb8 	bl	20000778 <graphic_ctrl_bit_clear>
				break;
20000808:	e003      	b.n	20000812 <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1|B_CS2);
2000080a:	2018      	movs	r0, #24
2000080c:	f7ff ff92 	bl	20000734 <graphic_ctrl_bit_set>
				break;
20000810:	46c0      	nop			; (mov r8, r8)
}
20000812:	46c0      	nop			; (mov r8, r8)
20000814:	46bd      	mov	sp, r7
20000816:	b002      	add	sp, #8
20000818:	bd80      	pop	{r7, pc}

2000081a <graphic_initialize>:

void graphic_initialize(void)
{
2000081a:	b580      	push	{r7, lr}
2000081c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000081e:	2040      	movs	r0, #64	; 0x40
20000820:	f7ff ff88 	bl	20000734 <graphic_ctrl_bit_set>
	delay_micro(10);
20000824:	200a      	movs	r0, #10
20000826:	f7ff fc02 	bl	2000002e <delay_micro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
2000082a:	2078      	movs	r0, #120	; 0x78
2000082c:	f7ff ffa4 	bl	20000778 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000830:	201e      	movs	r0, #30
20000832:	f7ff fbed 	bl	20000010 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000836:	2020      	movs	r0, #32
20000838:	f7ff ff7c 	bl	20000734 <graphic_ctrl_bit_set>
	delay_milli(100);
2000083c:	2064      	movs	r0, #100	; 0x64
2000083e:	f7ff fbe7 	bl	20000010 <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000842:	2118      	movs	r1, #24
20000844:	203e      	movs	r0, #62	; 0x3e
20000846:	f7ff ff1d 	bl	20000684 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000084a:	2118      	movs	r1, #24
2000084c:	203f      	movs	r0, #63	; 0x3f
2000084e:	f7ff ff19 	bl	20000684 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000852:	2118      	movs	r1, #24
20000854:	20c0      	movs	r0, #192	; 0xc0
20000856:	f7ff ff15 	bl	20000684 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000085a:	2118      	movs	r1, #24
2000085c:	2040      	movs	r0, #64	; 0x40
2000085e:	f7ff ff11 	bl	20000684 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000862:	2118      	movs	r1, #24
20000864:	20b8      	movs	r0, #184	; 0xb8
20000866:	f7ff ff0d 	bl	20000684 <graphic_write_command>
	select_controller(0);
2000086a:	2000      	movs	r0, #0
2000086c:	f7ff ffa8 	bl	200007c0 <select_controller>
}
20000870:	46c0      	nop			; (mov r8, r8)
20000872:	46bd      	mov	sp, r7
20000874:	bd80      	pop	{r7, pc}

20000876 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000876:	b580      	push	{r7, lr}
20000878:	b082      	sub	sp, #8
2000087a:	af00      	add	r7, sp, #0
	for(unsigned int page = 0; page < 8; page++)
2000087c:	2300      	movs	r3, #0
2000087e:	607b      	str	r3, [r7, #4]
20000880:	e01d      	b.n	200008be <graphic_clear_screen+0x48>
	{
		graphic_write_command(LCD_SET_PAGE|page,B_CS1|B_CS2);
20000882:	687b      	ldr	r3, [r7, #4]
20000884:	b2db      	uxtb	r3, r3
20000886:	2248      	movs	r2, #72	; 0x48
20000888:	4252      	negs	r2, r2
2000088a:	4313      	orrs	r3, r2
2000088c:	b2db      	uxtb	r3, r3
2000088e:	2118      	movs	r1, #24
20000890:	0018      	movs	r0, r3
20000892:	f7ff fef7 	bl	20000684 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD|0,B_CS1|B_CS2);
20000896:	2118      	movs	r1, #24
20000898:	2040      	movs	r0, #64	; 0x40
2000089a:	f7ff fef3 	bl	20000684 <graphic_write_command>
		for(unsigned int add = 0; add<64;add++)
2000089e:	2300      	movs	r3, #0
200008a0:	603b      	str	r3, [r7, #0]
200008a2:	e006      	b.n	200008b2 <graphic_clear_screen+0x3c>
		{
			graphic_write_data(0, B_CS1|B_CS2);
200008a4:	2118      	movs	r1, #24
200008a6:	2000      	movs	r0, #0
200008a8:	f7ff ff0c 	bl	200006c4 <graphic_write_data>
		for(unsigned int add = 0; add<64;add++)
200008ac:	683b      	ldr	r3, [r7, #0]
200008ae:	3301      	adds	r3, #1
200008b0:	603b      	str	r3, [r7, #0]
200008b2:	683b      	ldr	r3, [r7, #0]
200008b4:	2b3f      	cmp	r3, #63	; 0x3f
200008b6:	d9f5      	bls.n	200008a4 <graphic_clear_screen+0x2e>
	for(unsigned int page = 0; page < 8; page++)
200008b8:	687b      	ldr	r3, [r7, #4]
200008ba:	3301      	adds	r3, #1
200008bc:	607b      	str	r3, [r7, #4]
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	2b07      	cmp	r3, #7
200008c2:	d9de      	bls.n	20000882 <graphic_clear_screen+0xc>
		}
	}
}
200008c4:	46c0      	nop			; (mov r8, r8)
200008c6:	46bd      	mov	sp, r7
200008c8:	b002      	add	sp, #8
200008ca:	bd80      	pop	{r7, pc}

200008cc <pixel>:

void pixel(int x, int y, int set)
{
200008cc:	b5b0      	push	{r4, r5, r7, lr}
200008ce:	b088      	sub	sp, #32
200008d0:	af00      	add	r7, sp, #0
200008d2:	60f8      	str	r0, [r7, #12]
200008d4:	60b9      	str	r1, [r7, #8]
200008d6:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200008d8:	68fb      	ldr	r3, [r7, #12]
200008da:	2b00      	cmp	r3, #0
200008dc:	dc00      	bgt.n	200008e0 <pixel+0x14>
200008de:	e0b6      	b.n	20000a4e <pixel+0x182>
200008e0:	68bb      	ldr	r3, [r7, #8]
200008e2:	2b00      	cmp	r3, #0
200008e4:	dc00      	bgt.n	200008e8 <pixel+0x1c>
200008e6:	e0b2      	b.n	20000a4e <pixel+0x182>
200008e8:	68fb      	ldr	r3, [r7, #12]
200008ea:	2b80      	cmp	r3, #128	; 0x80
200008ec:	dd00      	ble.n	200008f0 <pixel+0x24>
200008ee:	e0ae      	b.n	20000a4e <pixel+0x182>
200008f0:	68bb      	ldr	r3, [r7, #8]
200008f2:	2b40      	cmp	r3, #64	; 0x40
200008f4:	dd00      	ble.n	200008f8 <pixel+0x2c>
200008f6:	e0aa      	b.n	20000a4e <pixel+0x182>
	
	index = (y-1)/8;
200008f8:	68bb      	ldr	r3, [r7, #8]
200008fa:	3b01      	subs	r3, #1
200008fc:	2b00      	cmp	r3, #0
200008fe:	da00      	bge.n	20000902 <pixel+0x36>
20000900:	3307      	adds	r3, #7
20000902:	10db      	asrs	r3, r3, #3
20000904:	61bb      	str	r3, [r7, #24]
	
	switch((y-1)%8){
20000906:	68bb      	ldr	r3, [r7, #8]
20000908:	3b01      	subs	r3, #1
2000090a:	4a53      	ldr	r2, [pc, #332]	; (20000a58 <pixel+0x18c>)
2000090c:	4013      	ands	r3, r2
2000090e:	d504      	bpl.n	2000091a <pixel+0x4e>
20000910:	3b01      	subs	r3, #1
20000912:	2208      	movs	r2, #8
20000914:	4252      	negs	r2, r2
20000916:	4313      	orrs	r3, r2
20000918:	3301      	adds	r3, #1
2000091a:	2b07      	cmp	r3, #7
2000091c:	d82c      	bhi.n	20000978 <pixel+0xac>
2000091e:	009a      	lsls	r2, r3, #2
20000920:	4b4e      	ldr	r3, [pc, #312]	; (20000a5c <pixel+0x190>)
20000922:	18d3      	adds	r3, r2, r3
20000924:	681b      	ldr	r3, [r3, #0]
20000926:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000928:	231f      	movs	r3, #31
2000092a:	18fb      	adds	r3, r7, r3
2000092c:	2201      	movs	r2, #1
2000092e:	701a      	strb	r2, [r3, #0]
20000930:	e022      	b.n	20000978 <pixel+0xac>
		case 1: mask = 2; break;
20000932:	231f      	movs	r3, #31
20000934:	18fb      	adds	r3, r7, r3
20000936:	2202      	movs	r2, #2
20000938:	701a      	strb	r2, [r3, #0]
2000093a:	e01d      	b.n	20000978 <pixel+0xac>
		case 2: mask = 4; break;
2000093c:	231f      	movs	r3, #31
2000093e:	18fb      	adds	r3, r7, r3
20000940:	2204      	movs	r2, #4
20000942:	701a      	strb	r2, [r3, #0]
20000944:	e018      	b.n	20000978 <pixel+0xac>
		case 3: mask = 8; break;
20000946:	231f      	movs	r3, #31
20000948:	18fb      	adds	r3, r7, r3
2000094a:	2208      	movs	r2, #8
2000094c:	701a      	strb	r2, [r3, #0]
2000094e:	e013      	b.n	20000978 <pixel+0xac>
		case 4: mask = 0x10; break;
20000950:	231f      	movs	r3, #31
20000952:	18fb      	adds	r3, r7, r3
20000954:	2210      	movs	r2, #16
20000956:	701a      	strb	r2, [r3, #0]
20000958:	e00e      	b.n	20000978 <pixel+0xac>
		case 5: mask = 0x20; break;
2000095a:	231f      	movs	r3, #31
2000095c:	18fb      	adds	r3, r7, r3
2000095e:	2220      	movs	r2, #32
20000960:	701a      	strb	r2, [r3, #0]
20000962:	e009      	b.n	20000978 <pixel+0xac>
		case 6: mask = 0x40; break;
20000964:	231f      	movs	r3, #31
20000966:	18fb      	adds	r3, r7, r3
20000968:	2240      	movs	r2, #64	; 0x40
2000096a:	701a      	strb	r2, [r3, #0]
2000096c:	e004      	b.n	20000978 <pixel+0xac>
		case 7: mask = 0x80; break;
2000096e:	231f      	movs	r3, #31
20000970:	18fb      	adds	r3, r7, r3
20000972:	2280      	movs	r2, #128	; 0x80
20000974:	701a      	strb	r2, [r3, #0]
20000976:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0){
20000978:	687b      	ldr	r3, [r7, #4]
2000097a:	2b00      	cmp	r3, #0
2000097c:	d105      	bne.n	2000098a <pixel+0xbe>
		mask = ~mask;
2000097e:	221f      	movs	r2, #31
20000980:	18bb      	adds	r3, r7, r2
20000982:	18ba      	adds	r2, r7, r2
20000984:	7812      	ldrb	r2, [r2, #0]
20000986:	43d2      	mvns	r2, r2
20000988:	701a      	strb	r2, [r3, #0]
	}
	if(x>64){
2000098a:	68fb      	ldr	r3, [r7, #12]
2000098c:	2b40      	cmp	r3, #64	; 0x40
2000098e:	dd07      	ble.n	200009a0 <pixel+0xd4>
		controller = B_CS2;
20000990:	231e      	movs	r3, #30
20000992:	18fb      	adds	r3, r7, r3
20000994:	2210      	movs	r2, #16
20000996:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000998:	68fb      	ldr	r3, [r7, #12]
2000099a:	3b41      	subs	r3, #65	; 0x41
2000099c:	60fb      	str	r3, [r7, #12]
2000099e:	e006      	b.n	200009ae <pixel+0xe2>
	}else{
		controller = B_CS1;
200009a0:	231e      	movs	r3, #30
200009a2:	18fb      	adds	r3, r7, r3
200009a4:	2208      	movs	r2, #8
200009a6:	701a      	strb	r2, [r3, #0]
		x = x-1;
200009a8:	68fb      	ldr	r3, [r7, #12]
200009aa:	3b01      	subs	r3, #1
200009ac:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD | x,controller);
200009ae:	68fb      	ldr	r3, [r7, #12]
200009b0:	b25b      	sxtb	r3, r3
200009b2:	2240      	movs	r2, #64	; 0x40
200009b4:	4313      	orrs	r3, r2
200009b6:	b25b      	sxtb	r3, r3
200009b8:	b2da      	uxtb	r2, r3
200009ba:	251e      	movs	r5, #30
200009bc:	197b      	adds	r3, r7, r5
200009be:	781b      	ldrb	r3, [r3, #0]
200009c0:	0019      	movs	r1, r3
200009c2:	0010      	movs	r0, r2
200009c4:	f7ff fe5e 	bl	20000684 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE| index, controller);
200009c8:	69bb      	ldr	r3, [r7, #24]
200009ca:	b25b      	sxtb	r3, r3
200009cc:	2248      	movs	r2, #72	; 0x48
200009ce:	4252      	negs	r2, r2
200009d0:	4313      	orrs	r3, r2
200009d2:	b25b      	sxtb	r3, r3
200009d4:	b2da      	uxtb	r2, r3
200009d6:	197b      	adds	r3, r7, r5
200009d8:	781b      	ldrb	r3, [r3, #0]
200009da:	0019      	movs	r1, r3
200009dc:	0010      	movs	r0, r2
200009de:	f7ff fe51 	bl	20000684 <graphic_write_command>
	c = graphic_read_data(controller);
200009e2:	2317      	movs	r3, #23
200009e4:	18fc      	adds	r4, r7, r3
200009e6:	197b      	adds	r3, r7, r5
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	0018      	movs	r0, r3
200009ec:	f7ff fe8d 	bl	2000070a <graphic_read_data>
200009f0:	0003      	movs	r3, r0
200009f2:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD| x, controller);
200009f4:	68fb      	ldr	r3, [r7, #12]
200009f6:	b25b      	sxtb	r3, r3
200009f8:	2240      	movs	r2, #64	; 0x40
200009fa:	4313      	orrs	r3, r2
200009fc:	b25b      	sxtb	r3, r3
200009fe:	b2da      	uxtb	r2, r3
20000a00:	197b      	adds	r3, r7, r5
20000a02:	781b      	ldrb	r3, [r3, #0]
20000a04:	0019      	movs	r1, r3
20000a06:	0010      	movs	r0, r2
20000a08:	f7ff fe3c 	bl	20000684 <graphic_write_command>
	
	if(set){
20000a0c:	687b      	ldr	r3, [r7, #4]
20000a0e:	2b00      	cmp	r3, #0
20000a10:	d009      	beq.n	20000a26 <pixel+0x15a>
		mask = mask | c;
20000a12:	221f      	movs	r2, #31
20000a14:	18bb      	adds	r3, r7, r2
20000a16:	18b9      	adds	r1, r7, r2
20000a18:	2217      	movs	r2, #23
20000a1a:	18ba      	adds	r2, r7, r2
20000a1c:	7809      	ldrb	r1, [r1, #0]
20000a1e:	7812      	ldrb	r2, [r2, #0]
20000a20:	430a      	orrs	r2, r1
20000a22:	701a      	strb	r2, [r3, #0]
20000a24:	e008      	b.n	20000a38 <pixel+0x16c>
	}else{
		mask = mask & c;
20000a26:	221f      	movs	r2, #31
20000a28:	18bb      	adds	r3, r7, r2
20000a2a:	18ba      	adds	r2, r7, r2
20000a2c:	2117      	movs	r1, #23
20000a2e:	1879      	adds	r1, r7, r1
20000a30:	7812      	ldrb	r2, [r2, #0]
20000a32:	7809      	ldrb	r1, [r1, #0]
20000a34:	400a      	ands	r2, r1
20000a36:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000a38:	231e      	movs	r3, #30
20000a3a:	18fb      	adds	r3, r7, r3
20000a3c:	781a      	ldrb	r2, [r3, #0]
20000a3e:	231f      	movs	r3, #31
20000a40:	18fb      	adds	r3, r7, r3
20000a42:	781b      	ldrb	r3, [r3, #0]
20000a44:	0011      	movs	r1, r2
20000a46:	0018      	movs	r0, r3
20000a48:	f7ff fe3c 	bl	200006c4 <graphic_write_data>
20000a4c:	e000      	b.n	20000a50 <pixel+0x184>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000a4e:	46c0      	nop			; (mov r8, r8)
}
20000a50:	46bd      	mov	sp, r7
20000a52:	b008      	add	sp, #32
20000a54:	bdb0      	pop	{r4, r5, r7, pc}
20000a56:	46c0      	nop			; (mov r8, r8)
20000a58:	80000007 	andhi	r0, r0, r7
20000a5c:	200021b0 			; <UNDEFINED> instruction: 0x200021b0

20000a60 <draw_object>:

void draw_object(POBJECT obj)
{
20000a60:	b5b0      	push	{r4, r5, r7, lr}
20000a62:	b084      	sub	sp, #16
20000a64:	af00      	add	r7, sp, #0
20000a66:	6078      	str	r0, [r7, #4]
	uint8_t p;
	uint8_t n = obj->geo->numpoints;
20000a68:	687b      	ldr	r3, [r7, #4]
20000a6a:	681b      	ldr	r3, [r3, #0]
20000a6c:	681a      	ldr	r2, [r3, #0]
20000a6e:	230e      	movs	r3, #14
20000a70:	18fb      	adds	r3, r7, r3
20000a72:	701a      	strb	r2, [r3, #0]
	uint8_t x_coord;
	uint8_t y_coord;
	
	POINT s;
	for(p = 0; p<n; p++){
20000a74:	230f      	movs	r3, #15
20000a76:	18fb      	adds	r3, r7, r3
20000a78:	2200      	movs	r2, #0
20000a7a:	701a      	strb	r2, [r3, #0]
20000a7c:	e02d      	b.n	20000ada <draw_object+0x7a>
		//s = obj -> geo -> px[p];
		x_coord  = obj->posx + obj->geo->px[p].x;
20000a7e:	687b      	ldr	r3, [r7, #4]
20000a80:	68db      	ldr	r3, [r3, #12]
20000a82:	b2d9      	uxtb	r1, r3
20000a84:	687b      	ldr	r3, [r7, #4]
20000a86:	681a      	ldr	r2, [r3, #0]
20000a88:	240f      	movs	r4, #15
20000a8a:	193b      	adds	r3, r7, r4
20000a8c:	781b      	ldrb	r3, [r3, #0]
20000a8e:	3304      	adds	r3, #4
20000a90:	005b      	lsls	r3, r3, #1
20000a92:	18d3      	adds	r3, r2, r3
20000a94:	3304      	adds	r3, #4
20000a96:	781a      	ldrb	r2, [r3, #0]
20000a98:	200d      	movs	r0, #13
20000a9a:	183b      	adds	r3, r7, r0
20000a9c:	188a      	adds	r2, r1, r2
20000a9e:	701a      	strb	r2, [r3, #0]
		y_coord = obj->posy + obj->geo->px[p].y;
20000aa0:	687b      	ldr	r3, [r7, #4]
20000aa2:	691b      	ldr	r3, [r3, #16]
20000aa4:	b2d9      	uxtb	r1, r3
20000aa6:	687b      	ldr	r3, [r7, #4]
20000aa8:	681a      	ldr	r2, [r3, #0]
20000aaa:	193b      	adds	r3, r7, r4
20000aac:	781b      	ldrb	r3, [r3, #0]
20000aae:	3304      	adds	r3, #4
20000ab0:	005b      	lsls	r3, r3, #1
20000ab2:	18d3      	adds	r3, r2, r3
20000ab4:	3305      	adds	r3, #5
20000ab6:	781a      	ldrb	r2, [r3, #0]
20000ab8:	250c      	movs	r5, #12
20000aba:	197b      	adds	r3, r7, r5
20000abc:	188a      	adds	r2, r1, r2
20000abe:	701a      	strb	r2, [r3, #0]
		//point = obj->geo->px;
		//pixel(s.x, s.y,1);
		pixel(x_coord,y_coord,1);
20000ac0:	183b      	adds	r3, r7, r0
20000ac2:	7818      	ldrb	r0, [r3, #0]
20000ac4:	197b      	adds	r3, r7, r5
20000ac6:	781b      	ldrb	r3, [r3, #0]
20000ac8:	2201      	movs	r2, #1
20000aca:	0019      	movs	r1, r3
20000acc:	f7ff fefe 	bl	200008cc <pixel>
	for(p = 0; p<n; p++){
20000ad0:	193b      	adds	r3, r7, r4
20000ad2:	781a      	ldrb	r2, [r3, #0]
20000ad4:	193b      	adds	r3, r7, r4
20000ad6:	3201      	adds	r2, #1
20000ad8:	701a      	strb	r2, [r3, #0]
20000ada:	230f      	movs	r3, #15
20000adc:	18fa      	adds	r2, r7, r3
20000ade:	230e      	movs	r3, #14
20000ae0:	18fb      	adds	r3, r7, r3
20000ae2:	7812      	ldrb	r2, [r2, #0]
20000ae4:	781b      	ldrb	r3, [r3, #0]
20000ae6:	429a      	cmp	r2, r3
20000ae8:	d3c9      	bcc.n	20000a7e <draw_object+0x1e>
	}
}
20000aea:	46c0      	nop			; (mov r8, r8)
20000aec:	46bd      	mov	sp, r7
20000aee:	b004      	add	sp, #16
20000af0:	bdb0      	pop	{r4, r5, r7, pc}

20000af2 <clear_object>:

void clear_object(POBJECT obj)
{
20000af2:	b5b0      	push	{r4, r5, r7, lr}
20000af4:	b084      	sub	sp, #16
20000af6:	af00      	add	r7, sp, #0
20000af8:	6078      	str	r0, [r7, #4]
	uint8_t p;
	uint8_t n = obj->geo->numpoints;
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	681b      	ldr	r3, [r3, #0]
20000afe:	681a      	ldr	r2, [r3, #0]
20000b00:	230e      	movs	r3, #14
20000b02:	18fb      	adds	r3, r7, r3
20000b04:	701a      	strb	r2, [r3, #0]
	uint8_t x_coord;
	uint8_t y_coord;
	for(p = 0; p<n; p++){
20000b06:	230f      	movs	r3, #15
20000b08:	18fb      	adds	r3, r7, r3
20000b0a:	2200      	movs	r2, #0
20000b0c:	701a      	strb	r2, [r3, #0]
20000b0e:	e02d      	b.n	20000b6c <clear_object+0x7a>
		x_coord  = obj->posx + obj->geo->px[p].x;
20000b10:	687b      	ldr	r3, [r7, #4]
20000b12:	68db      	ldr	r3, [r3, #12]
20000b14:	b2d9      	uxtb	r1, r3
20000b16:	687b      	ldr	r3, [r7, #4]
20000b18:	681a      	ldr	r2, [r3, #0]
20000b1a:	240f      	movs	r4, #15
20000b1c:	193b      	adds	r3, r7, r4
20000b1e:	781b      	ldrb	r3, [r3, #0]
20000b20:	3304      	adds	r3, #4
20000b22:	005b      	lsls	r3, r3, #1
20000b24:	18d3      	adds	r3, r2, r3
20000b26:	3304      	adds	r3, #4
20000b28:	781a      	ldrb	r2, [r3, #0]
20000b2a:	200d      	movs	r0, #13
20000b2c:	183b      	adds	r3, r7, r0
20000b2e:	188a      	adds	r2, r1, r2
20000b30:	701a      	strb	r2, [r3, #0]
		y_coord = obj->posy + obj->geo->px[p].y;
20000b32:	687b      	ldr	r3, [r7, #4]
20000b34:	691b      	ldr	r3, [r3, #16]
20000b36:	b2d9      	uxtb	r1, r3
20000b38:	687b      	ldr	r3, [r7, #4]
20000b3a:	681a      	ldr	r2, [r3, #0]
20000b3c:	193b      	adds	r3, r7, r4
20000b3e:	781b      	ldrb	r3, [r3, #0]
20000b40:	3304      	adds	r3, #4
20000b42:	005b      	lsls	r3, r3, #1
20000b44:	18d3      	adds	r3, r2, r3
20000b46:	3305      	adds	r3, #5
20000b48:	781a      	ldrb	r2, [r3, #0]
20000b4a:	250c      	movs	r5, #12
20000b4c:	197b      	adds	r3, r7, r5
20000b4e:	188a      	adds	r2, r1, r2
20000b50:	701a      	strb	r2, [r3, #0]
		pixel(x_coord,y_coord,0);
20000b52:	183b      	adds	r3, r7, r0
20000b54:	7818      	ldrb	r0, [r3, #0]
20000b56:	197b      	adds	r3, r7, r5
20000b58:	781b      	ldrb	r3, [r3, #0]
20000b5a:	2200      	movs	r2, #0
20000b5c:	0019      	movs	r1, r3
20000b5e:	f7ff feb5 	bl	200008cc <pixel>
	for(p = 0; p<n; p++){
20000b62:	193b      	adds	r3, r7, r4
20000b64:	781a      	ldrb	r2, [r3, #0]
20000b66:	193b      	adds	r3, r7, r4
20000b68:	3201      	adds	r2, #1
20000b6a:	701a      	strb	r2, [r3, #0]
20000b6c:	230f      	movs	r3, #15
20000b6e:	18fa      	adds	r2, r7, r3
20000b70:	230e      	movs	r3, #14
20000b72:	18fb      	adds	r3, r7, r3
20000b74:	7812      	ldrb	r2, [r2, #0]
20000b76:	781b      	ldrb	r3, [r3, #0]
20000b78:	429a      	cmp	r2, r3
20000b7a:	d3c9      	bcc.n	20000b10 <clear_object+0x1e>
	}
20000b7c:	46c0      	nop			; (mov r8, r8)
20000b7e:	46bd      	mov	sp, r7
20000b80:	b004      	add	sp, #16
20000b82:	bdb0      	pop	{r4, r5, r7, pc}

20000b84 <ascii_ctrl_bit_set>:
#include <delay.h>
#include <gpio.h>

void ascii_ctrl_bit_set(unsigned char x)
{
20000b84:	b580      	push	{r7, lr}
20000b86:	b084      	sub	sp, #16
20000b88:	af00      	add	r7, sp, #0
20000b8a:	0002      	movs	r2, r0
20000b8c:	1dfb      	adds	r3, r7, #7
20000b8e:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
20000b90:	4a0c      	ldr	r2, [pc, #48]	; (20000bc4 <ascii_ctrl_bit_set+0x40>)
20000b92:	210f      	movs	r1, #15
20000b94:	187b      	adds	r3, r7, r1
20000b96:	7d12      	ldrb	r2, [r2, #20]
20000b98:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x ); //Varför ettställa B_select?
20000b9a:	1dfa      	adds	r2, r7, #7
20000b9c:	187b      	adds	r3, r7, r1
20000b9e:	7812      	ldrb	r2, [r2, #0]
20000ba0:	781b      	ldrb	r3, [r3, #0]
20000ba2:	4313      	orrs	r3, r2
20000ba4:	b2da      	uxtb	r2, r3
20000ba6:	0008      	movs	r0, r1
20000ba8:	187b      	adds	r3, r7, r1
20000baa:	2104      	movs	r1, #4
20000bac:	430a      	orrs	r2, r1
20000bae:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
20000bb0:	4a04      	ldr	r2, [pc, #16]	; (20000bc4 <ascii_ctrl_bit_set+0x40>)
20000bb2:	0001      	movs	r1, r0
20000bb4:	187b      	adds	r3, r7, r1
20000bb6:	781b      	ldrb	r3, [r3, #0]
20000bb8:	7513      	strb	r3, [r2, #20]
}
20000bba:	46c0      	nop			; (mov r8, r8)
20000bbc:	46bd      	mov	sp, r7
20000bbe:	b004      	add	sp, #16
20000bc0:	bd80      	pop	{r7, pc}
20000bc2:	46c0      	nop			; (mov r8, r8)
20000bc4:	40021000 	andmi	r1, r2, r0

20000bc8 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
20000bc8:	b580      	push	{r7, lr}
20000bca:	b084      	sub	sp, #16
20000bcc:	af00      	add	r7, sp, #0
20000bce:	0002      	movs	r2, r0
20000bd0:	1dfb      	adds	r3, r7, #7
20000bd2:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
20000bd4:	4a0d      	ldr	r2, [pc, #52]	; (20000c0c <ascii_ctrl_bit_clear+0x44>)
20000bd6:	210f      	movs	r1, #15
20000bd8:	187b      	adds	r3, r7, r1
20000bda:	7d12      	ldrb	r2, [r2, #20]
20000bdc:	701a      	strb	r2, [r3, #0]
	c &= (B_SELECT | ~x); //~ bildar 1-komplement
20000bde:	1dfb      	adds	r3, r7, #7
20000be0:	781b      	ldrb	r3, [r3, #0]
20000be2:	b25b      	sxtb	r3, r3
20000be4:	43db      	mvns	r3, r3
20000be6:	b25b      	sxtb	r3, r3
20000be8:	2204      	movs	r2, #4
20000bea:	4313      	orrs	r3, r2
20000bec:	b25b      	sxtb	r3, r3
20000bee:	187a      	adds	r2, r7, r1
20000bf0:	7812      	ldrb	r2, [r2, #0]
20000bf2:	b252      	sxtb	r2, r2
20000bf4:	4013      	ands	r3, r2
20000bf6:	b25a      	sxtb	r2, r3
20000bf8:	187b      	adds	r3, r7, r1
20000bfa:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
20000bfc:	4a03      	ldr	r2, [pc, #12]	; (20000c0c <ascii_ctrl_bit_clear+0x44>)
20000bfe:	187b      	adds	r3, r7, r1
20000c00:	781b      	ldrb	r3, [r3, #0]
20000c02:	7513      	strb	r3, [r2, #20]
}
20000c04:	46c0      	nop			; (mov r8, r8)
20000c06:	46bd      	mov	sp, r7
20000c08:	b004      	add	sp, #16
20000c0a:	bd80      	pop	{r7, pc}
20000c0c:	40021000 	andmi	r1, r2, r0

20000c10 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
20000c10:	b580      	push	{r7, lr}
20000c12:	b082      	sub	sp, #8
20000c14:	af00      	add	r7, sp, #0
20000c16:	0002      	movs	r2, r0
20000c18:	1dfb      	adds	r3, r7, #7
20000c1a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set( B_E );
20000c1c:	2040      	movs	r0, #64	; 0x40
20000c1e:	f7ff ffb1 	bl	20000b84 <ascii_ctrl_bit_set>
	GPIO_E.odrHigh = byte;
20000c22:	4a06      	ldr	r2, [pc, #24]	; (20000c3c <ascii_write_controller+0x2c>)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	7553      	strb	r3, [r2, #21]
	delay_250ns();
20000c2a:	f7ff fa0f 	bl	2000004c <delay_250ns>
	ascii_ctrl_bit_clear(B_E);	//Ska delay vara före eller efter detta?
20000c2e:	2040      	movs	r0, #64	; 0x40
20000c30:	f7ff ffca 	bl	20000bc8 <ascii_ctrl_bit_clear>
}
20000c34:	46c0      	nop			; (mov r8, r8)
20000c36:	46bd      	mov	sp, r7
20000c38:	b002      	add	sp, #8
20000c3a:	bd80      	pop	{r7, pc}
20000c3c:	40021000 	andmi	r1, r2, r0

20000c40 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000c40:	b580      	push	{r7, lr}
20000c42:	b082      	sub	sp, #8
20000c44:	af00      	add	r7, sp, #0
	unsigned char rv;
	ascii_ctrl_bit_set( B_E );
20000c46:	2040      	movs	r0, #64	; 0x40
20000c48:	f7ff ff9c 	bl	20000b84 <ascii_ctrl_bit_set>
	delay_250ns();
20000c4c:	f7ff f9fe 	bl	2000004c <delay_250ns>
	delay_250ns();
20000c50:	f7ff f9fc 	bl	2000004c <delay_250ns>
	rv = GPIO_E.idrHigh;
20000c54:	4a06      	ldr	r2, [pc, #24]	; (20000c70 <ascii_read_controller+0x30>)
20000c56:	1dfb      	adds	r3, r7, #7
20000c58:	7c52      	ldrb	r2, [r2, #17]
20000c5a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_E );
20000c5c:	2040      	movs	r0, #64	; 0x40
20000c5e:	f7ff ffb3 	bl	20000bc8 <ascii_ctrl_bit_clear>
	return rv;
20000c62:	1dfb      	adds	r3, r7, #7
20000c64:	781b      	ldrb	r3, [r3, #0]
	
}
20000c66:	0018      	movs	r0, r3
20000c68:	46bd      	mov	sp, r7
20000c6a:	b002      	add	sp, #8
20000c6c:	bd80      	pop	{r7, pc}
20000c6e:	46c0      	nop			; (mov r8, r8)
20000c70:	40021000 	andmi	r1, r2, r0

20000c74 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
20000c74:	b580      	push	{r7, lr}
20000c76:	b082      	sub	sp, #8
20000c78:	af00      	add	r7, sp, #0
20000c7a:	0002      	movs	r2, r0
20000c7c:	1dfb      	adds	r3, r7, #7
20000c7e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000c80:	2001      	movs	r0, #1
20000c82:	f7ff ffa1 	bl	20000bc8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000c86:	2002      	movs	r0, #2
20000c88:	f7ff ff9e 	bl	20000bc8 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000c8c:	1dfb      	adds	r3, r7, #7
20000c8e:	781b      	ldrb	r3, [r3, #0]
20000c90:	0018      	movs	r0, r3
20000c92:	f7ff ffbd 	bl	20000c10 <ascii_write_controller>
	
}
20000c96:	46c0      	nop			; (mov r8, r8)
20000c98:	46bd      	mov	sp, r7
20000c9a:	b002      	add	sp, #8
20000c9c:	bd80      	pop	{r7, pc}

20000c9e <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
20000c9e:	b580      	push	{r7, lr}
20000ca0:	b082      	sub	sp, #8
20000ca2:	af00      	add	r7, sp, #0
20000ca4:	0002      	movs	r2, r0
20000ca6:	1dfb      	adds	r3, r7, #7
20000ca8:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000caa:	2001      	movs	r0, #1
20000cac:	f7ff ff6a 	bl	20000b84 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000cb0:	2002      	movs	r0, #2
20000cb2:	f7ff ff89 	bl	20000bc8 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000cb6:	1dfb      	adds	r3, r7, #7
20000cb8:	781b      	ldrb	r3, [r3, #0]
20000cba:	0018      	movs	r0, r3
20000cbc:	f7ff ffa8 	bl	20000c10 <ascii_write_controller>
}
20000cc0:	46c0      	nop			; (mov r8, r8)
20000cc2:	46bd      	mov	sp, r7
20000cc4:	b002      	add	sp, #8
20000cc6:	bd80      	pop	{r7, pc}

20000cc8 <ascii_read_status>:



unsigned char ascii_read_status(void)
{
20000cc8:	b590      	push	{r4, r7, lr}
20000cca:	b083      	sub	sp, #12
20000ccc:	af00      	add	r7, sp, #0
	unsigned char rv;
	GPIO_E.moder &= 0x00005555;
20000cce:	4b0e      	ldr	r3, [pc, #56]	; (20000d08 <ascii_read_status+0x40>)
20000cd0:	681a      	ldr	r2, [r3, #0]
20000cd2:	4b0d      	ldr	r3, [pc, #52]	; (20000d08 <ascii_read_status+0x40>)
20000cd4:	490d      	ldr	r1, [pc, #52]	; (20000d0c <ascii_read_status+0x44>)
20000cd6:	400a      	ands	r2, r1
20000cd8:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000cda:	2002      	movs	r0, #2
20000cdc:	f7ff ff52 	bl	20000b84 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
20000ce0:	2001      	movs	r0, #1
20000ce2:	f7ff ff71 	bl	20000bc8 <ascii_ctrl_bit_clear>
	rv = ascii_read_controller();
20000ce6:	1dfc      	adds	r4, r7, #7
20000ce8:	f7ff ffaa 	bl	20000c40 <ascii_read_controller>
20000cec:	0003      	movs	r3, r0
20000cee:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder |= 0x55555555;
20000cf0:	4b05      	ldr	r3, [pc, #20]	; (20000d08 <ascii_read_status+0x40>)
20000cf2:	681a      	ldr	r2, [r3, #0]
20000cf4:	4b04      	ldr	r3, [pc, #16]	; (20000d08 <ascii_read_status+0x40>)
20000cf6:	4906      	ldr	r1, [pc, #24]	; (20000d10 <ascii_read_status+0x48>)
20000cf8:	430a      	orrs	r2, r1
20000cfa:	601a      	str	r2, [r3, #0]
	return rv;
20000cfc:	1dfb      	adds	r3, r7, #7
20000cfe:	781b      	ldrb	r3, [r3, #0]
}
20000d00:	0018      	movs	r0, r3
20000d02:	46bd      	mov	sp, r7
20000d04:	b003      	add	sp, #12
20000d06:	bd90      	pop	{r4, r7, pc}
20000d08:	40021000 	andmi	r1, r2, r0
20000d0c:	00005555 	andeq	r5, r0, r5, asr r5
20000d10:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d14 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
20000d14:	b590      	push	{r4, r7, lr}
20000d16:	b083      	sub	sp, #12
20000d18:	af00      	add	r7, sp, #0
	unsigned char rv;
	GPIO_E.moder &= 0x00005555;
20000d1a:	4b0e      	ldr	r3, [pc, #56]	; (20000d54 <ascii_read_data+0x40>)
20000d1c:	681a      	ldr	r2, [r3, #0]
20000d1e:	4b0d      	ldr	r3, [pc, #52]	; (20000d54 <ascii_read_data+0x40>)
20000d20:	490d      	ldr	r1, [pc, #52]	; (20000d58 <ascii_read_data+0x44>)
20000d22:	400a      	ands	r2, r1
20000d24:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d26:	2001      	movs	r0, #1
20000d28:	f7ff ff2c 	bl	20000b84 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000d2c:	2002      	movs	r0, #2
20000d2e:	f7ff ff29 	bl	20000b84 <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
20000d32:	1dfc      	adds	r4, r7, #7
20000d34:	f7ff ff84 	bl	20000c40 <ascii_read_controller>
20000d38:	0003      	movs	r3, r0
20000d3a:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder |= 0x55555555;
20000d3c:	4b05      	ldr	r3, [pc, #20]	; (20000d54 <ascii_read_data+0x40>)
20000d3e:	681a      	ldr	r2, [r3, #0]
20000d40:	4b04      	ldr	r3, [pc, #16]	; (20000d54 <ascii_read_data+0x40>)
20000d42:	4906      	ldr	r1, [pc, #24]	; (20000d5c <ascii_read_data+0x48>)
20000d44:	430a      	orrs	r2, r1
20000d46:	601a      	str	r2, [r3, #0]
	return rv;
20000d48:	1dfb      	adds	r3, r7, #7
20000d4a:	781b      	ldrb	r3, [r3, #0]
}
20000d4c:	0018      	movs	r0, r3
20000d4e:	46bd      	mov	sp, r7
20000d50:	b003      	add	sp, #12
20000d52:	bd90      	pop	{r4, r7, pc}
20000d54:	40021000 	andmi	r1, r2, r0
20000d58:	00005555 	andeq	r5, r0, r5, asr r5
20000d5c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d60 <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
20000d60:	b580      	push	{r7, lr}
20000d62:	b082      	sub	sp, #8
20000d64:	af00      	add	r7, sp, #0
20000d66:	0002      	movs	r2, r0
20000d68:	1dfb      	adds	r3, r7, #7
20000d6a:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000d6c:	46c0      	nop			; (mov r8, r8)
20000d6e:	f7ff ffab 	bl	20000cc8 <ascii_read_status>
20000d72:	0003      	movs	r3, r0
20000d74:	001a      	movs	r2, r3
20000d76:	2380      	movs	r3, #128	; 0x80
20000d78:	4013      	ands	r3, r2
20000d7a:	2b80      	cmp	r3, #128	; 0x80
20000d7c:	d0f7      	beq.n	20000d6e <ascii_write_char+0xe>
	delay_micro(8);
20000d7e:	2008      	movs	r0, #8
20000d80:	f7ff f955 	bl	2000002e <delay_micro>
	ascii_write_data(c);
20000d84:	1dfb      	adds	r3, r7, #7
20000d86:	781b      	ldrb	r3, [r3, #0]
20000d88:	0018      	movs	r0, r3
20000d8a:	f7ff ff88 	bl	20000c9e <ascii_write_data>
	delay_micro(45);
20000d8e:	202d      	movs	r0, #45	; 0x2d
20000d90:	f7ff f94d 	bl	2000002e <delay_micro>
}
20000d94:	46c0      	nop			; (mov r8, r8)
20000d96:	46bd      	mov	sp, r7
20000d98:	b002      	add	sp, #8
20000d9a:	bd80      	pop	{r7, pc}

20000d9c <ascii_gotoxy>:

void ascii_gotoxy(int row, int col)
{
20000d9c:	b580      	push	{r7, lr}
20000d9e:	b084      	sub	sp, #16
20000da0:	af00      	add	r7, sp, #0
20000da2:	6078      	str	r0, [r7, #4]
20000da4:	6039      	str	r1, [r7, #0]
	unsigned int adress;
	adress = row -1;
20000da6:	687b      	ldr	r3, [r7, #4]
20000da8:	3b01      	subs	r3, #1
20000daa:	60fb      	str	r3, [r7, #12]
	if(col == 2)
20000dac:	683b      	ldr	r3, [r7, #0]
20000dae:	2b02      	cmp	r3, #2
20000db0:	d102      	bne.n	20000db8 <ascii_gotoxy+0x1c>
	{
		adress = adress + 0x40;
20000db2:	68fb      	ldr	r3, [r7, #12]
20000db4:	3340      	adds	r3, #64	; 0x40
20000db6:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80|adress);
20000db8:	68fb      	ldr	r3, [r7, #12]
20000dba:	b2db      	uxtb	r3, r3
20000dbc:	2280      	movs	r2, #128	; 0x80
20000dbe:	4252      	negs	r2, r2
20000dc0:	4313      	orrs	r3, r2
20000dc2:	b2db      	uxtb	r3, r3
20000dc4:	0018      	movs	r0, r3
20000dc6:	f7ff ff55 	bl	20000c74 <ascii_write_cmd>
}
20000dca:	46c0      	nop			; (mov r8, r8)
20000dcc:	46bd      	mov	sp, r7
20000dce:	b004      	add	sp, #16
20000dd0:	bd80      	pop	{r7, pc}

20000dd2 <ascii_init>:

void ascii_init(void)
{
20000dd2:	b580      	push	{r7, lr}
20000dd4:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000dd6:	46c0      	nop			; (mov r8, r8)
20000dd8:	f7ff ff76 	bl	20000cc8 <ascii_read_status>
20000ddc:	0003      	movs	r3, r0
20000dde:	001a      	movs	r2, r3
20000de0:	2380      	movs	r3, #128	; 0x80
20000de2:	4013      	ands	r3, r2
20000de4:	2b80      	cmp	r3, #128	; 0x80
20000de6:	d0f7      	beq.n	20000dd8 <ascii_init+0x6>
	delay_micro(8);
20000de8:	2008      	movs	r0, #8
20000dea:	f7ff f920 	bl	2000002e <delay_micro>
	ascii_write_cmd(0x38); //00111000
20000dee:	2038      	movs	r0, #56	; 0x38
20000df0:	f7ff ff40 	bl	20000c74 <ascii_write_cmd>
	delay_micro(40);
20000df4:	2028      	movs	r0, #40	; 0x28
20000df6:	f7ff f91a 	bl	2000002e <delay_micro>
	
	while((ascii_read_status() & 0x80) == 0x80){}
20000dfa:	46c0      	nop			; (mov r8, r8)
20000dfc:	f7ff ff64 	bl	20000cc8 <ascii_read_status>
20000e00:	0003      	movs	r3, r0
20000e02:	001a      	movs	r2, r3
20000e04:	2380      	movs	r3, #128	; 0x80
20000e06:	4013      	ands	r3, r2
20000e08:	2b80      	cmp	r3, #128	; 0x80
20000e0a:	d0f7      	beq.n	20000dfc <ascii_init+0x2a>
	delay_micro(8);
20000e0c:	2008      	movs	r0, #8
20000e0e:	f7ff f90e 	bl	2000002e <delay_micro>
	ascii_write_cmd(0x0D); //00001110
20000e12:	200d      	movs	r0, #13
20000e14:	f7ff ff2e 	bl	20000c74 <ascii_write_cmd>
	delay_micro(40);
20000e18:	2028      	movs	r0, #40	; 0x28
20000e1a:	f7ff f908 	bl	2000002e <delay_micro>
	
	while((ascii_read_status() & 0x80) == 0x80){}
20000e1e:	46c0      	nop			; (mov r8, r8)
20000e20:	f7ff ff52 	bl	20000cc8 <ascii_read_status>
20000e24:	0003      	movs	r3, r0
20000e26:	001a      	movs	r2, r3
20000e28:	2380      	movs	r3, #128	; 0x80
20000e2a:	4013      	ands	r3, r2
20000e2c:	2b80      	cmp	r3, #128	; 0x80
20000e2e:	d0f7      	beq.n	20000e20 <ascii_init+0x4e>
	delay_micro(8);
20000e30:	2008      	movs	r0, #8
20000e32:	f7ff f8fc 	bl	2000002e <delay_micro>
	ascii_write_cmd(1);
20000e36:	2001      	movs	r0, #1
20000e38:	f7ff ff1c 	bl	20000c74 <ascii_write_cmd>
	delay_milli(2);
20000e3c:	2002      	movs	r0, #2
20000e3e:	f7ff f8e7 	bl	20000010 <delay_milli>
	
	while((ascii_read_status() & 0x80) == 0x80){}
20000e42:	46c0      	nop			; (mov r8, r8)
20000e44:	f7ff ff40 	bl	20000cc8 <ascii_read_status>
20000e48:	0003      	movs	r3, r0
20000e4a:	001a      	movs	r2, r3
20000e4c:	2380      	movs	r3, #128	; 0x80
20000e4e:	4013      	ands	r3, r2
20000e50:	2b80      	cmp	r3, #128	; 0x80
20000e52:	d0f7      	beq.n	20000e44 <ascii_init+0x72>
	delay_micro(8);
20000e54:	2008      	movs	r0, #8
20000e56:	f7ff f8ea 	bl	2000002e <delay_micro>
	ascii_write_cmd(0x06); //Rätt? Increment? 00000100
20000e5a:	2006      	movs	r0, #6
20000e5c:	f7ff ff0a 	bl	20000c74 <ascii_write_cmd>
	delay_micro(39);
20000e60:	2027      	movs	r0, #39	; 0x27
20000e62:	f7ff f8e4 	bl	2000002e <delay_micro>
20000e66:	46c0      	nop			; (mov r8, r8)
20000e68:	46bd      	mov	sp, r7
20000e6a:	bd80      	pop	{r7, pc}

20000e6c <keyb>:
#include <gpio.h>

unsigned char keyb(void) 
{ 
20000e6c:	b590      	push	{r4, r7, lr}
20000e6e:	b087      	sub	sp, #28
20000e70:	af00      	add	r7, sp, #0
 unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD}; 
20000e72:	003b      	movs	r3, r7
20000e74:	4a16      	ldr	r2, [pc, #88]	; (20000ed0 <keyb+0x64>)
20000e76:	ca13      	ldmia	r2!, {r0, r1, r4}
20000e78:	c313      	stmia	r3!, {r0, r1, r4}
20000e7a:	6812      	ldr	r2, [r2, #0]
20000e7c:	601a      	str	r2, [r3, #0]
 int row, col; 
 for (row=1; row <=4 ; row++ ) { 
20000e7e:	2301      	movs	r3, #1
20000e80:	617b      	str	r3, [r7, #20]
20000e82:	e019      	b.n	20000eb8 <keyb+0x4c>
  kbdActivate(row); 
20000e84:	697b      	ldr	r3, [r7, #20]
20000e86:	0018      	movs	r0, r3
20000e88:	f000 f824 	bl	20000ed4 <kbdActivate>
  col = kbdGetCol();
20000e8c:	f000 f84c 	bl	20000f28 <kbdGetCol>
20000e90:	0003      	movs	r3, r0
20000e92:	613b      	str	r3, [r7, #16]
  if( col != 0 ) { 
20000e94:	693b      	ldr	r3, [r7, #16]
20000e96:	2b00      	cmp	r3, #0
20000e98:	d00b      	beq.n	20000eb2 <keyb+0x46>
   kbdActivate( 0 ); 
20000e9a:	2000      	movs	r0, #0
20000e9c:	f000 f81a 	bl	20000ed4 <kbdActivate>
   return key [4*(row-1)+(col-1) ]; 
20000ea0:	697b      	ldr	r3, [r7, #20]
20000ea2:	3b01      	subs	r3, #1
20000ea4:	009a      	lsls	r2, r3, #2
20000ea6:	693b      	ldr	r3, [r7, #16]
20000ea8:	3b01      	subs	r3, #1
20000eaa:	18d3      	adds	r3, r2, r3
20000eac:	003a      	movs	r2, r7
20000eae:	5cd3      	ldrb	r3, [r2, r3]
20000eb0:	e009      	b.n	20000ec6 <keyb+0x5a>
 for (row=1; row <=4 ; row++ ) { 
20000eb2:	697b      	ldr	r3, [r7, #20]
20000eb4:	3301      	adds	r3, #1
20000eb6:	617b      	str	r3, [r7, #20]
20000eb8:	697b      	ldr	r3, [r7, #20]
20000eba:	2b04      	cmp	r3, #4
20000ebc:	dde2      	ble.n	20000e84 <keyb+0x18>
  } 
 } 
 kbdActivate( 0 ); 
20000ebe:	2000      	movs	r0, #0
20000ec0:	f000 f808 	bl	20000ed4 <kbdActivate>
 return 0xFF; 
20000ec4:	23ff      	movs	r3, #255	; 0xff
}
20000ec6:	0018      	movs	r0, r3
20000ec8:	46bd      	mov	sp, r7
20000eca:	b007      	add	sp, #28
20000ecc:	bd90      	pop	{r4, r7, pc}
20000ece:	46c0      	nop			; (mov r8, r8)
20000ed0:	200021d0 	ldrdcs	r2, [r0], -r0

20000ed4 <kbdActivate>:

void kbdActivate( unsigned int row ) /* Aktivera angiven rad hos tangentbordet, eller * deaktivera samtliga */
{  
20000ed4:	b580      	push	{r7, lr}
20000ed6:	b082      	sub	sp, #8
20000ed8:	af00      	add	r7, sp, #0
20000eda:	6078      	str	r0, [r7, #4]
 switch( row ) 
20000edc:	687b      	ldr	r3, [r7, #4]
20000ede:	2b04      	cmp	r3, #4
20000ee0:	d819      	bhi.n	20000f16 <kbdActivate+0x42>
20000ee2:	687b      	ldr	r3, [r7, #4]
20000ee4:	009a      	lsls	r2, r3, #2
20000ee6:	4b0e      	ldr	r3, [pc, #56]	; (20000f20 <kbdActivate+0x4c>)
20000ee8:	18d3      	adds	r3, r2, r3
20000eea:	681b      	ldr	r3, [r3, #0]
20000eec:	469f      	mov	pc, r3
 { 
  case 1: GPIO_D.odrHigh = 0x10; break; 
20000eee:	4b0d      	ldr	r3, [pc, #52]	; (20000f24 <kbdActivate+0x50>)
20000ef0:	2210      	movs	r2, #16
20000ef2:	755a      	strb	r2, [r3, #21]
20000ef4:	e00f      	b.n	20000f16 <kbdActivate+0x42>
  case 2: GPIO_D.odrHigh = 0x20; break; 
20000ef6:	4b0b      	ldr	r3, [pc, #44]	; (20000f24 <kbdActivate+0x50>)
20000ef8:	2220      	movs	r2, #32
20000efa:	755a      	strb	r2, [r3, #21]
20000efc:	e00b      	b.n	20000f16 <kbdActivate+0x42>
  case 3: GPIO_D.odrHigh = 0x40; break; 
20000efe:	4b09      	ldr	r3, [pc, #36]	; (20000f24 <kbdActivate+0x50>)
20000f00:	2240      	movs	r2, #64	; 0x40
20000f02:	755a      	strb	r2, [r3, #21]
20000f04:	e007      	b.n	20000f16 <kbdActivate+0x42>
  case 4: GPIO_D.odrHigh = 0x80; break; 
20000f06:	4b07      	ldr	r3, [pc, #28]	; (20000f24 <kbdActivate+0x50>)
20000f08:	2280      	movs	r2, #128	; 0x80
20000f0a:	755a      	strb	r2, [r3, #21]
20000f0c:	e003      	b.n	20000f16 <kbdActivate+0x42>
  case 0: GPIO_D.odrHigh = 0x00; break; 
20000f0e:	4b05      	ldr	r3, [pc, #20]	; (20000f24 <kbdActivate+0x50>)
20000f10:	2200      	movs	r2, #0
20000f12:	755a      	strb	r2, [r3, #21]
20000f14:	46c0      	nop			; (mov r8, r8)
 } 
}
20000f16:	46c0      	nop			; (mov r8, r8)
20000f18:	46bd      	mov	sp, r7
20000f1a:	b002      	add	sp, #8
20000f1c:	bd80      	pop	{r7, pc}
20000f1e:	46c0      	nop			; (mov r8, r8)
20000f20:	200021e0 	andcs	r2, r0, r0, ror #3
20000f24:	40020c00 	andmi	r0, r2, r0, lsl #24

20000f28 <kbdGetCol>:
int kbdGetCol ( void )  /* Om någon tangent (i aktiverad rad) * är nedtryckt, returnera dess kolumnnummer, * annars, returnera 0 */ 
{
20000f28:	b580      	push	{r7, lr}
20000f2a:	b082      	sub	sp, #8
20000f2c:	af00      	add	r7, sp, #0
 unsigned char c; 
 c = GPIO_D.idrHigh; 
20000f2e:	4a12      	ldr	r2, [pc, #72]	; (20000f78 <kbdGetCol+0x50>)
20000f30:	1dfb      	adds	r3, r7, #7
20000f32:	7c52      	ldrb	r2, [r2, #17]
20000f34:	701a      	strb	r2, [r3, #0]
 if ( c & 0x8 ) return 4; 
20000f36:	1dfb      	adds	r3, r7, #7
20000f38:	781b      	ldrb	r3, [r3, #0]
20000f3a:	2208      	movs	r2, #8
20000f3c:	4013      	ands	r3, r2
20000f3e:	d001      	beq.n	20000f44 <kbdGetCol+0x1c>
20000f40:	2304      	movs	r3, #4
20000f42:	e015      	b.n	20000f70 <kbdGetCol+0x48>
 if ( c & 0x4 ) return 3;
20000f44:	1dfb      	adds	r3, r7, #7
20000f46:	781b      	ldrb	r3, [r3, #0]
20000f48:	2204      	movs	r2, #4
20000f4a:	4013      	ands	r3, r2
20000f4c:	d001      	beq.n	20000f52 <kbdGetCol+0x2a>
20000f4e:	2303      	movs	r3, #3
20000f50:	e00e      	b.n	20000f70 <kbdGetCol+0x48>
 if ( c & 0x2 ) return 2;
20000f52:	1dfb      	adds	r3, r7, #7
20000f54:	781b      	ldrb	r3, [r3, #0]
20000f56:	2202      	movs	r2, #2
20000f58:	4013      	ands	r3, r2
20000f5a:	d001      	beq.n	20000f60 <kbdGetCol+0x38>
20000f5c:	2302      	movs	r3, #2
20000f5e:	e007      	b.n	20000f70 <kbdGetCol+0x48>
 if ( c & 0x1 ) return 1; 
20000f60:	1dfb      	adds	r3, r7, #7
20000f62:	781b      	ldrb	r3, [r3, #0]
20000f64:	2201      	movs	r2, #1
20000f66:	4013      	ands	r3, r2
20000f68:	d001      	beq.n	20000f6e <kbdGetCol+0x46>
20000f6a:	2301      	movs	r3, #1
20000f6c:	e000      	b.n	20000f70 <kbdGetCol+0x48>
 return 0; 
20000f6e:	2300      	movs	r3, #0
}
20000f70:	0018      	movs	r0, r3
20000f72:	46bd      	mov	sp, r7
20000f74:	b002      	add	sp, #8
20000f76:	bd80      	pop	{r7, pc}
20000f78:	40020c00 	andmi	r0, r2, r0, lsl #24

20000f7c <points>:
20000f7c:	00000000 	andeq	r0, r0, r0

20000f80 <snakeVec>:
	...

20001f20 <snakeLength>:
20001f20:	00000000 	andeq	r0, r0, r0

20001f24 <s>:
20001f24:	00000000 	andeq	r0, r0, r0

20001f28 <pSnakeVec>:
	...

200020b8 <ball_geometry>:
200020b8:	0000000c 	andeq	r0, r0, ip
200020bc:	00000004 	andeq	r0, r0, r4
200020c0:	00000004 	andeq	r0, r0, r4
200020c4:	02000100 	andeq	r0, r0, #0, 2
200020c8:	01010001 	tsteq	r1, r1
200020cc:	03010201 	movweq	r0, #4609	; 0x1201
200020d0:	01020002 	tsteq	r2, r2
200020d4:	03020202 	movweq	r0, #8706	; 0x2202
200020d8:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20002128 <snake>:
20002128:	200020b8 	strhcs	r2, [r0], -r8
	...
20002134:	00000006 	andeq	r0, r0, r6
20002138:	00000002 	andeq	r0, r0, r2
2000213c:	20000a61 	andcs	r0, r0, r1, ror #20
20002140:	20000af3 	strdcs	r0, [r0], -r3
20002144:	200000e5 	andcs	r0, r0, r5, ror #1
20002148:	200000ad 	andcs	r0, r0, sp, lsr #1
2000214c:	00000000 	andeq	r0, r0, r0

20002150 <apple>:
20002150:	200020b8 	strhcs	r2, [r0], -r8
20002154:	00000000 	andeq	r0, r0, r0
20002158:	00000004 	andeq	r0, r0, r4
2000215c:	0000000a 	andeq	r0, r0, sl
20002160:	00000002 	andeq	r0, r0, r2
20002164:	20000a61 	andcs	r0, r0, r1, ror #20
20002168:	20000af3 	strdcs	r0, [r0], -r3
2000216c:	200000e5 	andcs	r0, r0, r5, ror #1
20002170:	200000ad 	andcs	r0, r0, sp, lsr #1
20002174:	00000000 	andeq	r0, r0, r0

20002178 <string>:
20002178:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
2000217c:	00007374 	andeq	r7, r0, r4, ror r3

20002180 <p2>:
20002180:	200020b8 	strhcs	r2, [r0], -r8
	...
2000218c:	00000002 	andeq	r0, r0, r2
20002190:	00000002 	andeq	r0, r0, r2
20002194:	20000a61 	andcs	r0, r0, r1, ror #20
20002198:	20000af3 	strdcs	r0, [r0], -r3
2000219c:	2000031d 	andcs	r0, r0, sp, lsl r3
200021a0:	200000ad 	andcs	r0, r0, sp, lsr #1
200021a4:	00000000 	andeq	r0, r0, r0
200021a8:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
200021ac:	003a7374 	eorseq	r7, sl, r4, ror r3
200021b0:	20000928 	andcs	r0, r0, r8, lsr #18
200021b4:	20000932 	andcs	r0, r0, r2, lsr r9
200021b8:	2000093c 	andcs	r0, r0, ip, lsr r9
200021bc:	20000946 	andcs	r0, r0, r6, asr #18
200021c0:	20000950 	andcs	r0, r0, r0, asr r9
200021c4:	2000095a 	andcs	r0, r0, sl, asr r9
200021c8:	20000964 	andcs	r0, r0, r4, ror #18
200021cc:	2000096e 	andcs	r0, r0, lr, ror #18
200021d0:	0a030201 	beq	200c29dc <p2+0xc085c>
200021d4:	0b060504 	bleq	201835ec <p2+0x18146c>
200021d8:	0c090807 	stceq	8, cr0, [r9], {7}
200021dc:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200021ac <p2+0x2c>
200021e0:	20000f0e 	andcs	r0, r0, lr, lsl #30
200021e4:	20000eee 	andcs	r0, r0, lr, ror #29
200021e8:	20000ef6 	strdcs	r0, [r0], -r6
200021ec:	20000efe 	strdcs	r0, [r0], -lr
200021f0:	20000f06 	andcs	r0, r0, r6, lsl #30

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000b5 	strheq	r0, [r0], -r5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000000c 	andeq	r0, r0, ip
      10:	0000a40c 	andeq	sl, r0, ip, lsl #8
      14:	0000db00 	andeq	sp, r0, r0, lsl #22
      18:	00001000 	andeq	r1, r0, r0
      1c:	00009a20 	andeq	r9, r0, r0, lsr #20
      20:	00000000 	andeq	r0, r0, r0
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000013d 	andeq	r0, r0, sp, lsr r1
      2c:	37070202 	strcc	r0, [r7, -r2, lsl #4]
      30:	02000001 	andeq	r0, r0, #1
      34:	01290801 			; <UNDEFINED> instruction: 0x01290801
      38:	11030000 	mrsne	r0, (UNDEF: 3)
      3c:	01000001 	tsteq	r0, r1
      40:	0000a029 	andeq	sl, r0, r9, lsr #32
      44:	00000a20 	andeq	r0, r0, r0, lsr #20
      48:	049c0100 	ldreq	r0, [ip], #256	; 0x100
      4c:	00000105 	andeq	r0, r0, r5, lsl #2
      50:	004c1d01 	subeq	r1, ip, r1, lsl #26
      54:	00542000 	subseq	r2, r4, r0
      58:	9c010000 	stcls	0, cr0, [r1], {-0}
      5c:	0000006f 	andeq	r0, r0, pc, rrx
      60:	0000d605 	andeq	sp, r0, r5, lsl #12
      64:	25230100 	strcs	r0, [r3, #-256]!	; 0xffffff00
      68:	02000000 	andeq	r0, r0, #0
      6c:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
      70:	0000011d 	andeq	r0, r0, sp, lsl r1
      74:	002e0f01 	eoreq	r0, lr, r1, lsl #30
      78:	001e2000 	andseq	r2, lr, r0
      7c:	9c010000 	stcls	0, cr0, [r1], {-0}
      80:	00000092 	muleq	r0, r2, r0
      84:	00737506 	rsbseq	r7, r3, r6, lsl #10
      88:	00920f01 	addseq	r0, r2, r1, lsl #30
      8c:	91020000 	mrsls	r0, (UNDEF: 2)
      90:	04070074 	streq	r0, [r7], #-116	; 0xffffff8c
      94:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      98:	00000800 	andeq	r0, r0, r0, lsl #16
      9c:	04010000 	streq	r0, [r1], #-0
      a0:	20000010 	andcs	r0, r0, r0, lsl r0
      a4:	0000001e 	andeq	r0, r0, lr, lsl r0
      a8:	6d069c01 	stcvs	12, cr9, [r6, #-4]
      ac:	04010073 	streq	r0, [r1], #-115	; 0xffffff8d
      b0:	00000092 	muleq	r0, r2, r0
      b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
      b8:	0005a700 	andeq	sl, r5, r0, lsl #14
      bc:	92000400 	andls	r0, r0, #0, 8
      c0:	04000000 	streq	r0, [r0], #-0
      c4:	00000c01 	andeq	r0, r0, r1, lsl #24
      c8:	01660c00 	cmneq	r6, r0, lsl #24
      cc:	00db0000 	sbcseq	r0, fp, r0
	...
      d8:	007e0000 	rsbseq	r0, lr, r0
      dc:	cf020000 	svcgt	0x00020000
      e0:	02000002 	andeq	r0, r0, #2
      e4:	00003007 	andeq	r3, r0, r7
      e8:	07040300 	streq	r0, [r4, -r0, lsl #6]
      ec:	0000013d 	andeq	r0, r0, sp, lsr r1
      f0:	0002c602 	andeq	ip, r2, r2, lsl #12
      f4:	42080200 	andmi	r0, r8, #0, 4
      f8:	03000000 	movweq	r0, #0
      fc:	01370702 	teqeq	r7, r2, lsl #14
     100:	81020000 	mrshi	r0, (UNDEF: 2)
     104:	02000002 	andeq	r0, r0, #2
     108:	00005409 	andeq	r5, r0, r9, lsl #8
     10c:	08010300 	stmdaeq	r1, {r8, r9}
     110:	00000129 	andeq	r0, r0, r9, lsr #2
     114:	0b021804 	bleq	8612c <startup-0x1ff79ed4>
     118:	000000e8 	andeq	r0, r0, r8, ror #1
     11c:	0002dd05 	andeq	sp, r2, r5, lsl #26
     120:	250c0200 	strcs	r0, [ip, #-512]	; 0xfffffe00
     124:	00000000 	andeq	r0, r0, r0
     128:	0001b505 	andeq	fp, r1, r5, lsl #10
     12c:	370d0200 	strcc	r0, [sp, -r0, lsl #4]
     130:	04000000 	streq	r0, [r0], #-0
     134:	00025105 	andeq	r5, r2, r5, lsl #2
     138:	370e0200 	strcc	r0, [lr, -r0, lsl #4]
     13c:	06000000 	streq	r0, [r0], -r0
     140:	0002b105 	andeq	fp, r2, r5, lsl #2
     144:	250f0200 	strcs	r0, [pc, #-512]	; ffffff4c <p2+0xdfffddcc>
     148:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     14c:	00026605 	andeq	r6, r2, r5, lsl #12
     150:	25100200 	ldrcs	r0, [r0, #-512]	; 0xfffffe00
     154:	0c000000 	stceq	0, cr0, [r0], {-0}
     158:	0002b905 	andeq	fp, r2, r5, lsl #18
     15c:	49110200 	ldmdbmi	r1, {r9}
     160:	10000000 	andne	r0, r0, r0
     164:	00029f05 	andeq	r9, r2, r5, lsl #30
     168:	49120200 	ldmdbmi	r2, {r9}
     16c:	11000000 	mrsne	r0, (UNDEF: 0)
     170:	00023c05 	andeq	r3, r2, r5, lsl #24
     174:	37130200 	ldrcc	r0, [r3, -r0, lsl #4]
     178:	12000000 	andne	r0, r0, #0
     17c:	00028905 	andeq	r8, r2, r5, lsl #18
     180:	49140200 	ldmdbmi	r4, {r9}
     184:	14000000 	strne	r0, [r0], #-0
     188:	0001d405 	andeq	sp, r1, r5, lsl #8
     18c:	49150200 	ldmdbmi	r5, {r9}
     190:	15000000 	strne	r0, [r0, #-0]
     194:	0001e905 	andeq	lr, r1, r5, lsl #18
     198:	37160200 	ldrcc	r0, [r6, -r0, lsl #4]
     19c:	16000000 	strne	r0, [r0], -r0
     1a0:	02240200 	eoreq	r0, r4, #0, 4
     1a4:	17020000 	strne	r0, [r2, -r0]
     1a8:	0000005b 	andeq	r0, r0, fp, asr r0
     1ac:	0001dc06 	andeq	sp, r1, r6, lsl #24
     1b0:	06030200 	streq	r0, [r3], -r0, lsl #4
     1b4:	00000114 	andeq	r0, r0, r4, lsl r1
     1b8:	03007807 	movweq	r7, #2055	; 0x807
     1bc:	00005408 	andeq	r5, r0, r8, lsl #8
     1c0:	79070000 	stmdbvc	r7, {}	; <UNPREDICTABLE>
     1c4:	54090300 	strpl	r0, [r9], #-768	; 0xfffffd00
     1c8:	01000000 	mrseq	r0, (UNDEF: 0)
     1cc:	01e30200 	mvneq	r0, r0, lsl #4
     1d0:	0a030000 	beq	c01d8 <startup-0x1ff3fe28>
     1d4:	000000f3 	strdeq	r0, [r0], -r3
     1d8:	00027706 	andeq	r7, r2, r6, lsl #14
     1dc:	0c037000 	stceq	0, cr7, [r3], {-0}
     1e0:	0000015b 	andeq	r0, r0, fp, asr r1
     1e4:	0002e305 	andeq	lr, r2, r5, lsl #6
     1e8:	5b0e0300 	blpl	380df0 <startup-0x1fc7f210>
     1ec:	00000001 	andeq	r0, r0, r1
     1f0:	00027105 	andeq	r7, r2, r5, lsl #2
     1f4:	5b0f0300 	blpl	3c0dfc <startup-0x1fc3f204>
     1f8:	04000001 	streq	r0, [r0], #-1
     1fc:	00029005 	andeq	r9, r2, r5
     200:	5b100300 	blpl	400e08 <startup-0x1fbff1f8>
     204:	08000001 	stmdaeq	r0, {r0}
     208:	00787007 	rsbseq	r7, r8, r7
     20c:	01621103 	cmneq	r2, r3, lsl #2
     210:	000c0000 	andeq	r0, ip, r0
     214:	69050408 	stmdbvs	r5, {r3, sl}
     218:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     21c:	00000114 	andeq	r0, r0, r4, lsl r1
     220:	00000172 	andeq	r0, r0, r2, ror r1
     224:	0000300a 	andeq	r3, r0, sl
     228:	02003100 	andeq	r3, r0, #0, 2
     22c:	0000014b 	andeq	r0, r0, fp, asr #2
     230:	011f1203 	tsteq	pc, r3, lsl #4
     234:	4a020000 	bmi	8023c <startup-0x1ff7fdc4>
     238:	03000001 	movweq	r0, #1
     23c:	00018812 	andeq	r8, r1, r2, lsl r8
     240:	1f040b00 	svcne	0x00040b00
     244:	06000001 	streq	r0, [r0], -r1
     248:	000002d8 	ldrdeq	r0, [r0], -r8
     24c:	13140328 	tstne	r4, #40, 6	; 0xa0000000
     250:	07000002 	streq	r0, [r0, -r2]
     254:	006f6567 	rsbeq	r6, pc, r7, ror #10
     258:	017d1503 	cmneq	sp, r3, lsl #10
     25c:	05000000 	streq	r0, [r0, #-0]
     260:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     264:	015b1603 	cmpeq	fp, r3, lsl #12
     268:	05040000 	streq	r0, [r4, #-0]
     26c:	0000025c 	andeq	r0, r0, ip, asr r2
     270:	015b1603 	cmpeq	fp, r3, lsl #12
     274:	05080000 	streq	r0, [r8, #-0]
     278:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     27c:	015b1703 	cmpeq	fp, r3, lsl #14
     280:	050c0000 	streq	r0, [ip, #-0]
     284:	00000204 	andeq	r0, r0, r4, lsl #4
     288:	015b1703 	cmpeq	fp, r3, lsl #14
     28c:	05100000 	ldreq	r0, [r0, #-0]
     290:	0000019a 	muleq	r0, sl, r1
     294:	02241803 	eoreq	r1, r4, #196608	; 0x30000
     298:	05140000 	ldreq	r0, [r4, #-0]
     29c:	000003a3 	andeq	r0, r0, r3, lsr #7
     2a0:	02241903 	eoreq	r1, r4, #49152	; 0xc000
     2a4:	05180000 	ldreq	r0, [r8, #-0]
     2a8:	000002c1 	andeq	r0, r0, r1, asr #5
     2ac:	02241a03 	eoreq	r1, r4, #12288	; 0x3000
     2b0:	051c0000 	ldreq	r0, [ip, #-0]
     2b4:	000001f5 	strdeq	r0, [r0], -r5
     2b8:	023f1b03 	eorseq	r1, pc, #3072	; 0xc00
     2bc:	05200000 	streq	r0, [r0, #-0]!
     2c0:	000002c0 	andeq	r0, r0, r0, asr #5
     2c4:	02551c03 	subseq	r1, r5, #768	; 0x300
     2c8:	00240000 	eoreq	r0, r4, r0
     2cc:	00021e0c 	andeq	r1, r2, ip, lsl #28
     2d0:	021e0d00 	andseq	r0, lr, #0, 26
     2d4:	0b000000 	bleq	2dc <startup-0x1ffffd24>
     2d8:	00018e04 	andeq	r8, r1, r4, lsl #28
     2dc:	13040b00 	movwne	r0, #19200	; 0x4b00
     2e0:	0c000002 	stceq	0, cr0, [r0], {2}
     2e4:	0000023f 	andeq	r0, r0, pc, lsr r2
     2e8:	00021e0d 	andeq	r1, r2, sp, lsl #28
     2ec:	015b0d00 	cmpeq	fp, r0, lsl #26
     2f0:	5b0d0000 	blpl	3402f8 <startup-0x1fcbfd08>
     2f4:	00000001 	andeq	r0, r0, r1
     2f8:	022a040b 	eoreq	r0, sl, #184549376	; 0xb000000
     2fc:	550c0000 	strpl	r0, [ip, #-0]
     300:	0d000002 	stceq	0, cr0, [r0, #-8]
     304:	0000021e 	andeq	r0, r0, lr, lsl r2
     308:	00015b0d 	andeq	r5, r1, sp, lsl #22
     30c:	040b0000 	streq	r0, [fp], #-0
     310:	00000245 	andeq	r0, r0, r5, asr #4
     314:	00030602 	andeq	r0, r3, r2, lsl #12
     318:	8e1d0300 	cdphi	3, 1, cr0, cr13, cr0, {0}
     31c:	02000001 	andeq	r0, r0, #1
     320:	00000305 	andeq	r0, r0, r5, lsl #6
     324:	021e1d03 	andseq	r1, lr, #3, 26	; 0xc0
     328:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
     32c:	01000002 	tsteq	r0, r2
     330:	00015b18 	andeq	r5, r1, r8, lsl fp
     334:	20030500 	andcs	r0, r3, r0, lsl #10
     338:	0920001f 	stmdbeq	r0!, {r0, r1, r2, r3, r4}
     33c:	0000025b 	andeq	r0, r0, fp, asr r2
     340:	00000292 	muleq	r0, r2, r2
     344:	0000300a 	andeq	r3, r0, sl
     348:	0e006300 	cdpeq	3, 0, cr6, cr0, cr0, {0}
     34c:	00000296 	muleq	r0, r6, r2
     350:	02821901 	addeq	r1, r2, #16384	; 0x4000
     354:	03050000 	movweq	r0, #20480	; 0x5000
     358:	20000f80 	andcs	r0, r0, r0, lsl #31
     35c:	00026609 	andeq	r6, r2, r9, lsl #12
     360:	0002b300 	andeq	fp, r2, r0, lsl #6
     364:	00300a00 	eorseq	r0, r0, r0, lsl #20
     368:	00630000 	rsbeq	r0, r3, r0
     36c:	00015c0e 	andeq	r5, r1, lr, lsl #24
     370:	a31a0100 	tstge	sl, #0, 2
     374:	05000002 	streq	r0, [r0, #-2]
     378:	001f2803 	andseq	r2, pc, r3, lsl #16
     37c:	02090e20 	andeq	r0, r9, #32, 28	; 0x200
     380:	3a010000 	bcc	40388 <startup-0x1ffbfc78>
     384:	00000172 	andeq	r0, r0, r2, ror r1
     388:	20b80305 	adcscs	r0, r8, r5, lsl #6
     38c:	ff0f2000 			; <UNDEFINED> instruction: 0xff0f2000
     390:	01000000 	mrseq	r0, (UNDEF: 0)
     394:	00025b3f 	andeq	r5, r2, pc, lsr fp
     398:	28030500 	stmdacs	r3, {r8, sl}
     39c:	0f200021 	svceq	0x00200021
     3a0:	000002ed 	andeq	r0, r0, sp, ror #5
     3a4:	025b4801 	subseq	r4, fp, #65536	; 0x10000
     3a8:	03050000 	movweq	r0, #20480	; 0x5000
     3ac:	20002150 	andcs	r2, r0, r0, asr r1
     3b0:	0002e60e 	andeq	lr, r2, lr, lsl #12
     3b4:	5b5f0100 	blpl	17c07bc <startup-0x1e83f844>
     3b8:	05000001 	streq	r0, [r0, #-1]
     3bc:	000f7c03 	andeq	r7, pc, r3, lsl #24
     3c0:	00731020 	rsbseq	r1, r3, r0, lsr #32
     3c4:	03176001 	tsteq	r7, #1
     3c8:	03050000 	movweq	r0, #20480	; 0x5000
     3cc:	20001f24 	andcs	r1, r0, r4, lsr #30
     3d0:	031d040b 	tsteq	sp, #184549376	; 0xb000000
     3d4:	01030000 	mrseq	r0, (UNDEF: 3)
     3d8:	00013208 	andeq	r3, r1, r8, lsl #4
     3dc:	031d0900 	tsteq	sp, #0, 18
     3e0:	03340000 	teqeq	r4, #0
     3e4:	300a0000 	andcc	r0, sl, r0
     3e8:	06000000 	streq	r0, [r0], -r0
     3ec:	01c80e00 	biceq	r0, r8, r0, lsl #28
     3f0:	61010000 	mrsvs	r0, (UNDEF: 1)
     3f4:	00000324 	andeq	r0, r0, r4, lsr #6
     3f8:	21780305 	cmncs	r8, r5, lsl #6
     3fc:	70102000 	andsvc	r2, r0, r0
     400:	96010032 			; <UNDEFINED> instruction: 0x96010032
     404:	0000025b 	andeq	r0, r0, fp, asr r2
     408:	21800305 	orrcs	r0, r0, r5, lsl #6
     40c:	6c112000 	ldcvs	0, cr2, [r1], {-0}
     410:	01000002 	tsteq	r0, r2
     414:	0003b89e 	muleq	r3, lr, r8
     418:	00015020 	andeq	r5, r1, r0, lsr #32
     41c:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
     420:	12000004 	andne	r0, r0, #4
     424:	a0010063 	andge	r0, r1, r3, rrx
     428:	0000031d 	andeq	r0, r0, sp, lsl r3
     42c:	12639102 	rsbne	r9, r3, #-2147483648	; 0x80000000
     430:	a2010073 	andge	r0, r1, #115	; 0x73
     434:	00000266 	andeq	r0, r0, r6, ror #4
     438:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
     43c:	00327070 	eorseq	r7, r2, r0, ror r0
     440:	0266a301 	rsbeq	sl, r6, #67108864	; 0x4000000
     444:	91020000 	mrsls	r0, (UNDEF: 2)
     448:	00611268 	rsbeq	r1, r1, r8, ror #4
     44c:	0266a401 	rsbeq	sl, r6, #16777216	; 0x1000000
     450:	91020000 	mrsls	r0, (UNDEF: 2)
     454:	03f01364 	mvnseq	r1, #100, 6	; 0x90000001
     458:	01022000 	mrseq	r2, (UNDEF: 2)
     45c:	00140000 	andseq	r0, r4, r0
     460:	01000000 	mrseq	r0, (UNDEF: 0)
     464:	00015bca 	andeq	r5, r1, sl, asr #23
     468:	0003b600 	andeq	fp, r3, r0, lsl #12
     46c:	14001500 	strne	r1, [r0], #-1280	; 0xfffffb00
     470:	00000261 	andeq	r0, r0, r1, ror #4
     474:	015bcb01 	cmpeq	fp, r1, lsl #22
     478:	03c70000 	biceq	r0, r7, #0
     47c:	00150000 	andseq	r0, r5, r0
     480:	00040216 	andeq	r0, r4, r6, lsl r2
     484:	00002e20 	andeq	r2, r0, r0, lsr #28
     488:	0003f800 	andeq	pc, r3, r0, lsl #16
     48c:	00691200 	rsbeq	r1, r9, r0, lsl #4
     490:	015bb801 	cmpeq	fp, r1, lsl #16
     494:	91020000 	mrsls	r0, (UNDEF: 2)
     498:	040c1374 	streq	r1, [ip], #-884	; 0xfffffc8c
     49c:	00182000 	andseq	r2, r8, r0
     4a0:	70120000 	andsvc	r0, r2, r0
     4a4:	ba010078 	blt	4068c <startup-0x1ffbf974>
     4a8:	00000266 	andeq	r0, r0, r6, ror #4
     4ac:	00589102 	subseq	r9, r8, r2, lsl #2
     4b0:	04301300 	ldrteq	r1, [r0], #-768	; 0xfffffd00
     4b4:	00462000 	subeq	r2, r6, r0
     4b8:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
     4bc:	5bbe0100 	blpl	fef808c4 <p2+0xdef7e744>
     4c0:	02000001 	andeq	r0, r0, #1
     4c4:	3a137091 	bcc	4dc710 <startup-0x1fb238f0>
     4c8:	30200004 	eorcc	r0, r0, r4
     4cc:	12000000 	andne	r0, r0, #0
     4d0:	01007870 	tsteq	r0, r0, ror r8
     4d4:	000266c0 	andeq	r6, r2, r0, asr #13
     4d8:	5c910200 	lfmpl	f0, 4, [r1], {0}
     4dc:	00000000 	andeq	r0, r0, r0
     4e0:	00021717 	andeq	r1, r2, r7, lsl r7
     4e4:	54880100 	strpl	r0, [r8], #256	; 0x100
     4e8:	64200003 	strtvs	r0, [r0], #-3
     4ec:	01000000 	mrseq	r0, (UNDEF: 0)
     4f0:	0004599c 	muleq	r4, ip, r9
     4f4:	656e1800 	strbvs	r1, [lr, #-2048]!	; 0xfffff800
     4f8:	88010077 	stmdahi	r1, {r0, r1, r2, r4, r5, r6}
     4fc:	00000266 	andeq	r0, r0, r6, ror #4
     500:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
     504:	000001cf 	andeq	r0, r0, pc, asr #3
     508:	02668801 	rsbeq	r8, r6, #65536	; 0x10000
     50c:	91020000 	mrsls	r0, (UNDEF: 2)
     510:	fa170070 	blx	5c06d8 <startup-0x1fa3f928>
     514:	01000002 	tsteq	r0, r2
     518:	00031c81 	andeq	r1, r3, r1, lsl #25
     51c:	00003820 	andeq	r3, r0, r0, lsr #16
     520:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
     524:	18000004 	stmdane	r0, {r2}
     528:	8101006f 	tsthi	r1, pc, rrx
     52c:	00000266 	andeq	r0, r0, r6, ror #4
     530:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     534:	81010069 	tsthi	r1, r9, rrx
     538:	0000015b 	andeq	r0, r0, fp, asr r1
     53c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     540:	0002a711 	andeq	sl, r2, r1, lsl r7
     544:	a4630100 	strbtge	r0, [r3], #-256	; 0xffffff00
     548:	78200001 	stmdavc	r0!, {r0}
     54c:	01000001 	tsteq	r0, r1
     550:	0005129c 	muleq	r5, ip, r2
     554:	015c1900 	cmpeq	ip, r0, lsl #18
     558:	63010000 	movwvs	r0, #4096	; 0x1000
     55c:	00000512 	andeq	r0, r0, r2, lsl r5
     560:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
     564:	63010061 	movwvs	r0, #4193	; 0x1061
     568:	00000266 	andeq	r0, r0, r6, ror #4
     56c:	12509102 	subsne	r9, r0, #-2147483648	; 0x80000000
     570:	65010070 	strvs	r0, [r1, #-112]	; 0xffffff90
     574:	00000266 	andeq	r0, r0, r6, ror #4
     578:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     57c:	2000021e 	andcs	r0, r0, lr, lsl r2
     580:	000000de 	ldrdeq	r0, [r0], -lr
     584:	01007812 	tsteq	r0, r2, lsl r8
     588:	0002666c 	andeq	r6, r2, ip, ror #12
     58c:	68910200 	ldmvs	r1, {r9}
     590:	01007912 	tsteq	r0, r2, lsl r9
     594:	0002666d 	andeq	r6, r2, sp, ror #12
     598:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     59c:	00021714 	andeq	r1, r2, r4, lsl r7
     5a0:	5b6e0100 	blpl	1b809a8 <startup-0x1e47f658>
     5a4:	f4000001 	vst4.8	{d0-d3}, [r0], r1
     5a8:	15000004 	strne	r0, [r0, #-4]
     5ac:	01c80f00 	biceq	r0, r8, r0, lsl #30
     5b0:	72010000 	andvc	r0, r1, #0
     5b4:	00000518 	andeq	r0, r0, r8, lsl r5
     5b8:	12589102 	subsne	r9, r8, #-2147483648	; 0x80000000
     5bc:	00737470 	rsbseq	r7, r3, r0, ror r4
     5c0:	031d7901 	tsteq	sp, #16384	; 0x4000
     5c4:	91020000 	mrsls	r0, (UNDEF: 2)
     5c8:	0b000063 	bleq	75c <startup-0x1ffff8a4>
     5cc:	00026604 	andeq	r6, r2, r4, lsl #12
     5d0:	031d0900 	tsteq	sp, #0, 18
     5d4:	05280000 	streq	r0, [r8, #-0]!
     5d8:	300a0000 	andcc	r0, sl, r0
     5dc:	07000000 	streq	r0, [r0, -r0]
     5e0:	02481a00 	subeq	r1, r8, #0, 20
     5e4:	52010000 	andpl	r0, r1, #0
     5e8:	2000016c 	andcs	r0, r0, ip, ror #2
     5ec:	00000038 	andeq	r0, r0, r8, lsr r0
     5f0:	bc179c01 	ldclt	12, cr9, [r7], {1}
     5f4:	01000001 	tsteq	r0, r1
     5f8:	0000e426 	andeq	lr, r0, r6, lsr #8
     5fc:	00008820 	andeq	r8, r0, r0, lsr #16
     600:	5b9c0100 	blpl	fe700a08 <p2+0xde6fe888>
     604:	18000005 	stmdane	r0, {r0, r2}
     608:	2601006f 	strcs	r0, [r1], -pc, rrx
     60c:	00000266 	andeq	r0, r0, r6, ror #4
     610:	00749102 	rsbseq	r9, r4, r2, lsl #2
     614:	00019f17 	andeq	r9, r1, r7, lsl pc
     618:	ac1c0100 	ldfges	f0, [ip], {-0}
     61c:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
     620:	01000000 	mrseq	r0, (UNDEF: 0)
     624:	0005999c 	muleq	r5, ip, r9
     628:	006f1800 	rsbeq	r1, pc, r0, lsl #16
     62c:	02661c01 	rsbeq	r1, r6, #256	; 0x100
     630:	91020000 	mrsls	r0, (UNDEF: 2)
     634:	02f31974 	rscseq	r1, r3, #116, 18	; 0x1d0000
     638:	1c010000 	stcne	0, cr0, [r1], {-0}
     63c:	0000015b 	andeq	r0, r0, fp, asr r1
     640:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
     644:	00000235 	andeq	r0, r0, r5, lsr r2
     648:	015b1c01 	cmpeq	fp, r1, lsl #24
     64c:	91020000 	mrsls	r0, (UNDEF: 2)
     650:	541a006c 	ldrpl	r0, [sl], #-108	; 0xffffff94
     654:	01000001 	tsteq	r0, r1
     658:	0000000e 	andeq	r0, r0, lr
     65c:	00000c20 	andeq	r0, r0, r0, lsr #24
     660:	009c0100 	addseq	r0, ip, r0, lsl #2
     664:	0000059e 	muleq	r0, lr, r5
     668:	02040004 	andeq	r0, r4, #4
     66c:	01040000 	mrseq	r0, (UNDEF: 4)
     670:	0000000c 	andeq	r0, r0, ip
     674:	00033e0c 	andeq	r3, r3, ip, lsl #28
     678:	0000db00 	andeq	sp, r0, r0, lsl #22
     67c:	00050800 	andeq	r0, r5, r0, lsl #16
     680:	00067c20 	andeq	r7, r6, r0, lsr #24
     684:	00019100 	andeq	r9, r1, r0, lsl #2
     688:	02cf0200 	sbceq	r0, pc, #0, 4
     68c:	07020000 	streq	r0, [r2, -r0]
     690:	00000030 	andeq	r0, r0, r0, lsr r0
     694:	3d070403 	cfstrscc	mvf0, [r7, #-12]
     698:	02000001 	andeq	r0, r0, #1
     69c:	000002c6 	andeq	r0, r0, r6, asr #5
     6a0:	00420802 	subeq	r0, r2, r2, lsl #16
     6a4:	02030000 	andeq	r0, r3, #0
     6a8:	00013707 	andeq	r3, r1, r7, lsl #14
     6ac:	02810200 	addeq	r0, r1, #0, 4
     6b0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     6b4:	00000054 	andeq	r0, r0, r4, asr r0
     6b8:	29080103 	stmdbcs	r8, {r0, r1, r8}
     6bc:	04000001 	streq	r0, [r0], #-1
     6c0:	e80b0218 	stmda	fp, {r3, r4, r9}
     6c4:	05000000 	streq	r0, [r0, #-0]
     6c8:	000002dd 	ldrdeq	r0, [r0], -sp
     6cc:	00250c02 	eoreq	r0, r5, r2, lsl #24
     6d0:	05000000 	streq	r0, [r0, #-0]
     6d4:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     6d8:	00370d02 	eorseq	r0, r7, r2, lsl #26
     6dc:	05040000 	streq	r0, [r4, #-0]
     6e0:	00000251 	andeq	r0, r0, r1, asr r2
     6e4:	00370e02 	eorseq	r0, r7, r2, lsl #28
     6e8:	05060000 	streq	r0, [r6, #-0]
     6ec:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
     6f0:	00250f02 	eoreq	r0, r5, r2, lsl #30
     6f4:	05080000 	streq	r0, [r8, #-0]
     6f8:	00000266 	andeq	r0, r0, r6, ror #4
     6fc:	00251002 	eoreq	r1, r5, r2
     700:	050c0000 	streq	r0, [ip, #-0]
     704:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     708:	00491102 	subeq	r1, r9, r2, lsl #2
     70c:	05100000 	ldreq	r0, [r0, #-0]
     710:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     714:	00491202 	subeq	r1, r9, r2, lsl #4
     718:	05110000 	ldreq	r0, [r1, #-0]
     71c:	0000023c 	andeq	r0, r0, ip, lsr r2
     720:	00371302 	eorseq	r1, r7, r2, lsl #6
     724:	05120000 	ldreq	r0, [r2, #-0]
     728:	00000289 	andeq	r0, r0, r9, lsl #5
     72c:	00491402 	subeq	r1, r9, r2, lsl #8
     730:	05140000 	ldreq	r0, [r4, #-0]
     734:	000001d4 	ldrdeq	r0, [r0], -r4
     738:	00491502 	subeq	r1, r9, r2, lsl #10
     73c:	05150000 	ldreq	r0, [r5, #-0]
     740:	000001e9 	andeq	r0, r0, r9, ror #3
     744:	00371602 	eorseq	r1, r7, r2, lsl #12
     748:	00160000 	andseq	r0, r6, r0
     74c:	00022402 	andeq	r2, r2, r2, lsl #8
     750:	5b170200 	blpl	5c0f58 <startup-0x1fa3f0a8>
     754:	06000000 	streq	r0, [r0], -r0
     758:	000001dc 	ldrdeq	r0, [r0], -ip
     75c:	14040302 	strne	r0, [r4], #-770	; 0xfffffcfe
     760:	07000001 	streq	r0, [r0, -r1]
     764:	06030078 			; <UNDEFINED> instruction: 0x06030078
     768:	00000054 	andeq	r0, r0, r4, asr r0
     76c:	00790700 	rsbseq	r0, r9, r0, lsl #14
     770:	00540703 	subseq	r0, r4, r3, lsl #14
     774:	00010000 	andeq	r0, r1, r0
     778:	0001e302 	andeq	lr, r1, r2, lsl #6
     77c:	f3080300 	vcgt.u8	d0, d8, d0
     780:	06000000 	streq	r0, [r0], -r0
     784:	00000277 	andeq	r0, r0, r7, ror r2
     788:	5b0a0334 	blpl	281460 <startup-0x1fd7eba0>
     78c:	05000001 	streq	r0, [r0, #-1]
     790:	000002e3 	andeq	r0, r0, r3, ror #5
     794:	015b0c03 	cmpeq	fp, r3, lsl #24
     798:	05000000 	streq	r0, [r0, #-0]
     79c:	00000271 	andeq	r0, r0, r1, ror r2
     7a0:	015b0d03 	cmpeq	fp, r3, lsl #26
     7a4:	05040000 	streq	r0, [r4, #-0]
     7a8:	00000290 	muleq	r0, r0, r2
     7ac:	015b0e03 	cmpeq	fp, r3, lsl #28
     7b0:	07080000 	streq	r0, [r8, -r0]
     7b4:	03007870 	movweq	r7, #2160	; 0x870
     7b8:	0001620f 	andeq	r6, r1, pc, lsl #4
     7bc:	08000c00 	stmdaeq	r0, {sl, fp}
     7c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     7c4:	14090074 	strne	r0, [r9], #-116	; 0xffffff8c
     7c8:	72000001 	andvc	r0, r0, #1
     7cc:	0a000001 	beq	7d8 <startup-0x1ffff828>
     7d0:	00000030 	andeq	r0, r0, r0, lsr r0
     7d4:	4a020013 	bmi	80828 <startup-0x1ff7f7d8>
     7d8:	03000001 	movweq	r0, #1
     7dc:	00017d10 	andeq	r7, r1, r0, lsl sp
     7e0:	1f040b00 	svcne	0x00040b00
     7e4:	06000001 	streq	r0, [r0], -r1
     7e8:	000002d8 	ldrdeq	r0, [r0], -r8
     7ec:	fc120324 	ldc2	3, cr0, [r2], {36}	; 0x24
     7f0:	07000001 	streq	r0, [r0, -r1]
     7f4:	006f6567 	rsbeq	r6, pc, r7, ror #10
     7f8:	01721303 	cmneq	r2, r3, lsl #6
     7fc:	05000000 	streq	r0, [r0, #-0]
     800:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     804:	015b1403 	cmpeq	fp, r3, lsl #8
     808:	05040000 	streq	r0, [r4, #-0]
     80c:	0000025c 	andeq	r0, r0, ip, asr r2
     810:	015b1403 	cmpeq	fp, r3, lsl #8
     814:	05080000 	streq	r0, [r8, #-0]
     818:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     81c:	015b1503 	cmpeq	fp, r3, lsl #10
     820:	050c0000 	streq	r0, [ip, #-0]
     824:	00000204 	andeq	r0, r0, r4, lsl #4
     828:	015b1503 	cmpeq	fp, r3, lsl #10
     82c:	05100000 	ldreq	r0, [r0, #-0]
     830:	0000019a 	muleq	r0, sl, r1
     834:	020d1603 	andeq	r1, sp, #3145728	; 0x300000
     838:	05140000 	ldreq	r0, [r4, #-0]
     83c:	000003a3 	andeq	r0, r0, r3, lsr #7
     840:	020d1703 	andeq	r1, sp, #786432	; 0xc0000
     844:	05180000 	ldreq	r0, [r8, #-0]
     848:	000002c1 	andeq	r0, r0, r1, asr #5
     84c:	020d1803 	andeq	r1, sp, #196608	; 0x30000
     850:	051c0000 	ldreq	r0, [ip, #-0]
     854:	000001f5 	strdeq	r0, [r0], -r5
     858:	02281903 	eoreq	r1, r8, #49152	; 0xc000
     85c:	00200000 	eoreq	r0, r0, r0
     860:	0002070c 	andeq	r0, r2, ip, lsl #14
     864:	02070d00 	andeq	r0, r7, #0, 26
     868:	0b000000 	bleq	870 <startup-0x1ffff790>
     86c:	00018304 	andeq	r8, r1, r4, lsl #6
     870:	fc040b00 	stc2	11, cr0, [r4], {-0}	; <UNPREDICTABLE>
     874:	0c000001 	stceq	0, cr0, [r0], {1}
     878:	00000228 	andeq	r0, r0, r8, lsr #4
     87c:	0002070d 	andeq	r0, r2, sp, lsl #14
     880:	015b0d00 	cmpeq	fp, r0, lsl #26
     884:	5b0d0000 	blpl	34088c <startup-0x1fcbf774>
     888:	00000001 	andeq	r0, r0, r1
     88c:	0213040b 	andseq	r0, r3, #184549376	; 0xb000000
     890:	05020000 	streq	r0, [r2, #-0]
     894:	03000003 	movweq	r0, #3
     898:	0002071a 	andeq	r0, r2, sl, lsl r7
     89c:	03d10e00 	bicseq	r0, r1, #0, 28
     8a0:	e5010000 	str	r0, [r1, #-0]
     8a4:	20000af2 	strdcs	r0, [r0], -r2
     8a8:	00000092 	muleq	r0, r2, r0
     8ac:	02919c01 	addseq	r9, r1, #256	; 0x100
     8b0:	6f0f0000 	svcvs	0x000f0000
     8b4:	01006a62 	tsteq	r0, r2, ror #20
     8b8:	00022ee5 	andeq	r2, r2, r5, ror #29
     8bc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     8c0:	01007010 	tsteq	r0, r0, lsl r0
     8c4:	000049e7 	andeq	r4, r0, r7, ror #19
     8c8:	6f910200 	svcvs	0x00910200
     8cc:	01006e10 	tsteq	r0, r0, lsl lr
     8d0:	000049e8 	andeq	r4, r0, r8, ror #19
     8d4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     8d8:	00042211 	andeq	r2, r4, r1, lsl r2
     8dc:	49e90100 	stmibmi	r9!, {r8}^
     8e0:	02000000 	andeq	r0, r0, #0
     8e4:	0d116d91 	ldceq	13, cr6, [r1, #-580]	; 0xfffffdbc
     8e8:	01000003 	tsteq	r0, r3
     8ec:	000049ea 	andeq	r4, r0, sl, ror #19
     8f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8f4:	032d0e00 			; <UNDEFINED> instruction: 0x032d0e00
     8f8:	d3010000 	movwle	r0, #4096	; 0x1000
     8fc:	20000a60 	andcs	r0, r0, r0, ror #20
     900:	00000092 	muleq	r0, r2, r0
     904:	02f59c01 	rscseq	r9, r5, #256	; 0x100
     908:	6f0f0000 	svcvs	0x000f0000
     90c:	01006a62 	tsteq	r0, r2, ror #20
     910:	00022ed3 	ldrdeq	r2, [r2], -r3
     914:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     918:	01007010 	tsteq	r0, r0, lsl r0
     91c:	000049d5 	ldrdeq	r4, [r0], -r5
     920:	6f910200 	svcvs	0x00910200
     924:	01006e10 	tsteq	r0, r0, lsl lr
     928:	000049d6 	ldrdeq	r4, [r0], -r6
     92c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     930:	00042211 	andeq	r2, r4, r1, lsl r2
     934:	49d70100 	ldmibmi	r7, {r8}^
     938:	02000000 	andeq	r0, r0, #0
     93c:	0d116d91 	ldceq	13, cr6, [r1, #-580]	; 0xfffffdbc
     940:	01000003 	tsteq	r0, r3
     944:	000049d8 	ldrdeq	r4, [r0], -r8
     948:	6c910200 	lfmvs	f0, 4, [r1], {0}
     94c:	01007310 	tsteq	r0, r0, lsl r3
     950:	000114da 	ldrdeq	r1, [r1], -sl
     954:	68910200 	ldmvs	r1, {r9}
     958:	03270e00 			; <UNDEFINED> instruction: 0x03270e00
     95c:	a7010000 	strge	r0, [r1, -r0]
     960:	200008cc 	andcs	r0, r0, ip, asr #17
     964:	00000194 	muleq	r0, r4, r1
     968:	03679c01 	cmneq	r7, #256	; 0x100
     96c:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
     970:	5ba70100 	blpl	fe9c0d78 <p2+0xde9bebf8>
     974:	02000001 	andeq	r0, r0, #1
     978:	790f5c91 	stmdbvc	pc, {r0, r4, r7, sl, fp, ip, lr}	; <UNPREDICTABLE>
     97c:	5ba70100 	blpl	fe9c0d84 <p2+0xde9bec04>
     980:	02000001 	andeq	r0, r0, #1
     984:	730f5891 	movwvc	r5, #63633	; 0xf891
     988:	01007465 	tsteq	r0, r5, ror #8
     98c:	00015ba7 	andeq	r5, r1, r7, lsr #23
     990:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     994:	0003de11 	andeq	sp, r3, r1, lsl lr
     998:	49a90100 	stmibmi	r9!, {r8}
     99c:	02000000 	andeq	r0, r0, #0
     9a0:	63106f91 	tstvs	r0, #580	; 0x244
     9a4:	49a90100 	stmibmi	r9!, {r8}
     9a8:	02000000 	andeq	r0, r0, #0
     9ac:	1c116791 	ldcne	7, cr6, [r1], {145}	; 0x91
     9b0:	01000005 	tsteq	r0, r5
     9b4:	000049a9 	andeq	r4, r0, r9, lsr #19
     9b8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     9bc:	00040f11 	andeq	r0, r4, r1, lsl pc
     9c0:	5baa0100 	blpl	fea80dc8 <p2+0xdea7ec48>
     9c4:	02000001 	andeq	r0, r0, #1
     9c8:	0e006891 	mcreq	8, 0, r6, cr0, cr1, {4}
     9cc:	00000440 	andeq	r0, r0, r0, asr #8
     9d0:	08769a01 	ldmdaeq	r6!, {r0, r9, fp, ip, pc}^
     9d4:	00562000 	subseq	r2, r6, r0
     9d8:	9c010000 	stcls	0, cr0, [r1], {-0}
     9dc:	000003ad 	andeq	r0, r0, sp, lsr #7
     9e0:	00087c12 	andeq	r7, r8, r2, lsl ip
     9e4:	00004820 	andeq	r4, r0, r0, lsr #16
     9e8:	03391100 	teqeq	r9, #0, 2
     9ec:	9c010000 	stcls	0, cr0, [r1], {-0}
     9f0:	00000030 	andeq	r0, r0, r0, lsr r0
     9f4:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
     9f8:	2000089e 	mulcs	r0, lr, r8
     9fc:	0000001a 	andeq	r0, r0, sl, lsl r0
     a00:	64646110 	strbtvs	r6, [r4], #-272	; 0xfffffef0
     a04:	30a00100 	adccc	r0, r0, r0, lsl #2
     a08:	02000000 	andeq	r0, r0, #0
     a0c:	00007091 	muleq	r0, r1, r0
     a10:	03a90e00 			; <UNDEFINED> instruction: 0x03a90e00
     a14:	8a010000 	bhi	40a1c <startup-0x1ffbf5e4>
     a18:	2000081a 	andcs	r0, r0, sl, lsl r8
     a1c:	0000005c 	andeq	r0, r0, ip, asr r0
     a20:	03e19c01 	mvneq	r9, #256	; 0x100
     a24:	1d130000 	ldcne	0, cr0, [r3, #-0]
     a28:	01000001 	tsteq	r0, r1
     a2c:	00015b8d 	andeq	r5, r1, sp, lsl #23
     a30:	0003d300 	andeq	sp, r3, r0, lsl #6
     a34:	15001400 	strne	r1, [r0, #-1024]	; 0xfffffc00
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	015b8f01 	cmpeq	fp, r1, lsl #30
     a40:	00140000 	andseq	r0, r4, r0
     a44:	03150e00 	tsteq	r5, #0, 28
     a48:	76010000 	strvc	r0, [r1], -r0
     a4c:	200007c0 	andcs	r0, r0, r0, asr #15
     a50:	0000005a 	andeq	r0, r0, sl, asr r0
     a54:	04059c01 	streq	r9, [r5], #-3073	; 0xfffff3ff
     a58:	1c160000 	ldcne	0, cr0, [r6], {-0}
     a5c:	01000005 	tsteq	r0, r5
     a60:	00004976 	andeq	r4, r0, r6, ror r9
     a64:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     a68:	03921700 	orrseq	r1, r2, #0, 14
     a6c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     a70:	20000778 	andcs	r0, r0, r8, ror r7
     a74:	00000048 	andeq	r0, r0, r8, asr #32
     a78:	04339c01 	ldrteq	r9, [r3], #-3073	; 0xfffff3ff
     a7c:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
     a80:	546e0100 	strbtpl	r0, [lr], #-256	; 0xffffff00
     a84:	02000000 	andeq	r0, r0, #0
     a88:	63106f91 	tstvs	r0, #580	; 0x244
     a8c:	54700100 	ldrbtpl	r0, [r0], #-256	; 0xffffff00
     a90:	02000000 	andeq	r0, r0, #0
     a94:	17007791 			; <UNDEFINED> instruction: 0x17007791
     a98:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
     a9c:	07346601 	ldreq	r6, [r4, -r1, lsl #12]!
     aa0:	00442000 	subeq	r2, r4, r0
     aa4:	9c010000 	stcls	0, cr0, [r1], {-0}
     aa8:	00000461 	andeq	r0, r0, r1, ror #8
     aac:	0100780f 	tsteq	r0, pc, lsl #16
     ab0:	00004966 	andeq	r4, r0, r6, ror #18
     ab4:	6f910200 	svcvs	0x00910200
     ab8:	01006310 	tsteq	r0, r0, lsl r3
     abc:	00005468 	andeq	r5, r0, r8, ror #8
     ac0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ac4:	03721800 	cmneq	r2, #0, 16
     ac8:	60010000 	andvs	r0, r1, r0
     acc:	00000049 	andeq	r0, r0, r9, asr #32
     ad0:	2000070a 	andcs	r0, r0, sl, lsl #14
     ad4:	0000002a 	andeq	r0, r0, sl, lsr #32
     ad8:	04899c01 	streq	r9, [r9], #3073	; 0xc01
     adc:	1c160000 	ldcne	0, cr0, [r6], {-0}
     ae0:	01000005 	tsteq	r0, r5
     ae4:	00004960 	andeq	r4, r0, r0, ror #18
     ae8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     aec:	03e90e00 	mvneq	r0, #0, 28
     af0:	57010000 	strpl	r0, [r1, -r0]
     af4:	200006c4 	andcs	r0, r0, r4, asr #13
     af8:	00000046 	andeq	r0, r0, r6, asr #32
     afc:	04bb9c01 	ldrteq	r9, [fp], #3073	; 0xc01
     b00:	7f160000 	svcvc	0x00160000
     b04:	01000003 	tsteq	r0, r3
     b08:	00004957 	andeq	r4, r0, r7, asr r9
     b0c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     b10:	00051c16 	andeq	r1, r5, r6, lsl ip
     b14:	49570100 	ldmdbmi	r7, {r8}^
     b18:	02000000 	andeq	r0, r0, #0
     b1c:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
     b20:	0000042a 	andeq	r0, r0, sl, lsr #8
     b24:	06844f01 	streq	r4, [r4], r1, lsl #30
     b28:	00402000 	subeq	r2, r0, r0
     b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
     b30:	000004ed 	andeq	r0, r0, sp, ror #9
     b34:	00043816 	andeq	r3, r4, r6, lsl r8
     b38:	494f0100 	stmdbmi	pc, {r8}^	; <UNPREDICTABLE>
     b3c:	02000000 	andeq	r0, r0, #0
     b40:	1c167791 	ldcne	7, cr7, [r6], {145}	; 0x91
     b44:	01000005 	tsteq	r0, r5
     b48:	0000494f 	andeq	r4, r0, pc, asr #18
     b4c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     b50:	03840e00 	orreq	r0, r4, #0, 28
     b54:	37010000 	strcc	r0, [r1, -r0]
     b58:	20000604 	andcs	r0, r0, r4, lsl #12
     b5c:	00000080 	andeq	r0, r0, r0, lsl #1
     b60:	05359c01 	ldreq	r9, [r5, #-3073]!	; 0xfffff3ff
     b64:	e3160000 	tst	r6, #0
     b68:	01000003 	tsteq	r0, r3
     b6c:	00004937 	andeq	r4, r0, r7, lsr r9
     b70:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     b74:	00051c16 	andeq	r1, r5, r6, lsl ip
     b78:	49370100 	ldmdbmi	r7!, {r8}
     b7c:	02000000 	andeq	r0, r0, #0
     b80:	63197691 	tstvs	r9, #152043520	; 0x9100000
     b84:	49390100 	ldmdbmi	r9!, {r8}
     b88:	15000000 	strne	r0, [r0, #-0]
     b8c:	00000111 	andeq	r0, r0, r1, lsl r1
     b90:	015b0c01 	cmpeq	fp, r1, lsl #24
     b94:	00140000 	andseq	r0, r4, r0
     b98:	04151a00 	ldreq	r1, [r5], #-2560	; 0xfffff600
     b9c:	1d010000 	stcne	0, cr0, [r1, #-0]
     ba0:	00000049 	andeq	r0, r0, r9, asr #32
     ba4:	20000574 	andcs	r0, r0, r4, ror r5
     ba8:	00000090 	muleq	r0, r0, r0
     bac:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
     bb0:	1c160000 	ldcne	0, cr0, [r6], {-0}
     bb4:	01000005 	tsteq	r0, r5
     bb8:	0000491d 	andeq	r4, r0, sp, lsl r9
     bbc:	6f910200 	svcvs	0x00910200
     bc0:	01006310 	tsteq	r0, r0, lsl r3
     bc4:	0000491f 	andeq	r4, r0, pc, lsl r9
     bc8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     bcc:	00011115 	andeq	r1, r1, r5, lsl r1
     bd0:	5b0c0100 	blpl	300fd8 <startup-0x1fcff028>
     bd4:	14000001 	strne	r0, [r0], #-1
     bd8:	fc1b0000 	ldc2	0, cr0, [fp], {-0}
     bdc:	01000003 	tsteq	r0, r3
     be0:	00050805 	andeq	r0, r5, r5, lsl #16
     be4:	00006c20 	andeq	r6, r0, r0, lsr #24
     be8:	109c0100 	addsne	r0, ip, r0, lsl #2
     bec:	07010063 	streq	r0, [r1, -r3, rrx]
     bf0:	00000049 	andeq	r0, r0, r9, asr #32
     bf4:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
     bf8:	00000111 	andeq	r0, r0, r1, lsl r1
     bfc:	015b0c01 	cmpeq	fp, r1, lsl #24
     c00:	00140000 	andseq	r0, r4, r0
     c04:	02a30000 	adceq	r0, r3, #0
     c08:	00040000 	andeq	r0, r4, r0
     c0c:	0000039b 	muleq	r0, fp, r3
     c10:	000c0104 	andeq	r0, ip, r4, lsl #2
     c14:	4b0c0000 	blmi	300c1c <startup-0x1fcff3e4>
     c18:	db000005 	blle	c34 <startup-0x1ffff3cc>
     c1c:	84000000 	strhi	r0, [r0], #-0
     c20:	e820000b 	stmda	r0!, {r0, r1, r3}
     c24:	1b000002 	blne	c34 <startup-0x1ffff3cc>
     c28:	02000003 	andeq	r0, r0, #3
     c2c:	000002cf 	andeq	r0, r0, pc, asr #5
     c30:	00300702 	eorseq	r0, r0, r2, lsl #14
     c34:	04030000 	streq	r0, [r3], #-0
     c38:	00013d07 	andeq	r3, r1, r7, lsl #26
     c3c:	02c60200 	sbceq	r0, r6, #0, 4
     c40:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     c44:	00000042 	andeq	r0, r0, r2, asr #32
     c48:	37070203 	strcc	r0, [r7, -r3, lsl #4]
     c4c:	02000001 	andeq	r0, r0, #1
     c50:	00000281 	andeq	r0, r0, r1, lsl #5
     c54:	00540902 	subseq	r0, r4, r2, lsl #18
     c58:	01030000 	mrseq	r0, (UNDEF: 3)
     c5c:	00012908 	andeq	r2, r1, r8, lsl #18
     c60:	02180400 	andseq	r0, r8, #0, 8
     c64:	0000e80b 	andeq	lr, r0, fp, lsl #16
     c68:	02dd0500 	sbcseq	r0, sp, #0, 10
     c6c:	0c020000 	stceq	0, cr0, [r2], {-0}
     c70:	00000025 	andeq	r0, r0, r5, lsr #32
     c74:	01b50500 			; <UNDEFINED> instruction: 0x01b50500
     c78:	0d020000 	stceq	0, cr0, [r2, #-0]
     c7c:	00000037 	andeq	r0, r0, r7, lsr r0
     c80:	02510504 	subseq	r0, r1, #4, 10	; 0x1000000
     c84:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     c88:	00000037 	andeq	r0, r0, r7, lsr r0
     c8c:	02b10506 	adcseq	r0, r1, #25165824	; 0x1800000
     c90:	0f020000 	svceq	0x00020000
     c94:	00000025 	andeq	r0, r0, r5, lsr #32
     c98:	02660508 	rsbeq	r0, r6, #8, 10	; 0x2000000
     c9c:	10020000 	andne	r0, r2, r0
     ca0:	00000025 	andeq	r0, r0, r5, lsr #32
     ca4:	02b9050c 	adcseq	r0, r9, #12, 10	; 0x3000000
     ca8:	11020000 	mrsne	r0, (UNDEF: 2)
     cac:	00000049 	andeq	r0, r0, r9, asr #32
     cb0:	029f0510 	addseq	r0, pc, #16, 10	; 0x4000000
     cb4:	12020000 	andne	r0, r2, #0
     cb8:	00000049 	andeq	r0, r0, r9, asr #32
     cbc:	023c0511 	eorseq	r0, ip, #71303168	; 0x4400000
     cc0:	13020000 	movwne	r0, #8192	; 0x2000
     cc4:	00000037 	andeq	r0, r0, r7, lsr r0
     cc8:	02890512 	addeq	r0, r9, #75497472	; 0x4800000
     ccc:	14020000 	strne	r0, [r2], #-0
     cd0:	00000049 	andeq	r0, r0, r9, asr #32
     cd4:	01d40514 	bicseq	r0, r4, r4, lsl r5
     cd8:	15020000 	strne	r0, [r2, #-0]
     cdc:	00000049 	andeq	r0, r0, r9, asr #32
     ce0:	01e90515 	mvneq	r0, r5, lsl r5
     ce4:	16020000 	strne	r0, [r2], -r0
     ce8:	00000037 	andeq	r0, r0, r7, lsr r0
     cec:	24020016 	strcs	r0, [r2], #-22	; 0xffffffea
     cf0:	02000002 	andeq	r0, r0, #2
     cf4:	00005b17 	andeq	r5, r0, r7, lsl fp
     cf8:	057d0600 	ldrbeq	r0, [sp, #-1536]!	; 0xfffffa00
     cfc:	62010000 	andvs	r0, r1, #0
     d00:	20000dd2 	ldrdcs	r0, [r0], -r2
     d04:	0000009a 	muleq	r0, sl, r0
     d08:	37079c01 	strcc	r9, [r7, -r1, lsl #24]
     d0c:	01000005 	tsteq	r0, r5
     d10:	000d9c57 	andeq	r9, sp, r7, asr ip
     d14:	00003620 	andeq	r3, r0, r0, lsr #12
     d18:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
     d1c:	08000001 	stmdaeq	r0, {r0}
     d20:	00776f72 	rsbseq	r6, r7, r2, ror pc
     d24:	01445701 	cmpeq	r4, r1, lsl #14
     d28:	91020000 	mrsls	r0, (UNDEF: 2)
     d2c:	6f63086c 	svcvs	0x0063086c
     d30:	5701006c 	strpl	r0, [r1, -ip, rrx]
     d34:	00000144 	andeq	r0, r0, r4, asr #2
     d38:	09689102 	stmdbeq	r8!, {r1, r8, ip, pc}^
     d3c:	00000544 	andeq	r0, r0, r4, asr #10
     d40:	00305901 	eorseq	r5, r0, r1, lsl #18
     d44:	91020000 	mrsls	r0, (UNDEF: 2)
     d48:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
     d4c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     d50:	04f00700 	ldrbteq	r0, [r0], #1792	; 0x700
     d54:	4f010000 	svcmi	0x00010000
     d58:	20000d60 	andcs	r0, r0, r0, ror #26
     d5c:	0000003c 	andeq	r0, r0, ip, lsr r0
     d60:	016d9c01 	cmneq	sp, r1, lsl #24
     d64:	63080000 	movwvs	r0, #32768	; 0x8000
     d68:	544f0100 	strbpl	r0, [pc], #-256	; d70 <startup-0x1ffff290>
     d6c:	02000000 	andeq	r0, r0, #0
     d70:	0b007791 	bleq	1ebbc <startup-0x1ffe1444>
     d74:	00000501 	andeq	r0, r0, r1, lsl #10
     d78:	00544401 	subseq	r4, r4, r1, lsl #8
     d7c:	0d140000 	ldceq	0, cr0, [r4, #-0]
     d80:	004c2000 	subeq	r2, ip, r0
     d84:	9c010000 	stcls	0, cr0, [r1], {-0}
     d88:	00000194 	muleq	r0, r4, r1
     d8c:	0076720c 	rsbseq	r7, r6, ip, lsl #4
     d90:	00544601 	subseq	r4, r4, r1, lsl #12
     d94:	91020000 	mrsls	r0, (UNDEF: 2)
     d98:	de0b006f 	cdple	0, 0, cr0, cr11, cr15, {3}
     d9c:	01000004 	tsteq	r0, r4
     da0:	00005439 	andeq	r5, r0, r9, lsr r4
     da4:	000cc800 	andeq	ip, ip, r0, lsl #16
     da8:	00004c20 	andeq	r4, r0, r0, lsr #24
     dac:	bb9c0100 	bllt	fe7011b4 <p2+0xde6ff034>
     db0:	0c000001 	stceq	0, cr0, [r0], {1}
     db4:	01007672 	tsteq	r0, r2, ror r6
     db8:	0000543b 	andeq	r5, r0, fp, lsr r4
     dbc:	6f910200 	svcvs	0x00910200
     dc0:	04cd0700 	strbeq	r0, [sp], #1792	; 0x700
     dc4:	30010000 	andcc	r0, r1, r0
     dc8:	20000c9e 	mulcs	r0, lr, ip
     dcc:	0000002a 	andeq	r0, r0, sl, lsr #32
     dd0:	01df9c01 	bicseq	r9, pc, r1, lsl #24
     dd4:	7f0d0000 	svcvc	0x000d0000
     dd8:	01000003 	tsteq	r0, r3
     ddc:	00005430 	andeq	r5, r0, r0, lsr r4
     de0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     de4:	05270700 	streq	r0, [r7, #-1792]!	; 0xfffff900
     de8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     dec:	20000c74 	andcs	r0, r0, r4, ror ip
     df0:	0000002a 	andeq	r0, r0, sl, lsr #32
     df4:	02039c01 	andeq	r9, r3, #256	; 0x100
     df8:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
     dfc:	01000004 	tsteq	r0, r4
     e00:	00005428 	andeq	r5, r0, r8, lsr #8
     e04:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e08:	05110b00 	ldreq	r0, [r1, #-2816]	; 0xfffff500
     e0c:	1c010000 	stcne	0, cr0, [r1], {-0}
     e10:	00000054 	andeq	r0, r0, r4, asr r0
     e14:	20000c40 	andcs	r0, r0, r0, asr #24
     e18:	00000034 	andeq	r0, r0, r4, lsr r0
     e1c:	022a9c01 	eoreq	r9, sl, #256	; 0x100
     e20:	720c0000 	andvc	r0, ip, #0
     e24:	1e010076 	mcrne	0, 0, r0, cr1, cr6, {3}
     e28:	00000054 	andeq	r0, r0, r4, asr r0
     e2c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e30:	00049e07 	andeq	r9, r4, r7, lsl #28
     e34:	10140100 	andsne	r0, r4, r0, lsl #2
     e38:	3020000c 	eorcc	r0, r0, ip
     e3c:	01000000 	mrseq	r0, (UNDEF: 0)
     e40:	00024e9c 	muleq	r2, ip, lr
     e44:	04b50d00 	ldrteq	r0, [r5], #3328	; 0xd00
     e48:	14010000 	strne	r0, [r1], #-0
     e4c:	00000054 	andeq	r0, r0, r4, asr r0
     e50:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e54:	0004890e 	andeq	r8, r4, lr, lsl #18
     e58:	c80c0100 	stmdagt	ip, {r8}
     e5c:	4820000b 	stmdami	r0!, {r0, r1, r3}
     e60:	01000000 	mrseq	r0, (UNDEF: 0)
     e64:	00027c9c 	muleq	r2, ip, ip
     e68:	00780800 	rsbseq	r0, r8, r0, lsl #16
     e6c:	00540c01 	subseq	r0, r4, r1, lsl #24
     e70:	91020000 	mrsls	r0, (UNDEF: 2)
     e74:	00630c6f 	rsbeq	r0, r3, pc, ror #24
     e78:	00540e01 	subseq	r0, r4, r1, lsl #28
     e7c:	91020000 	mrsls	r0, (UNDEF: 2)
     e80:	ba0f0077 	blt	3c1064 <startup-0x1fc3ef9c>
     e84:	01000004 	tsteq	r0, r4
     e88:	000b8404 	andeq	r8, fp, r4, lsl #8
     e8c:	00004420 	andeq	r4, r0, r0, lsr #8
     e90:	089c0100 	ldmeq	ip, {r8}
     e94:	04010078 	streq	r0, [r1], #-120	; 0xffffff88
     e98:	00000054 	andeq	r0, r0, r4, asr r0
     e9c:	0c6f9102 	stfeqp	f1, [pc], #-8	; e9c <startup-0x1ffff164>
     ea0:	06010063 	streq	r0, [r1], -r3, rrx
     ea4:	00000054 	andeq	r0, r0, r4, asr r0
     ea8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     eac:	0001ca00 	andeq	ip, r1, r0, lsl #20
     eb0:	aa000400 	bge	1eb8 <startup-0x1fffe148>
     eb4:	04000004 	streq	r0, [r0], #-4
     eb8:	00000c01 	andeq	r0, r0, r1, lsl #24
     ebc:	05880c00 	streq	r0, [r8, #3072]	; 0xc00
     ec0:	00db0000 	sbcseq	r0, fp, r0
     ec4:	0e6c0000 	cdpeq	0, 6, cr0, cr12, cr0, {0}
     ec8:	01102000 	tsteq	r0, r0
     ecc:	03f80000 	mvnseq	r0, #0
     ed0:	cf020000 	svcgt	0x00020000
     ed4:	02000002 	andeq	r0, r0, #2
     ed8:	00003007 	andeq	r3, r0, r7
     edc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     ee0:	0000013d 	andeq	r0, r0, sp, lsr r1
     ee4:	0002c602 	andeq	ip, r2, r2, lsl #12
     ee8:	42080200 	andmi	r0, r8, #0, 4
     eec:	03000000 	movweq	r0, #0
     ef0:	01370702 	teqeq	r7, r2, lsl #14
     ef4:	81020000 	mrshi	r0, (UNDEF: 2)
     ef8:	02000002 	andeq	r0, r0, #2
     efc:	00005409 	andeq	r5, r0, r9, lsl #8
     f00:	08010300 	stmdaeq	r1, {r8, r9}
     f04:	00000129 	andeq	r0, r0, r9, lsr #2
     f08:	0b021804 	bleq	86f20 <startup-0x1ff790e0>
     f0c:	000000e8 	andeq	r0, r0, r8, ror #1
     f10:	0002dd05 	andeq	sp, r2, r5, lsl #26
     f14:	250c0200 	strcs	r0, [ip, #-512]	; 0xfffffe00
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	0001b505 	andeq	fp, r1, r5, lsl #10
     f20:	370d0200 	strcc	r0, [sp, -r0, lsl #4]
     f24:	04000000 	streq	r0, [r0], #-0
     f28:	00025105 	andeq	r5, r2, r5, lsl #2
     f2c:	370e0200 	strcc	r0, [lr, -r0, lsl #4]
     f30:	06000000 	streq	r0, [r0], -r0
     f34:	0002b105 	andeq	fp, r2, r5, lsl #2
     f38:	250f0200 	strcs	r0, [pc, #-512]	; d40 <startup-0x1ffff2c0>
     f3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f40:	00026605 	andeq	r6, r2, r5, lsl #12
     f44:	25100200 	ldrcs	r0, [r0, #-512]	; 0xfffffe00
     f48:	0c000000 	stceq	0, cr0, [r0], {-0}
     f4c:	0002b905 	andeq	fp, r2, r5, lsl #18
     f50:	49110200 	ldmdbmi	r1, {r9}
     f54:	10000000 	andne	r0, r0, r0
     f58:	00029f05 	andeq	r9, r2, r5, lsl #30
     f5c:	49120200 	ldmdbmi	r2, {r9}
     f60:	11000000 	mrsne	r0, (UNDEF: 0)
     f64:	00023c05 	andeq	r3, r2, r5, lsl #24
     f68:	37130200 	ldrcc	r0, [r3, -r0, lsl #4]
     f6c:	12000000 	andne	r0, r0, #0
     f70:	00028905 	andeq	r8, r2, r5, lsl #18
     f74:	49140200 	ldmdbmi	r4, {r9}
     f78:	14000000 	strne	r0, [r0], #-0
     f7c:	0001d405 	andeq	sp, r1, r5, lsl #8
     f80:	49150200 	ldmdbmi	r5, {r9}
     f84:	15000000 	strne	r0, [r0, #-0]
     f88:	0001e905 	andeq	lr, r1, r5, lsl #18
     f8c:	37160200 	ldrcc	r0, [r6, -r0, lsl #4]
     f90:	16000000 	strne	r0, [r0], -r0
     f94:	02240200 	eoreq	r0, r4, #0, 4
     f98:	17020000 	strne	r0, [r2, -r0]
     f9c:	0000005b 	andeq	r0, r0, fp, asr r0
     fa0:	0005b906 	andeq	fp, r5, r6, lsl #18
     fa4:	191e0100 	ldmdbne	lr, {r8}
     fa8:	28000001 	stmdacs	r0, {r0}
     fac:	5420000f 	strtpl	r0, [r0], #-15
     fb0:	01000000 	mrseq	r0, (UNDEF: 0)
     fb4:	0001199c 	muleq	r1, ip, r9
     fb8:	00630700 	rsbeq	r0, r3, r0, lsl #14
     fbc:	00542001 	subseq	r2, r4, r1
     fc0:	91020000 	mrsls	r0, (UNDEF: 2)
     fc4:	04080077 	streq	r0, [r8], #-119	; 0xffffff89
     fc8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     fcc:	05c30900 	strbeq	r0, [r3, #2304]	; 0x900
     fd0:	13010000 	movwne	r0, #4096	; 0x1000
     fd4:	20000ed4 	ldrdcs	r0, [r0], -r4
     fd8:	00000054 	andeq	r0, r0, r4, asr r0
     fdc:	01449c01 	cmpeq	r4, r1, lsl #24
     fe0:	720a0000 	andvc	r0, sl, #0
     fe4:	0100776f 	tsteq	r0, pc, ror #14
     fe8:	00003013 	andeq	r3, r0, r3, lsl r0
     fec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ff0:	02610b00 	rsbeq	r0, r1, #0, 22
     ff4:	03010000 	movweq	r0, #4096	; 0x1000
     ff8:	00000054 	andeq	r0, r0, r4, asr r0
     ffc:	20000e6c 	andcs	r0, r0, ip, ror #28
    1000:	00000068 	andeq	r0, r0, r8, rrx
    1004:	01c19c01 	biceq	r9, r1, r1, lsl #24
    1008:	6b070000 	blvs	1c1010 <startup-0x1fe3eff0>
    100c:	01007965 	tsteq	r0, r5, ror #18
    1010:	0001c105 	andeq	ip, r1, r5, lsl #2
    1014:	58910200 	ldmpl	r1, {r9}
    1018:	776f7207 	strbvc	r7, [pc, -r7, lsl #4]!
    101c:	19060100 	stmdbne	r6, {r8}
    1020:	02000001 	andeq	r0, r0, #1
    1024:	63076c91 	movwvs	r6, #31889	; 0x7c91
    1028:	01006c6f 	tsteq	r0, pc, ror #24
    102c:	00011906 	andeq	r1, r1, r6, lsl #18
    1030:	68910200 	ldmvs	r1, {r9}
    1034:	0005c30c 	andeq	ip, r5, ip, lsl #6
    1038:	19080100 	stmdbne	r8, {r8}
    103c:	98000001 	stmdals	r0, {r0}
    1040:	0d000001 	stceq	0, cr0, [r0, #-4]
    1044:	0e840e00 	cdpeq	14, 8, cr0, cr4, cr0, {0}
    1048:	002e2000 	eoreq	r2, lr, r0
    104c:	c30c0000 	movwgt	r0, #49152	; 0xc000
    1050:	01000005 	tsteq	r0, r5
    1054:	00011908 	andeq	r1, r1, r8, lsl #18
    1058:	0001b200 	andeq	fp, r1, r0, lsl #4
    105c:	0f000d00 	svceq	0x00000d00
    1060:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    1064:	01190901 	tsteq	r9, r1, lsl #18
    1068:	000d0000 	andeq	r0, sp, r0
    106c:	54100000 	ldrpl	r0, [r0], #-0
    1070:	11000000 	mrsne	r0, (UNDEF: 0)
    1074:	00000030 	andeq	r0, r0, r0, lsr r0
    1078:	Address 0x00001078 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f00 	tsteq	r9, #0, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	1119270b 	tstne	r9, fp, lsl #14
  2c:	40061201 	andmi	r1, r6, r1, lsl #4
  30:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  34:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
  38:	03193f01 	tsteq	r9, #1, 30
  3c:	3b0b3a0e 	blcc	2ce87c <startup-0x1fd31784>
  40:	1119270b 	tstne	r9, fp, lsl #14
  44:	40061201 	andmi	r1, r6, r1, lsl #4
  48:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  4c:	00001301 	andeq	r1, r0, r1, lsl #6
  50:	03003405 	movweq	r3, #1029	; 0x405
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  5c:	06000018 			; <UNDEFINED> instruction: 0x06000018
  60:	08030005 	stmdaeq	r3, {r0, r2}
  64:	0b3b0b3a 	bleq	ec2d54 <startup-0x1f13d2ac>
  68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  6c:	24070000 	strcs	r0, [r7], #-0
  70:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  74:	0008030b 	andeq	r0, r8, fp, lsl #6
  78:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
  7c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  80:	0b3b0b3a 	bleq	ec2d70 <startup-0x1f13d290>
  84:	01111927 	tsteq	r1, r7, lsr #18
  88:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  8c:	00194297 	mulseq	r9, r7, r2
  90:	11010000 	mrsne	r0, (UNDEF: 1)
  94:	130e2501 	movwne	r2, #58625	; 0xe501
  98:	1b0e030b 	blne	380ccc <startup-0x1fc7f334>
  9c:	1117550e 	tstne	r7, lr, lsl #10
  a0:	00171001 	andseq	r1, r7, r1
  a4:	00160200 	andseq	r0, r6, r0, lsl #4
  a8:	0b3a0e03 	bleq	e838bc <startup-0x1f17c744>
  ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b0:	24030000 	strcs	r0, [r3], #-0
  b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b8:	000e030b 	andeq	r0, lr, fp, lsl #6
  bc:	01130400 	tsteq	r3, r0, lsl #8
  c0:	0b3a0b0b 	bleq	e82cf4 <startup-0x1f17d30c>
  c4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  c8:	0d050000 	stceq	0, cr0, [r5, #-0]
  cc:	3a0e0300 	bcc	380cd4 <startup-0x1fc7f32c>
  d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d4:	000b3813 	andeq	r3, fp, r3, lsl r8
  d8:	01130600 	tsteq	r3, r0, lsl #12
  dc:	0b0b0e03 	bleq	2c38f0 <startup-0x1fd3c710>
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	03000d07 	movweq	r0, #3335	; 0xd07
  ec:	3b0b3a08 	blcc	2ce914 <startup-0x1fd316ec>
  f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  f4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  f8:	0b0b0024 	bleq	2c0190 <startup-0x1fd3fe70>
  fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 100:	01090000 	mrseq	r0, (UNDEF: 9)
 104:	01134901 	tsteq	r3, r1, lsl #18
 108:	0a000013 	beq	15c <startup-0x1ffffea4>
 10c:	13490021 	movtne	r0, #36897	; 0x9021
 110:	00000b2f 	andeq	r0, r0, pc, lsr #22
 114:	0b000f0b 	bleq	3d48 <startup-0x1fffc2b8>
 118:	0013490b 	andseq	r4, r3, fp, lsl #18
 11c:	01150c00 	tsteq	r5, r0, lsl #24
 120:	13011927 	movwne	r1, #6439	; 0x1927
 124:	050d0000 	streq	r0, [sp, #-0]
 128:	00134900 	andseq	r4, r3, r0, lsl #18
 12c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 130:	0b3a0e03 	bleq	e83944 <startup-0x1f17c6bc>
 134:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 138:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 13c:	340f0000 	strcc	r0, [pc], #-0	; 144 <startup-0x1ffffebc>
 140:	3a0e0300 	bcc	380d48 <startup-0x1fc7f2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	00180213 	andseq	r0, r8, r3, lsl r2
 14c:	00341000 	eorseq	r1, r4, r0
 150:	0b3a0803 	bleq	e82164 <startup-0x1f17de9c>
 154:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 158:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 15c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 160:	03193f01 	tsteq	r9, #1, 30
 164:	3b0b3a0e 	blcc	2ce9a4 <startup-0x1fd3165c>
 168:	1119270b 	tstne	r9, fp, lsl #14
 16c:	40061201 	andmi	r1, r6, r1, lsl #4
 170:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 174:	00001301 	andeq	r1, r0, r1, lsl #6
 178:	03003412 	movweq	r3, #1042	; 0x412
 17c:	3b0b3a08 	blcc	2ce9a4 <startup-0x1fd3165c>
 180:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 184:	13000018 	movwne	r0, #24
 188:	0111010b 	tsteq	r1, fp, lsl #2
 18c:	00000612 	andeq	r0, r0, r2, lsl r6
 190:	3f012e14 	svccc	0x00012e14
 194:	3a0e0319 	bcc	380e00 <startup-0x1fc7f200>
 198:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	01193c13 	tsteq	r9, r3, lsl ip
 1a0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 1a4:	00000018 	andeq	r0, r0, r8, lsl r0
 1a8:	11010b16 	tstne	r1, r6, lsl fp
 1ac:	01061201 	tsteq	r6, r1, lsl #4
 1b0:	17000013 	smladne	r0, r3, r0, r0
 1b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1b8:	0b3a0e03 	bleq	e839cc <startup-0x1f17c634>
 1bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1c8:	00130119 	andseq	r0, r3, r9, lsl r1
 1cc:	00051800 	andeq	r1, r5, r0, lsl #16
 1d0:	0b3a0803 	bleq	e821e4 <startup-0x1f17de1c>
 1d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1d8:	00001802 	andeq	r1, r0, r2, lsl #16
 1dc:	03000519 	movweq	r0, #1305	; 0x519
 1e0:	3b0b3a0e 	blcc	2cea20 <startup-0x1fd315e0>
 1e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1e8:	1a000018 	bne	250 <startup-0x1ffffdb0>
 1ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 200:	00000019 	andeq	r0, r0, r9, lsl r0
 204:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 208:	030b130e 	movweq	r1, #45838	; 0xb30e
 20c:	110e1b0e 	tstne	lr, lr, lsl #22
 210:	10061201 	andne	r1, r6, r1, lsl #4
 214:	02000017 	andeq	r0, r0, #23
 218:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 21c:	0b3b0b3a 	bleq	ec2f0c <startup-0x1f13d0f4>
 220:	00001349 	andeq	r1, r0, r9, asr #6
 224:	0b002403 	bleq	9238 <startup-0x1fff6dc8>
 228:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 22c:	0400000e 	streq	r0, [r0], #-14
 230:	0b0b0113 	bleq	2c0684 <startup-0x1fd3f97c>
 234:	0b3b0b3a 	bleq	ec2f24 <startup-0x1f13d0dc>
 238:	00001301 	andeq	r1, r0, r1, lsl #6
 23c:	03000d05 	movweq	r0, #3333	; 0xd05
 240:	3b0b3a0e 	blcc	2cea80 <startup-0x1fd31580>
 244:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 248:	0600000b 	streq	r0, [r0], -fp
 24c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 250:	0b3a0b0b 	bleq	e82e84 <startup-0x1f17d17c>
 254:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 258:	0d070000 	stceq	0, cr0, [r7, #-0]
 25c:	3a080300 	bcc	200e64 <startup-0x1fdff19c>
 260:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 264:	000b3813 	andeq	r3, fp, r3, lsl r8
 268:	00240800 	eoreq	r0, r4, r0, lsl #16
 26c:	0b3e0b0b 	bleq	f82ea0 <startup-0x1f07d160>
 270:	00000803 	andeq	r0, r0, r3, lsl #16
 274:	49010109 	stmdbmi	r1, {r0, r3, r8}
 278:	00130113 	andseq	r0, r3, r3, lsl r1
 27c:	00210a00 	eoreq	r0, r1, r0, lsl #20
 280:	0b2f1349 	bleq	bc4fac <startup-0x1f43b054>
 284:	0f0b0000 	svceq	0x000b0000
 288:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 28c:	0c000013 	stceq	0, cr0, [r0], {19}
 290:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 294:	00001301 	andeq	r1, r0, r1, lsl #6
 298:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
 29c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 2a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2b4:	00130119 	andseq	r0, r3, r9, lsl r1
 2b8:	00050f00 	andeq	r0, r5, r0, lsl #30
 2bc:	0b3a0803 	bleq	e822d0 <startup-0x1f17dd30>
 2c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2c4:	00001802 	andeq	r1, r0, r2, lsl #16
 2c8:	03003410 	movweq	r3, #1040	; 0x410
 2cc:	3b0b3a08 	blcc	2ceaf4 <startup-0x1fd3150c>
 2d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2d4:	11000018 	tstne	r0, r8, lsl r0
 2d8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2dc:	0b3b0b3a 	bleq	ec2fcc <startup-0x1f13d034>
 2e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2e4:	0b120000 	bleq	4802ec <startup-0x1fb7fd14>
 2e8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 2ec:	13000006 	movwne	r0, #6
 2f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2f4:	0b3a0e03 	bleq	e83b08 <startup-0x1f17c4f8>
 2f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2fc:	1301193c 	movwne	r1, #6460	; 0x193c
 300:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
 304:	15000000 	strne	r0, [r0, #-0]
 308:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 30c:	0b3a0e03 	bleq	e83b20 <startup-0x1f17c4e0>
 310:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 314:	0000193c 	andeq	r1, r0, ip, lsr r9
 318:	03000516 	movweq	r0, #1302	; 0x516
 31c:	3b0b3a0e 	blcc	2ceb5c <startup-0x1fd314a4>
 320:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 324:	17000018 	smladne	r0, r8, r0, r0
 328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 32c:	0b3a0e03 	bleq	e83b40 <startup-0x1f17c4c0>
 330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 334:	06120111 			; <UNDEFINED> instruction: 0x06120111
 338:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 33c:	00130119 	andseq	r0, r3, r9, lsl r1
 340:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 344:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 348:	0b3b0b3a 	bleq	ec3038 <startup-0x1f13cfc8>
 34c:	13491927 	movtne	r1, #39207	; 0x9927
 350:	06120111 			; <UNDEFINED> instruction: 0x06120111
 354:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 358:	00130119 	andseq	r0, r3, r9, lsl r1
 35c:	00341900 	eorseq	r1, r4, r0, lsl #18
 360:	0b3a0803 	bleq	e82374 <startup-0x1f17dc8c>
 364:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 368:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 36c:	3a0e0301 	bcc	380f78 <startup-0x1fc7f088>
 370:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 374:	11134919 	tstne	r3, r9, lsl r9
 378:	40061201 	andmi	r1, r6, r1, lsl #4
 37c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 380:	00001301 	andeq	r1, r0, r1, lsl #6
 384:	03012e1b 	movweq	r2, #7707	; 0x1e1b
 388:	3b0b3a0e 	blcc	2cebc8 <startup-0x1fd31438>
 38c:	1119270b 	tstne	r9, fp, lsl #14
 390:	40061201 	andmi	r1, r6, r1, lsl #4
 394:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 398:	01000000 	mrseq	r0, (UNDEF: 0)
 39c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 3a0:	0e030b13 	vmoveq.32	d3[0], r0
 3a4:	01110e1b 	tsteq	r1, fp, lsl lr
 3a8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 3ac:	16020000 	strne	r0, [r2], -r0
 3b0:	3a0e0300 	bcc	380fb8 <startup-0x1fc7f048>
 3b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3b8:	03000013 	movweq	r0, #19
 3bc:	0b0b0024 	bleq	2c0454 <startup-0x1fd3fbac>
 3c0:	0e030b3e 	vmoveq.16	d3[0], r0
 3c4:	13040000 	movwne	r0, #16384	; 0x4000
 3c8:	3a0b0b01 	bcc	2c2fd4 <startup-0x1fd3d02c>
 3cc:	010b3b0b 	tsteq	fp, fp, lsl #22
 3d0:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 3d4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 3d8:	0b3b0b3a 	bleq	ec30c8 <startup-0x1f13cf38>
 3dc:	0b381349 	bleq	e05108 <startup-0x1f1faef8>
 3e0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 3e4:	03193f00 	tsteq	r9, #0, 30
 3e8:	3b0b3a0e 	blcc	2cec28 <startup-0x1fd313d8>
 3ec:	1119270b 	tstne	r9, fp, lsl #14
 3f0:	40061201 	andmi	r1, r6, r1, lsl #4
 3f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3f8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 3fc:	03193f01 	tsteq	r9, #1, 30
 400:	3b0b3a0e 	blcc	2cec40 <startup-0x1fd313c0>
 404:	1119270b 	tstne	r9, fp, lsl #14
 408:	40061201 	andmi	r1, r6, r1, lsl #4
 40c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 410:	00001301 	andeq	r1, r0, r1, lsl #6
 414:	03000508 	movweq	r0, #1288	; 0x508
 418:	3b0b3a08 	blcc	2cec40 <startup-0x1fd313c0>
 41c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 420:	09000018 	stmdbeq	r0, {r3, r4}
 424:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 428:	0b3b0b3a 	bleq	ec3118 <startup-0x1f13cee8>
 42c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 430:	240a0000 	strcs	r0, [sl], #-0
 434:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 438:	0008030b 	andeq	r0, r8, fp, lsl #6
 43c:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 440:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 444:	0b3b0b3a 	bleq	ec3134 <startup-0x1f13cecc>
 448:	13491927 	movtne	r1, #39207	; 0x9927
 44c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 450:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 454:	00130119 	andseq	r0, r3, r9, lsl r1
 458:	00340c00 	eorseq	r0, r4, r0, lsl #24
 45c:	0b3a0803 	bleq	e82470 <startup-0x1f17db90>
 460:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 464:	00001802 	andeq	r1, r0, r2, lsl #16
 468:	0300050d 	movweq	r0, #1293	; 0x50d
 46c:	3b0b3a0e 	blcc	2cecac <startup-0x1fd31354>
 470:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 474:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 478:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 47c:	0b3a0e03 	bleq	e83c90 <startup-0x1f17c370>
 480:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 484:	06120111 			; <UNDEFINED> instruction: 0x06120111
 488:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 48c:	00130119 	andseq	r0, r3, r9, lsl r1
 490:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 494:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 498:	0b3b0b3a 	bleq	ec3188 <startup-0x1f13ce78>
 49c:	01111927 	tsteq	r1, r7, lsr #18
 4a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4a4:	00194297 	mulseq	r9, r7, r2
 4a8:	11010000 	mrsne	r0, (UNDEF: 1)
 4ac:	130e2501 	movwne	r2, #58625	; 0xe501
 4b0:	1b0e030b 	blne	3810e4 <startup-0x1fc7ef1c>
 4b4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4b8:	00171006 	andseq	r1, r7, r6
 4bc:	00160200 	andseq	r0, r6, r0, lsl #4
 4c0:	0b3a0e03 	bleq	e83cd4 <startup-0x1f17c32c>
 4c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4c8:	24030000 	strcs	r0, [r3], #-0
 4cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4d0:	000e030b 	andeq	r0, lr, fp, lsl #6
 4d4:	01130400 	tsteq	r3, r0, lsl #8
 4d8:	0b3a0b0b 	bleq	e8310c <startup-0x1f17cef4>
 4dc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 4e0:	0d050000 	stceq	0, cr0, [r5, #-0]
 4e4:	3a0e0300 	bcc	3810ec <startup-0x1fc7ef14>
 4e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ec:	000b3813 	andeq	r3, fp, r3, lsl r8
 4f0:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
 4f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4f8:	0b3b0b3a 	bleq	ec31e8 <startup-0x1f13ce18>
 4fc:	13491927 	movtne	r1, #39207	; 0x9927
 500:	06120111 			; <UNDEFINED> instruction: 0x06120111
 504:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 508:	00130119 	andseq	r0, r3, r9, lsl r1
 50c:	00340700 	eorseq	r0, r4, r0, lsl #14
 510:	0b3a0803 	bleq	e82524 <startup-0x1f17dadc>
 514:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 518:	00001802 	andeq	r1, r0, r2, lsl #16
 51c:	0b002408 	bleq	9544 <startup-0x1fff6abc>
 520:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 524:	09000008 	stmdbeq	r0, {r3}
 528:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 52c:	0b3a0e03 	bleq	e83d40 <startup-0x1f17c2c0>
 530:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 534:	06120111 			; <UNDEFINED> instruction: 0x06120111
 538:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 53c:	00130119 	andseq	r0, r3, r9, lsl r1
 540:	00050a00 	andeq	r0, r5, r0, lsl #20
 544:	0b3a0803 	bleq	e82558 <startup-0x1f17daa8>
 548:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 54c:	00001802 	andeq	r1, r0, r2, lsl #16
 550:	3f012e0b 	svccc	0x00012e0b
 554:	3a0e0319 	bcc	3811c0 <startup-0x1fc7ee40>
 558:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 55c:	11134919 	tstne	r3, r9, lsl r9
 560:	40061201 	andmi	r1, r6, r1, lsl #4
 564:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 568:	00001301 	andeq	r1, r0, r1, lsl #6
 56c:	3f012e0c 	svccc	0x00012e0c
 570:	3a0e0319 	bcc	3811dc <startup-0x1fc7ee24>
 574:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 578:	01193c13 	tsteq	r9, r3, lsl ip
 57c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 580:	00000018 	andeq	r0, r0, r8, lsl r0
 584:	11010b0e 	tstne	r1, lr, lsl #22
 588:	00061201 	andeq	r1, r6, r1, lsl #4
 58c:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 590:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 594:	0b3b0b3a 	bleq	ec3284 <startup-0x1f13cd7c>
 598:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 59c:	01100000 	tsteq	r0, r0
 5a0:	00134901 	andseq	r4, r3, r1, lsl #18
 5a4:	00211100 	eoreq	r1, r1, r0, lsl #2
 5a8:	0b2f1349 	bleq	bc52d4 <startup-0x1f43ad2c>
 5ac:	Address 0x000005ac is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000009a 	muleq	r0, sl, r0
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	00b90002 	adcseq	r0, r9, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000ac 	andcs	r0, r0, ip, lsr #1
  34:	0000045c 	andeq	r0, r0, ip, asr r4
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	06640002 	strbteq	r0, [r4], -r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000508 	andcs	r0, r0, r8, lsl #10
  5c:	0000067c 	andeq	r0, r0, ip, ror r6
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0c060002 	stceq	0, cr0, [r6], {2}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000b84 	andcs	r0, r0, r4, lsl #23
  7c:	000002e8 	andeq	r0, r0, r8, ror #5
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0ead0002 	cdpeq	0, 10, cr0, cr13, cr2, {0}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000e6c 	andcs	r0, r0, ip, ror #28
  9c:	00000110 	andeq	r0, r0, r0, lsl r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000007a 	andeq	r0, r0, sl, ror r0
   4:	00480002 	subeq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
  28:	6f442f61 	svcvs	0x00442f61
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; ffffff18 <p2+0xdfffdd98>
  38:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; ffffff04 <p2+0xdfffdd84>
  3c:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
  40:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  44:	65640000 	strbvs	r0, [r4, #-0]!
  48:	2e79616c 	rpwcsez	f6, f1, #4.0
  4c:	00010063 	andeq	r0, r1, r3, rrx
  50:	05000000 	streq	r0, [r0, #-0]
  54:	00001002 	andeq	r1, r0, r2
  58:	254b1620 	strbcs	r1, [fp, #-1568]	; 0xfffff9e0
  5c:	4b4d4337 	blmi	1350d40 <startup-0x1ecaf2c0>
  60:	3c780328 	ldclcc	3, cr0, [r8], #-160	; 0xffffff60
  64:	4d3c0a03 	vldmdbmi	ip!, {s0-s2}
  68:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  6c:	0200673d 	andeq	r6, r0, #15990784	; 0xf40000
  70:	20060104 	andcs	r0, r6, r4, lsl #2
  74:	af3e6706 	svcge	0x003e6706
  78:	00030233 	andeq	r0, r3, r3, lsr r2
  7c:	010f0101 	tsteq	pc, r1, lsl #2
  80:	00020000 	andeq	r0, r2, r0
  84:	00000065 	andeq	r0, r0, r5, rrx
  88:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  8c:	0101000d 	tsteq	r1, sp
  90:	00000101 	andeq	r0, r0, r1, lsl #2
  94:	00000100 	andeq	r0, r0, r0, lsl #2
  98:	2f3a4301 	svccs	0x003a4301
  9c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  a0:	614d2f73 	hvcvs	54003	; 0xd2f3
  a4:	2f616972 	svccs	0x00616972
  a8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  ac:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  b0:	54492f73 	strbpl	r2, [r9], #-3955	; 0xfffff08d
  b4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  b8:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  bc:	616e732f 	cmnvs	lr, pc, lsr #6
  c0:	0000656b 	andeq	r6, r0, fp, ror #10
  c4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  c8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  cc:	00010063 	andeq	r0, r1, r3, rrx
  d0:	672f2e00 	strvs	r2, [pc, -r0, lsl #28]!
  d4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
  d8:	00000068 	andeq	r0, r0, r8, rrx
  dc:	732f2e00 			; <UNDEFINED> instruction: 0x732f2e00
  e0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
  e4:	682e7374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
  e8:	00000000 	andeq	r0, r0, r0
  ec:	02050000 	andeq	r0, r5, #0
  f0:	20000000 	andcs	r0, r0, r0
  f4:	13010e03 	movwne	r0, #7683	; 0x1e03
  f8:	0003025e 	andeq	r0, r3, lr, asr r2
  fc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
 100:	0000ac02 	andeq	sl, r0, r2, lsl #24
 104:	011b0320 	tsteq	fp, r0, lsr #6
 108:	673e6867 	ldrvs	r6, [lr, -r7, ror #16]!
 10c:	754c4c3e 	strbvc	r4, [ip, #-3134]	; 0xfffff3c2
 110:	91764b76 	cmnls	r6, r6, ror fp
 114:	91764b3e 	cmnls	r6, lr, lsr fp
 118:	4a1b033f 	bmi	6c0e1c <startup-0x1f93f1e4>
 11c:	4b4b3d34 	blmi	12cf5f4 <startup-0x1ed30a0c>
 120:	3d59c13d 	ldfccp	f4, [r9, #-244]	; 0xffffff0c
 124:	9208a008 	andls	sl, r8, #8
 128:	919f594b 	orrsls	r5, pc, fp, asr #18
 12c:	5ad73d08 	bpl	ff5cf554 <p2+0xdf5cd3d4>
 130:	224b3d59 	subcs	r3, fp, #5696	; 0x1640
 134:	5a755c8e 	bpl	1d57374 <startup-0x1e2a8c8c>
 138:	835af45b 	cmphi	sl, #1526726656	; 0x5b000000	; <UNPREDICTABLE>
 13c:	3d597883 	ldclcc	8, cr7, [r9, #-524]	; 0xfffffdf4
 140:	4b834b4b 	blmi	fe0d2e74 <p2+0xde0d0cf4>
 144:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 148:	2f3fc80d 	svccs	0x003fc80d
 14c:	3e3d2f2f 	cdpcc	15, 3, cr2, cr13, cr15, {1}
 150:	2f2f2f3e 	svccs	0x002f2f3e
 154:	004c5952 	subeq	r5, ip, r2, asr r9
 158:	5a030402 	bpl	c1168 <startup-0x1ff3ee98>
 15c:	03040200 	movweq	r0, #16896	; 0x4200
 160:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 164:	02007103 	andeq	r7, r0, #-1073741824	; 0xc0000000
 168:	3c060104 	stfccs	f0, [r6], {4}
 16c:	595a4206 	ldmdbpl	sl, {r1, r2, r9, lr}^
 170:	02003d75 	andeq	r3, r0, #7488	; 0x1d40
 174:	008b0204 	addeq	r0, fp, r4, lsl #4
 178:	06010402 	streq	r0, [r1], -r2, lsl #8
 17c:	0903063c 	stmdbeq	r3, {r2, r3, r4, r5, r9, sl}
 180:	3d684b3c 	vstmdbcc	r8!, {d20-<overflow reg d49>}
 184:	8375ca67 	cmnhi	r5, #421888	; 0x67000
 188:	74630383 	strbtvc	r0, [r3], #-899	; 0xfffffc7d
 18c:	01000b02 	tsteq	r0, r2, lsl #22
 190:	00018601 	andeq	r8, r1, r1, lsl #12
 194:	65000200 	strvs	r0, [r0, #-512]	; 0xfffffe00
 198:	02000000 	andeq	r0, r0, #0
 19c:	0d0efb01 	vstreq	d15, [lr, #-4]
 1a0:	01010100 	mrseq	r0, (UNDEF: 17)
 1a4:	00000001 	andeq	r0, r0, r1
 1a8:	01000001 	tsteq	r0, r1
 1ac:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff771 <p2+0xdfffd5f1>
 1b0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1b4:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 1b8:	442f6169 	strtmi	r6, [pc], #-361	; 1c0 <startup-0x1ffffe40>
 1bc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1c0:	73746e65 	cmnvc	r4, #1616	; 0x650
 1c4:	2f54492f 	svccs	0x0054492f
 1c8:	2f504f4d 	svccs	0x00504f4d
 1cc:	2f504f4d 	svccs	0x00504f4d
 1d0:	6b616e73 	blvs	185bba4 <startup-0x1e7a445c>
 1d4:	67000065 	strvs	r0, [r0, -r5, rrx]
 1d8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1dc:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 1e0:	00000100 	andeq	r0, r0, r0, lsl #2
 1e4:	70672f2e 	rsbvc	r2, r7, lr, lsr #30
 1e8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xfffff0d2
 1f4:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
 1f8:	00682e73 	rsbeq	r2, r8, r3, ror lr
 1fc:	00000000 	andeq	r0, r0, r0
 200:	08020500 	stmdaeq	r2, {r8, sl}
 204:	17200005 	strne	r0, [r0, -r5]!
 208:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 20c:	2f3d323d 	svccs	0x003d323d
 210:	452f3d75 	strmi	r3, [pc, #-3445]!	; fffff4a3 <p2+0xdfffd323>
 214:	af3d2327 	svcge	0x003d2327
 218:	3d3d3d68 	ldccc	13, cr3, [sp, #-416]!	; 0xfffffe60
 21c:	2f3d2f59 	svccs	0x003d2f59
 220:	593e3d59 	ldmdbpl	lr!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 224:	3d5a303d 	ldclcc	0, cr3, [sl, #-244]	; 0xffffff0c
 228:	92af3d30 	adcls	r3, pc, #48, 26	; 0xc00
 22c:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
 230:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
 234:	303d5a30 	eorscc	r5, sp, r0, lsr sl
 238:	773d3d3d 			; <UNDEFINED> instruction: 0x773d3d3d
 23c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 240:	3d914d83 	ldccc	13, cr4, [r1, #524]	; 0x20c
 244:	833d3d59 	teqhi	sp, #5696	; 0x1640
 248:	6759674d 	ldrbvs	r6, [r9, -sp, asr #14]
 24c:	c959684d 	ldmdbgt	r9, {r0, r2, r3, r6, fp, sp, lr}^
 250:	5968694b 	stmdbpl	r8!, {r0, r1, r3, r6, r8, fp, sp, lr}^
 254:	677759c9 	ldrbvs	r5, [r7, -r9, asr #19]!
 258:	03741003 	cmneq	r4, #3
 25c:	10032070 	andne	r2, r3, r0, ror r0
 260:	2072034a 	rsbscs	r0, r2, sl, asr #6
 264:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 268:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 26c:	2f4d223d 	svccs	0x004d223d
 270:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 274:	4b4b3d3d 	blmi	12cf770 <startup-0x1ed30890>
 278:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 27c:	9f3e3d3f 	svcls	0x003e3d3f
 280:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 284:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 288:	00480304 	subeq	r0, r8, r4, lsl #6
 28c:	06010402 	streq	r0, [r1], -r2, lsl #8
 290:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 294:	00380602 	eorseq	r0, r8, r2, lsl #12
 298:	06010402 	streq	r0, [r1], -r2, lsl #8
 29c:	0903063c 	stmdbeq	r3, {r2, r3, r4, r5, r9, sl}
 2a0:	006a4d3c 	rsbeq	r4, sl, ip, lsr sp
 2a4:	06010402 	streq	r0, [r1], -r2, lsl #8
 2a8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 2ac:	02004a02 	andeq	r4, r0, #8192	; 0x2000
 2b0:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
 2b4:	1308764c 	movwne	r7, #34380	; 0x864c
 2b8:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 2bc:	5b595959 	blpl	1656828 <startup-0x1e9a97d8>
 2c0:	4b3d683d 	blmi	f5a3bc <startup-0x1f0a5c44>
 2c4:	c93f4b4c 	ldmdbgt	pc!, {r2, r3, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
 2c8:	3dbc91c9 	ldfccd	f1, [ip, #804]!	; 0x324
 2cc:	5c0392a0 	sfmpl	f1, 1, [r3], {160}	; 0xa0
 2d0:	202503ac 	eorcs	r0, r5, ip, lsr #7
 2d4:	006b4c85 	rsbeq	r4, fp, r5, lsl #25
 2d8:	5a030402 	bpl	c12e8 <startup-0x1ff3ed18>
 2dc:	03040200 	movweq	r0, #16896	; 0x4200
 2e0:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 2e4:	00f50304 	rscseq	r0, r5, r4, lsl #6
 2e8:	03030402 	movweq	r0, #13314	; 0x3402
 2ec:	0200827a 	andeq	r8, r0, #-1610612729	; 0xa0000007
 2f0:	58060104 	stmdapl	r6, {r2, r8}
 2f4:	4c4d8a06 	mcrrmi	10, 0, r8, sp, cr6
 2f8:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 2fc:	02005903 	andeq	r5, r0, #49152	; 0xc000
 300:	13080304 	movwne	r0, #33540	; 0x8304
 304:	03040200 	movweq	r0, #16896	; 0x4200
 308:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
 30c:	02007f03 	andeq	r7, r0, #3, 30
 310:	58060104 	stmdapl	r6, {r2, r8}
 314:	04028706 	streq	r8, [r2], #-1798	; 0xfffff8fa
 318:	d9010100 	stmdble	r1, {r8}
 31c:	02000000 	andeq	r0, r0, #0
 320:	00005400 	andeq	r5, r0, r0, lsl #8
 324:	fb010200 	blx	40b2e <startup-0x1ffbf4d2>
 328:	01000d0e 	tsteq	r0, lr, lsl #26
 32c:	00010101 	andeq	r0, r1, r1, lsl #2
 330:	00010000 	andeq	r0, r1, r0
 334:	3a430100 	bcc	10c073c <startup-0x1ef3f8c4>
 338:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 33c:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 17c <startup-0x1ffffe84>
 340:	61697261 	cmnvs	r9, r1, ror #4
 344:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 348:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 34c:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 350:	4f4d2f54 	svcmi	0x004d2f54
 354:	4f4d2f50 	svcmi	0x004d2f50
 358:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 35c:	00656b61 	rsbeq	r6, r5, r1, ror #22
 360:	63736100 	cmnvs	r3, #0, 2
 364:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 368:	00000100 	andeq	r0, r0, r0, lsl #2
 36c:	70672f2e 	rsbvc	r2, r7, lr, lsr #30
 370:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 374:	00000000 	andeq	r0, r0, r0
 378:	02050000 	andeq	r0, r5, #0
 37c:	20000b84 	andcs	r0, r0, r4, lsl #23
 380:	ad596816 	ldclge	8, cr6, [r9, #-88]	; 0xffffffa8
 384:	59687759 	stmdbpl	r8!, {r0, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 388:	67694be5 	strbvs	r4, [r9, -r5, ror #23]!
 38c:	3d2f4b3d 	fstmdbxcc	pc!, {d4-d33}	;@ Deprecated
 390:	2f3d3e69 	svccs	0x003d3e69
 394:	303d4b2f 	eorscc	r4, sp, pc, lsr #22
 398:	3d3d6777 	ldccc	7, cr6, [sp, #-476]!	; 0xfffffe24
 39c:	3d674d5a 	stclcc	13, cr4, [r7, #-360]!	; 0xfffffe98
 3a0:	3e4f593d 			; <UNDEFINED> instruction: 0x3e4f593d
 3a4:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 3a8:	3ea12f67 	cdpcc	15, 10, cr2, cr1, cr7, {3}
 3ac:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 3b0:	67a12f67 	strvs	r2, [r1, r7, ror #30]!
 3b4:	01040200 	mrseq	r0, R12_usr
 3b8:	83062006 	movwhi	r2, #24582	; 0x6006
 3bc:	4d3d593d 			; <UNDEFINED> instruction: 0x4d3d593d
 3c0:	3e3e3d5a 	mrccc	13, 1, r3, cr14, cr10, {2}
 3c4:	002f4d91 	mlaeq	pc, r1, sp, r4	; <UNPREDICTABLE>
 3c8:	06010402 	streq	r0, [r1], -r2, lsl #8
 3cc:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 3d0:	02003e3d 	andeq	r3, r0, #976	; 0x3d0
 3d4:	20060104 	andcs	r0, r6, r4, lsl #2
 3d8:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 3dc:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 3e0:	06200601 	strteq	r0, [r0], -r1, lsl #12
 3e4:	3e3d3d83 	cdpcc	13, 3, cr3, cr13, cr3, {4}
 3e8:	01040200 	mrseq	r0, R12_usr
 3ec:	83062006 	movwhi	r2, #24582	; 0x6006
 3f0:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 3f4:	01010003 	tsteq	r1, r3
 3f8:	000000ac 	andeq	r0, r0, ip, lsr #1
 3fc:	00530002 	subseq	r0, r3, r2
 400:	01020000 	mrseq	r0, (UNDEF: 2)
 404:	000d0efb 	strdeq	r0, [sp], -fp
 408:	01010101 	tsteq	r1, r1, lsl #2
 40c:	01000000 	mrseq	r0, (UNDEF: 0)
 410:	43010000 	movwmi	r0, #4096	; 0x1000
 414:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 418:	2f737265 	svccs	0x00737265
 41c:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
 420:	6f442f61 	svcvs	0x00442f61
 424:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 428:	2f73746e 	svccs	0x0073746e
 42c:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; 310 <startup-0x1ffffcf0>
 430:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 2fc <startup-0x1ffffd04>
 434:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
 438:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 43c:	656b0000 	strbvs	r0, [fp, #-0]!
 440:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 444:	00000100 	andeq	r0, r0, r0, lsl #2
 448:	70672f2e 	rsbvc	r2, r7, lr, lsr #30
 44c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 450:	00000000 	andeq	r0, r0, r0
 454:	02050000 	andeq	r0, r5, #0
 458:	20000e6c 	andcs	r0, r0, ip, ror #28
 45c:	3d683d15 	stclcc	13, cr3, [r8, #-84]!	; 0xffffffac
 460:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 464:	02040200 	andeq	r0, r4, #0, 4
 468:	0402008b 	streq	r0, [r2], #-139	; 0xffffff75
 46c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 470:	02003d44 	andeq	r3, r0, #68, 26	; 0x1100
 474:	77210104 	strvc	r0, [r1, -r4, lsl #2]!
 478:	4b4b924b 	blmi	12e4dac <startup-0x1ed1b254>
 47c:	924c4b4b 	subls	r4, ip, #76800	; 0x12c00
 480:	02004b3e 	andeq	r4, r0, #63488	; 0xf800
 484:	58060104 	stmdapl	r6, {r2, r8}
 488:	02002f06 	andeq	r2, r0, #6, 30
 48c:	58060104 	stmdapl	r6, {r2, r8}
 490:	02002f06 	andeq	r2, r0, #6, 30
 494:	58060104 	stmdapl	r6, {r2, r8}
 498:	02002f06 	andeq	r2, r0, #6, 30
 49c:	58060104 	stmdapl	r6, {r2, r8}
 4a0:	02212f06 	eoreq	r2, r1, #6, 30
 4a4:	01010006 	tsteq	r1, r6

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	20554e47 	subscs	r4, r5, r7, asr #28
  10:	20393943 	eorscs	r3, r9, r3, asr #18
  14:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  18:	30322031 	eorscc	r2, r2, r1, lsr r0
  1c:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  20:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  24:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  28:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  2c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  30:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  34:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  38:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  3c:	6172622d 	cmnvs	r2, sp, lsr #4
  40:	2068636e 	rsbcs	r6, r8, lr, ror #6
  44:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  48:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  4c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  50:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  54:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  58:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  70:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  74:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  78:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  7c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  80:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  84:	616d2d20 	cmnvs	sp, r0, lsr #26
  88:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  8c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  90:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  94:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  98:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  9c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  a0:	00393963 	eorseq	r3, r9, r3, ror #18
  a4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff669 <p2+0xdfffd4e9>
  a8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  ac:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
  b0:	442f6169 	strtmi	r6, [pc], #-361	; b8 <startup-0x1fffff48>
  b4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  b8:	73746e65 	cmnvc	r4, #1616	; 0x650
  bc:	2f54492f 	svccs	0x0054492f
  c0:	2f504f4d 	svccs	0x00504f4d
  c4:	2f504f4d 	svccs	0x00504f4d
  c8:	6b616e73 	blvs	185ba9c <startup-0x1e7a4564>
  cc:	65642f65 	strbvs	r2, [r4, #-3941]!	; 0xfffff09b
  d0:	2e79616c 	rpwcsez	f6, f1, #4.0
  d4:	74630063 	strbtvc	r0, [r3], #-99	; 0xffffff9d
  d8:	43006c72 	movwmi	r6, #3186	; 0xc72
  dc:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  e0:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  e4:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
  e8:	6f445c61 	svcvs	0x00445c61
  ec:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  f0:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  f4:	4d5c5449 	cfldrdmi	mvd5, [ip, #-292]	; 0xfffffedc
  f8:	4d5c504f 	ldclmi	0, cr5, [ip, #-316]	; 0xfffffec4
  fc:	735c504f 	cmpvc	ip, #79	; 0x4f
 100:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 104:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 108:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 10c:	736e3035 	cmnvc	lr, #53	; 0x35
 110:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 114:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff7bb <p2+0xdfffd63b>
 118:	736e3030 	cmnvc	lr, #48	; 0x30
 11c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 120:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 66 <startup-0x1fffff9a>	; <UNPREDICTABLE>
 124:	6f726369 	svcvs	0x00726369
 128:	736e7500 	cmnvc	lr, #0, 10
 12c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 130:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 134:	73007261 	movwvc	r7, #609	; 0x261
 138:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 13c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 140:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 144:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 148:	47500074 			; <UNDEFINED> instruction: 0x47500074
 14c:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 150:	00595254 	subseq	r5, r9, r4, asr r2
 154:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 158:	00707574 	rsbseq	r7, r0, r4, ror r5
 15c:	616e5370 	smcvs	58672	; 0xe530
 160:	6556656b 	ldrbvs	r6, [r6, #-1387]	; 0xfffffa95
 164:	3a430063 	bcc	10c02f8 <startup-0x1ef3fd08>
 168:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 16c:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; ffffffac <p2+0xdfffde2c>
 170:	61697261 	cmnvs	r9, r1, ror #4
 174:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 178:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 17c:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 180:	4f4d2f54 	svcmi	0x004d2f54
 184:	4f4d2f50 	svcmi	0x004d2f50
 188:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 18c:	2f656b61 	svccs	0x00656b61
 190:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 194:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 198:	72640063 	rsbvc	r0, r4, #99	; 0x63
 19c:	73007761 	movwvc	r7, #1889	; 0x761
 1a0:	6f5f7465 	svcvs	0x005f7465
 1a4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1a8:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 1ac:	00646565 	rsbeq	r6, r4, r5, ror #10
 1b0:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 1b4:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
 1b8:	00726570 	rsbseq	r6, r2, r0, ror r5
 1bc:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 1c0:	6a626f5f 	bvs	189bf44 <startup-0x1e7640bc>
 1c4:	00746365 	rsbseq	r6, r4, r5, ror #6
 1c8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1cc:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
 1d0:	006c6961 	rsbeq	r6, ip, r1, ror #18
 1d4:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 1d8:	00686769 	rsbeq	r6, r8, r9, ror #14
 1dc:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 1e0:	5000746e 	andpl	r7, r0, lr, ror #8
 1e4:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 1e8:	72646f00 	rsbvc	r6, r4, #0, 30
 1ec:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 1f0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 1f4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 1f8:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 1fc:	70006465 	andvc	r6, r0, r5, ror #8
 200:	0078736f 	rsbseq	r7, r8, pc, ror #6
 204:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 208:	6c616200 	sfmvs	f6, 2, [r1], #-0
 20c:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 210:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 214:	65007972 	strvs	r7, [r0, #-2418]	; 0xfffff68e
 218:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
 21c:	6e735f64 	cdpvs	15, 7, cr5, cr3, cr4, {3}
 220:	00656b61 	rsbeq	r6, r5, r1, ror #22
 224:	4f495047 	svcmi	0x00495047
 228:	616e7300 	cmnvs	lr, r0, lsl #6
 22c:	654c656b 	strbvs	r6, [ip, #-1387]	; 0xfffffa95
 230:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 234:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 238:	00796465 	rsbseq	r6, r9, r5, ror #8
 23c:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
 240:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 244:	00646576 	rsbeq	r6, r4, r6, ror r5
 248:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 24c:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 250:	52746f00 	rsbspl	r6, r4, #0, 30
 254:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 258:	00646576 	rsbeq	r6, r4, r6, ror r5
 25c:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 260:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 264:	75700062 	ldrbvc	r0, [r0, #-98]!	; 0xffffff9e
 268:	00726470 	rsbseq	r6, r2, r0, ror r4
 26c:	6e69616d 	powvsez	f6, f1, #5.0
 270:	7a697300 	bvc	1a5ce78 <startup-0x1e5a3188>
 274:	74007865 	strvc	r7, [r0], #-2149	; 0xfffff79b
 278:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 164 <startup-0x1ffffe9c>
 27c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 280:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 284:	745f3874 	ldrbvc	r3, [pc], #-2164	; 28c <startup-0x1ffffd74>
 288:	72646f00 	rsbvc	r6, r4, #0, 30
 28c:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 290:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 294:	6e730079 	mrcvs	0, 3, r0, cr3, cr9, {3}
 298:	56656b61 	strbtpl	r6, [r5], -r1, ror #22
 29c:	69006365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, sp, lr}
 2a0:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 2a4:	63006867 	movwvs	r6, #2151	; 0x867
 2a8:	696c6c6f 	stmdbvs	ip!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
 2ac:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 2b0:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 2b4:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 2b8:	72646900 	rsbvc	r6, r4, #0, 18
 2bc:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 2c0:	766f6d73 			; <UNDEFINED> instruction: 0x766f6d73
 2c4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
 2c8:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
 2cc:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
 2d0:	33746e69 	cmncc	r4, #1680	; 0x690
 2d4:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 2d8:	6a624f74 	bvs	18940b0 <startup-0x1e76bf50>
 2dc:	646f6d00 	strbtvs	r6, [pc], #-3328	; 2e4 <startup-0x1ffffd1c>
 2e0:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
 2e4:	6f706d75 	svcvs	0x00706d75
 2e8:	73746e69 	cmnvc	r4, #1680	; 0x690
 2ec:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 2f0:	7300656c 	movwvc	r6, #1388	; 0x56c
 2f4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2f8:	6f6d0078 	svcvs	0x006d0078
 2fc:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
 300:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 304:	424f5000 	submi	r5, pc, #0
 308:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 30c:	635f7900 	cmpvs	pc, #0, 18
 310:	64726f6f 	ldrbtvs	r6, [r2], #-3951	; 0xfffff091
 314:	6c657300 	stclvs	3, cr7, [r5], #-0
 318:	5f746365 	svcpl	0x00746365
 31c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 320:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 324:	70007265 	andvc	r7, r0, r5, ror #4
 328:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 32c:	61726400 	cmnvs	r2, r0, lsl #8
 330:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 334:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 338:	67617000 	strbvs	r7, [r1, -r0]!
 33c:	3a430065 	bcc	10c04d8 <startup-0x1ef3fb28>
 340:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 344:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 184 <startup-0x1ffffe7c>
 348:	61697261 	cmnvs	r9, r1, ror #4
 34c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 350:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 354:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 358:	4f4d2f54 	svcmi	0x004d2f54
 35c:	4f4d2f50 	svcmi	0x004d2f50
 360:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 364:	2f656b61 	svccs	0x00656b61
 368:	70617267 	rsbvc	r7, r1, r7, ror #4
 36c:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 370:	72670063 	rsbvc	r0, r7, #99	; 0x63
 374:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 378:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 37c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 384 <startup-0x1ffffc7c>
 380:	00617461 	rsbeq	r7, r1, r1, ror #8
 384:	70617267 	rsbvc	r7, r1, r7, ror #4
 388:	5f636968 	svcpl	0x00636968
 38c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 390:	72670065 	rsbvc	r0, r7, #101	; 0x65
 394:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 398:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 39c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 3a0:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 3a4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 3a8:	61726700 	cmnvs	r2, r0, lsl #14
 3ac:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3b0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 3b4:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 3b8:	00657a69 	rsbeq	r7, r5, r9, ror #20
 3bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 3c0:	5f636968 	svcpl	0x00636968
 3c4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 3c8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 3cc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 3d0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 3d4:	6f5f7261 	svcvs	0x005f7261
 3d8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3dc:	616d0074 	smcvs	53252	; 0xd004
 3e0:	76006b73 			; <UNDEFINED> instruction: 0x76006b73
 3e4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 3e8:	61726700 	cmnvs	r2, r0, lsl #14
 3ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3f0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3f4:	645f6574 	ldrbvs	r6, [pc], #-1396	; 3fc <startup-0x1ffffc04>
 3f8:	00617461 	rsbeq	r7, r1, r1, ror #8
 3fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 400:	5f636968 	svcpl	0x00636968
 404:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 408:	6165725f 	cmnvs	r5, pc, asr r2
 40c:	69007964 	stmdbvs	r0, {r2, r5, r6, r8, fp, ip, sp, lr}
 410:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 414:	61726700 	cmnvs	r2, r0, lsl #14
 418:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 41c:	6165725f 	cmnvs	r5, pc, asr r2
 420:	5f780064 	svcpl	0x00780064
 424:	726f6f63 	rsbvc	r6, pc, #396	; 0x18c
 428:	72670064 	rsbvc	r0, r7, #100	; 0x64
 42c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 430:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 434:	5f657469 	svcpl	0x00657469
 438:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 43c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 440:	70617267 	rsbvc	r7, r1, r7, ror #4
 444:	5f636968 	svcpl	0x00636968
 448:	61656c63 	cmnvs	r5, r3, ror #24
 44c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 450:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 454:	2f3a4300 	svccs	0x003a4300
 458:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 45c:	614d2f73 	hvcvs	54003	; 0xd2f3
 460:	2f616972 	svccs	0x00616972
 464:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 468:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 46c:	54492f73 	strbpl	r2, [r9], #-3955	; 0xfffff08d
 470:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 474:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 478:	616e732f 	cmnvs	lr, pc, lsr #6
 47c:	732f656b 			; <UNDEFINED> instruction: 0x732f656b
 480:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 484:	632e7374 			; <UNDEFINED> instruction: 0x632e7374
 488:	63736100 	cmnvs	r3, #0, 2
 48c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 490:	5f6c7274 	svcpl	0x006c7274
 494:	5f746962 	svcpl	0x00746962
 498:	61656c63 	cmnvs	r5, r3, ror #24
 49c:	73610072 	cmnvc	r1, #114	; 0x72
 4a0:	5f696963 	svcpl	0x00696963
 4a4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4a8:	6f635f65 	svcvs	0x00635f65
 4ac:	6f72746e 	svcvs	0x0072746e
 4b0:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 4b4:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 4b8:	73610065 	cmnvc	r1, #101	; 0x65
 4bc:	5f696963 	svcpl	0x00696963
 4c0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 4c4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 4c8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 4cc:	63736100 	cmnvs	r3, #0, 2
 4d0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 4d4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4d8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 4dc:	73610061 	cmnvc	r1, #97	; 0x61
 4e0:	5f696963 	svcpl	0x00696963
 4e4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4e8:	6174735f 	cmnvs	r4, pc, asr r3
 4ec:	00737574 	rsbseq	r7, r3, r4, ror r5
 4f0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4f4:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 4f8:	5f657469 	svcpl	0x00657469
 4fc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 500:	63736100 	cmnvs	r3, #0, 2
 504:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 508:	5f646165 	svcpl	0x00646165
 50c:	61746164 	cmnvs	r4, r4, ror #2
 510:	63736100 	cmnvs	r3, #0, 2
 514:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 518:	5f646165 	svcpl	0x00646165
 51c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 520:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 524:	61007265 	tstvs	r0, r5, ror #4
 528:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 52c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 530:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 534:	6100646d 	tstvs	r0, sp, ror #8
 538:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 53c:	746f675f 	strbtvc	r6, [pc], #-1887	; 544 <startup-0x1ffffabc>
 540:	0079786f 	rsbseq	r7, r9, pc, ror #16
 544:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
 548:	43007373 	movwmi	r7, #883	; 0x373
 54c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 550:	2f737265 	svccs	0x00737265
 554:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
 558:	6f442f61 	svcvs	0x00442f61
 55c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 560:	2f73746e 	svccs	0x0073746e
 564:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; 448 <startup-0x1ffffbb8>
 568:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 434 <startup-0x1ffffbcc>
 56c:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
 570:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 574:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 578:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 57c:	63736100 	cmnvs	r3, #0, 2
 580:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 584:	0074696e 	rsbseq	r6, r4, lr, ror #18
 588:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb4d <p2+0xdfffd9cd>
 58c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 590:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 594:	442f6169 	strtmi	r6, [pc], #-361	; 59c <startup-0x1ffffa64>
 598:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 59c:	73746e65 	cmnvc	r4, #1616	; 0x650
 5a0:	2f54492f 	svccs	0x0054492f
 5a4:	2f504f4d 	svccs	0x00504f4d
 5a8:	2f504f4d 	svccs	0x00504f4d
 5ac:	6b616e73 	blvs	185bf80 <startup-0x1e7a4080>
 5b0:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xfffff09b
 5b4:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 5b8:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
 5bc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
 5c0:	6b006c6f 	blvs	1b784 <startup-0x1ffe487c>
 5c4:	63416462 	movtvs	r6, #5218	; 0x1462
 5c8:	61766974 	cmnvs	r6, r4, ror r9
 5cc:	Address 0x000005cc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <p2+0xdfffd18e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	0000001e 	andeq	r0, r0, lr, lsl r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000002e 	andcs	r0, r0, lr, lsr #32
  3c:	0000001e 	andeq	r0, r0, lr, lsl r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000004c 	andcs	r0, r0, ip, asr #32
  5c:	00000054 	andeq	r0, r0, r4, asr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000a0 	andcs	r0, r0, r0, lsr #1
  7c:	0000000a 	andeq	r0, r0, sl
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000000c 	andeq	r0, r0, ip
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	20000000 	andcs	r0, r0, r0
  a8:	0000000c 	andeq	r0, r0, ip
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	0000008c 	andeq	r0, r0, ip, lsl #1
  b4:	200000ac 	andcs	r0, r0, ip, lsr #1
  b8:	00000038 	andeq	r0, r0, r8, lsr r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	180e4101 	stmdane	lr, {r0, r8, lr}
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	0000008c 	andeq	r0, r0, ip, lsl #1
  d4:	200000e4 	andcs	r0, r0, r4, ror #1
  d8:	00000088 	andeq	r0, r0, r8, lsl #1
  dc:	40080e41 	andmi	r0, r8, r1, asr #28
  e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e4:	100e4101 	andne	r4, lr, r1, lsl #2
  e8:	00070d41 	andeq	r0, r7, r1, asr #26
  ec:	00000018 	andeq	r0, r0, r8, lsl r0
  f0:	0000008c 	andeq	r0, r0, ip, lsl #1
  f4:	2000016c 	andcs	r0, r0, ip, ror #2
  f8:	00000038 	andeq	r0, r0, r8, lsr r0
  fc:	40080e41 	andmi	r0, r8, r1, asr #28
 100:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 104:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 108:	00000020 	andeq	r0, r0, r0, lsr #32
 10c:	0000008c 	andeq	r0, r0, ip, lsl #1
 110:	200001a4 	andcs	r0, r0, r4, lsr #3
 114:	00000178 	andeq	r0, r0, r8, ror r1
 118:	400c0e41 	andmi	r0, ip, r1, asr #28
 11c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 120:	018e4002 	orreq	r4, lr, r2
 124:	41300e41 	teqmi	r0, r1, asr #28
 128:	0000070d 	andeq	r0, r0, sp, lsl #14
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	0000008c 	andeq	r0, r0, ip, lsl #1
 134:	2000031c 	andcs	r0, r0, ip, lsl r3
 138:	00000038 	andeq	r0, r0, r8, lsr r0
 13c:	40080e41 	andmi	r0, r8, r1, asr #28
 140:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 144:	100e4101 	andne	r4, lr, r1, lsl #2
 148:	00070d41 	andeq	r0, r7, r1, asr #26
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000008c 	andeq	r0, r0, ip, lsl #1
 154:	20000354 	andcs	r0, r0, r4, asr r3
 158:	00000064 	andeq	r0, r0, r4, rrx
 15c:	40080e41 	andmi	r0, r8, r1, asr #28
 160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 164:	100e4101 	andne	r4, lr, r1, lsl #2
 168:	00070d41 	andeq	r0, r7, r1, asr #26
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000008c 	andeq	r0, r0, ip, lsl #1
 174:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
 178:	00000150 	andeq	r0, r0, r0, asr r1
 17c:	40080e41 	andmi	r0, r8, r1, asr #28
 180:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 184:	280e4101 	stmdacs	lr, {r0, r8, lr}
 188:	00070d41 	andeq	r0, r7, r1, asr #26
 18c:	0000000c 	andeq	r0, r0, ip
 190:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 194:	7c020001 	stcvc	0, cr0, [r2], {1}
 198:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	0000018c 	andeq	r0, r0, ip, lsl #3
 1a4:	20000508 	andcs	r0, r0, r8, lsl #10
 1a8:	0000006c 	andeq	r0, r0, ip, rrx
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000018c 	andeq	r0, r0, ip, lsl #3
 1c4:	20000574 	andcs	r0, r0, r4, ror r5
 1c8:	00000090 	muleq	r0, r0, r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	0000018c 	andeq	r0, r0, ip, lsl #3
 1e4:	20000604 	andcs	r0, r0, r4, lsl #12
 1e8:	00000080 	andeq	r0, r0, r0, lsl #1
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	100e4101 	andne	r4, lr, r1, lsl #2
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	0000018c 	andeq	r0, r0, ip, lsl #3
 204:	20000684 	andcs	r0, r0, r4, lsl #13
 208:	00000040 	andeq	r0, r0, r0, asr #32
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	100e4101 	andne	r4, lr, r1, lsl #2
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	0000018c 	andeq	r0, r0, ip, lsl #3
 224:	200006c4 	andcs	r0, r0, r4, asr #13
 228:	00000046 	andeq	r0, r0, r6, asr #32
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	100e4101 	andne	r4, lr, r1, lsl #2
 238:	00070d41 	andeq	r0, r7, r1, asr #26
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	0000018c 	andeq	r0, r0, ip, lsl #3
 244:	2000070a 	andcs	r0, r0, sl, lsl #14
 248:	0000002a 	andeq	r0, r0, sl, lsr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 254:	100e4101 	andne	r4, lr, r1, lsl #2
 258:	00070d41 	andeq	r0, r7, r1, asr #26
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000018c 	andeq	r0, r0, ip, lsl #3
 264:	20000734 	andcs	r0, r0, r4, lsr r7
 268:	00000044 	andeq	r0, r0, r4, asr #32
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	180e4101 	stmdane	lr, {r0, r8, lr}
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000018c 	andeq	r0, r0, ip, lsl #3
 284:	20000778 	andcs	r0, r0, r8, ror r7
 288:	00000048 	andeq	r0, r0, r8, asr #32
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	180e4101 	stmdane	lr, {r0, r8, lr}
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000018c 	andeq	r0, r0, ip, lsl #3
 2a4:	200007c0 	andcs	r0, r0, r0, asr #15
 2a8:	0000005a 	andeq	r0, r0, sl, asr r0
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	100e4101 	andne	r4, lr, r1, lsl #2
 2b8:	00070d41 	andeq	r0, r7, r1, asr #26
 2bc:	00000018 	andeq	r0, r0, r8, lsl r0
 2c0:	0000018c 	andeq	r0, r0, ip, lsl #3
 2c4:	2000081a 	andcs	r0, r0, sl, lsl r8
 2c8:	0000005c 	andeq	r0, r0, ip, asr r0
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	0000018c 	andeq	r0, r0, ip, lsl #3
 2e0:	20000876 	andcs	r0, r0, r6, ror r8
 2e4:	00000056 	andeq	r0, r0, r6, asr r0
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000024 	andeq	r0, r0, r4, lsr #32
 2fc:	0000018c 	andeq	r0, r0, ip, lsl #3
 300:	200008cc 	andcs	r0, r0, ip, asr #17
 304:	00000194 	muleq	r0, r4, r1
 308:	40100e41 	andsmi	r0, r0, r1, asr #28
 30c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 310:	02874003 	addeq	r4, r7, #3
 314:	41018e40 	tstmi	r1, r0, asr #28
 318:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 31c:	00000007 	andeq	r0, r0, r7
 320:	00000024 	andeq	r0, r0, r4, lsr #32
 324:	0000018c 	andeq	r0, r0, ip, lsl #3
 328:	20000a60 	andcs	r0, r0, r0, ror #20
 32c:	00000092 	muleq	r0, r2, r0
 330:	40100e41 	andsmi	r0, r0, r1, asr #28
 334:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 338:	02874003 	addeq	r4, r7, #3
 33c:	41018e40 	tstmi	r1, r0, asr #28
 340:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 344:	00000007 	andeq	r0, r0, r7
 348:	00000024 	andeq	r0, r0, r4, lsr #32
 34c:	0000018c 	andeq	r0, r0, ip, lsl #3
 350:	20000af2 	strdcs	r0, [r0], -r2
 354:	00000092 	muleq	r0, r2, r0
 358:	40100e41 	andsmi	r0, r0, r1, asr #28
 35c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 360:	02874003 	addeq	r4, r7, #3
 364:	41018e40 	tstmi	r1, r0, asr #28
 368:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 36c:	00000007 	andeq	r0, r0, r7
 370:	0000000c 	andeq	r0, r0, ip
 374:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 378:	7c020001 	stcvc	0, cr0, [r2], {1}
 37c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	00000370 	andeq	r0, r0, r0, ror r3
 388:	20000b84 	andcs	r0, r0, r4, lsl #23
 38c:	00000044 	andeq	r0, r0, r4, asr #32
 390:	40080e41 	andmi	r0, r8, r1, asr #28
 394:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 398:	180e4101 	stmdane	lr, {r0, r8, lr}
 39c:	00070d41 	andeq	r0, r7, r1, asr #26
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000370 	andeq	r0, r0, r0, ror r3
 3a8:	20000bc8 	andcs	r0, r0, r8, asr #23
 3ac:	00000048 	andeq	r0, r0, r8, asr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000370 	andeq	r0, r0, r0, ror r3
 3c8:	20000c10 	andcs	r0, r0, r0, lsl ip
 3cc:	00000030 	andeq	r0, r0, r0, lsr r0
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	100e4101 	andne	r4, lr, r1, lsl #2
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000370 	andeq	r0, r0, r0, ror r3
 3e8:	20000c40 	andcs	r0, r0, r0, asr #24
 3ec:	00000034 	andeq	r0, r0, r4, lsr r0
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	100e4101 	andne	r4, lr, r1, lsl #2
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	00000370 	andeq	r0, r0, r0, ror r3
 408:	20000c74 	andcs	r0, r0, r4, ror ip
 40c:	0000002a 	andeq	r0, r0, sl, lsr #32
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	100e4101 	andne	r4, lr, r1, lsl #2
 41c:	00070d41 	andeq	r0, r7, r1, asr #26
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	00000370 	andeq	r0, r0, r0, ror r3
 428:	20000c9e 	mulcs	r0, lr, ip
 42c:	0000002a 	andeq	r0, r0, sl, lsr #32
 430:	40080e41 	andmi	r0, r8, r1, asr #28
 434:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 438:	100e4101 	andne	r4, lr, r1, lsl #2
 43c:	00070d41 	andeq	r0, r7, r1, asr #26
 440:	00000020 	andeq	r0, r0, r0, lsr #32
 444:	00000370 	andeq	r0, r0, r0, ror r3
 448:	20000cc8 	andcs	r0, r0, r8, asr #25
 44c:	0000004c 	andeq	r0, r0, ip, asr #32
 450:	400c0e41 	andmi	r0, ip, r1, asr #28
 454:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 458:	018e4002 	orreq	r4, lr, r2
 45c:	41180e41 	tstmi	r8, r1, asr #28
 460:	0000070d 	andeq	r0, r0, sp, lsl #14
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000370 	andeq	r0, r0, r0, ror r3
 46c:	20000d14 	andcs	r0, r0, r4, lsl sp
 470:	0000004c 	andeq	r0, r0, ip, asr #32
 474:	400c0e41 	andmi	r0, ip, r1, asr #28
 478:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 47c:	018e4002 	orreq	r4, lr, r2
 480:	41180e41 	tstmi	r8, r1, asr #28
 484:	0000070d 	andeq	r0, r0, sp, lsl #14
 488:	0000001c 	andeq	r0, r0, ip, lsl r0
 48c:	00000370 	andeq	r0, r0, r0, ror r3
 490:	20000d60 	andcs	r0, r0, r0, ror #26
 494:	0000003c 	andeq	r0, r0, ip, lsr r0
 498:	40080e41 	andmi	r0, r8, r1, asr #28
 49c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a0:	100e4101 	andne	r4, lr, r1, lsl #2
 4a4:	00070d41 	andeq	r0, r7, r1, asr #26
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ac:	00000370 	andeq	r0, r0, r0, ror r3
 4b0:	20000d9c 	mulcs	r0, ip, sp
 4b4:	00000036 	andeq	r0, r0, r6, lsr r0
 4b8:	40080e41 	andmi	r0, r8, r1, asr #28
 4bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 4c4:	00070d41 	andeq	r0, r7, r1, asr #26
 4c8:	00000018 	andeq	r0, r0, r8, lsl r0
 4cc:	00000370 	andeq	r0, r0, r0, ror r3
 4d0:	20000dd2 	ldrdcs	r0, [r0], -r2
 4d4:	0000009a 	muleq	r0, sl, r0
 4d8:	40080e41 	andmi	r0, r8, r1, asr #28
 4dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4e4:	0000000c 	andeq	r0, r0, ip
 4e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4f4:	00000020 	andeq	r0, r0, r0, lsr #32
 4f8:	000004e4 	andeq	r0, r0, r4, ror #9
 4fc:	20000e6c 	andcs	r0, r0, ip, ror #28
 500:	00000068 	andeq	r0, r0, r8, rrx
 504:	400c0e41 	andmi	r0, ip, r1, asr #28
 508:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 50c:	018e4002 	orreq	r4, lr, r2
 510:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 514:	0000070d 	andeq	r0, r0, sp, lsl #14
 518:	0000001c 	andeq	r0, r0, ip, lsl r0
 51c:	000004e4 	andeq	r0, r0, r4, ror #9
 520:	20000ed4 	ldrdcs	r0, [r0], -r4
 524:	00000054 	andeq	r0, r0, r4, asr r0
 528:	40080e41 	andmi	r0, r8, r1, asr #28
 52c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 530:	100e4101 	andne	r4, lr, r1, lsl #2
 534:	00070d41 	andeq	r0, r7, r1, asr #26
 538:	0000001c 	andeq	r0, r0, ip, lsl r0
 53c:	000004e4 	andeq	r0, r0, r4, ror #9
 540:	20000f28 	andcs	r0, r0, r8, lsr #30
 544:	00000054 	andeq	r0, r0, r4, asr r0
 548:	40080e41 	andmi	r0, r8, r1, asr #28
 54c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 550:	100e4101 	andne	r4, lr, r1, lsl #2
 554:	00070d41 	andeq	r0, r7, r1, asr #26

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200000ac 	andcs	r0, r0, ip, lsr #1
   4:	20000508 	andcs	r0, r0, r8, lsl #10
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
