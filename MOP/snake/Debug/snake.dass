
./Debug/snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fe82 	bl	20000d0c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_ctrl_bit_set>:
#include <delay.h>
#include <gpio.h>

void ascii_ctrl_bit_set(unsigned char x)
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
2000001c:	4a0c      	ldr	r2, [pc, #48]	; (20000050 <ascii_ctrl_bit_set+0x40>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7d12      	ldrb	r2, [r2, #20]
20000024:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x ); //Varför ettställa B_select?
20000026:	1dfa      	adds	r2, r7, #7
20000028:	187b      	adds	r3, r7, r1
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	4313      	orrs	r3, r2
20000030:	b2da      	uxtb	r2, r3
20000032:	0008      	movs	r0, r1
20000034:	187b      	adds	r3, r7, r1
20000036:	2104      	movs	r1, #4
20000038:	430a      	orrs	r2, r1
2000003a:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
2000003c:	4a04      	ldr	r2, [pc, #16]	; (20000050 <ascii_ctrl_bit_set+0x40>)
2000003e:	0001      	movs	r1, r0
20000040:	187b      	adds	r3, r7, r1
20000042:	781b      	ldrb	r3, [r3, #0]
20000044:	7513      	strb	r3, [r2, #20]
}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	46bd      	mov	sp, r7
2000004a:	b004      	add	sp, #16
2000004c:	bd80      	pop	{r7, pc}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	40021000 	andmi	r1, r2, r0

20000054 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	0002      	movs	r2, r0
2000005c:	1dfb      	adds	r3, r7, #7
2000005e:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
20000060:	4a0d      	ldr	r2, [pc, #52]	; (20000098 <ascii_ctrl_bit_clear+0x44>)
20000062:	210f      	movs	r1, #15
20000064:	187b      	adds	r3, r7, r1
20000066:	7d12      	ldrb	r2, [r2, #20]
20000068:	701a      	strb	r2, [r3, #0]
	c &= (B_SELECT | ~x); //~ bildar 1-komplement
2000006a:	1dfb      	adds	r3, r7, #7
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	b25b      	sxtb	r3, r3
20000070:	43db      	mvns	r3, r3
20000072:	b25b      	sxtb	r3, r3
20000074:	2204      	movs	r2, #4
20000076:	4313      	orrs	r3, r2
20000078:	b25b      	sxtb	r3, r3
2000007a:	187a      	adds	r2, r7, r1
2000007c:	7812      	ldrb	r2, [r2, #0]
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	187b      	adds	r3, r7, r1
20000086:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
20000088:	4a03      	ldr	r2, [pc, #12]	; (20000098 <ascii_ctrl_bit_clear+0x44>)
2000008a:	187b      	adds	r3, r7, r1
2000008c:	781b      	ldrb	r3, [r3, #0]
2000008e:	7513      	strb	r3, [r2, #20]
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	b004      	add	sp, #16
20000096:	bd80      	pop	{r7, pc}
20000098:	40021000 	andmi	r1, r2, r0

2000009c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
2000009c:	b580      	push	{r7, lr}
2000009e:	b082      	sub	sp, #8
200000a0:	af00      	add	r7, sp, #0
200000a2:	0002      	movs	r2, r0
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set( B_E );
200000a8:	2040      	movs	r0, #64	; 0x40
200000aa:	f7ff ffb1 	bl	20000010 <ascii_ctrl_bit_set>
	GPIO_E.odrHigh = byte;
200000ae:	4a06      	ldr	r2, [pc, #24]	; (200000c8 <ascii_write_controller+0x2c>)
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	7553      	strb	r3, [r2, #21]
	delay_250ns();
200000b6:	f000 f9c5 	bl	20000444 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);	//Ska delay vara före eller efter detta?
200000ba:	2040      	movs	r0, #64	; 0x40
200000bc:	f7ff ffca 	bl	20000054 <ascii_ctrl_bit_clear>
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	b002      	add	sp, #8
200000c6:	bd80      	pop	{r7, pc}
200000c8:	40021000 	andmi	r1, r2, r0

200000cc <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
	unsigned char rv;
	ascii_ctrl_bit_set( B_E );
200000d2:	2040      	movs	r0, #64	; 0x40
200000d4:	f7ff ff9c 	bl	20000010 <ascii_ctrl_bit_set>
	delay_250ns();
200000d8:	f000 f9b4 	bl	20000444 <delay_250ns>
	delay_250ns();
200000dc:	f000 f9b2 	bl	20000444 <delay_250ns>
	rv = GPIO_E.idrHigh;
200000e0:	4a06      	ldr	r2, [pc, #24]	; (200000fc <ascii_read_controller+0x30>)
200000e2:	1dfb      	adds	r3, r7, #7
200000e4:	7c52      	ldrb	r2, [r2, #17]
200000e6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_E );
200000e8:	2040      	movs	r0, #64	; 0x40
200000ea:	f7ff ffb3 	bl	20000054 <ascii_ctrl_bit_clear>
	return rv;
200000ee:	1dfb      	adds	r3, r7, #7
200000f0:	781b      	ldrb	r3, [r3, #0]
	
}
200000f2:	0018      	movs	r0, r3
200000f4:	46bd      	mov	sp, r7
200000f6:	b002      	add	sp, #8
200000f8:	bd80      	pop	{r7, pc}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	40021000 	andmi	r1, r2, r0

20000100 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
20000100:	b580      	push	{r7, lr}
20000102:	b082      	sub	sp, #8
20000104:	af00      	add	r7, sp, #0
20000106:	0002      	movs	r2, r0
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000010c:	2001      	movs	r0, #1
2000010e:	f7ff ffa1 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000112:	2002      	movs	r0, #2
20000114:	f7ff ff9e 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000118:	1dfb      	adds	r3, r7, #7
2000011a:	781b      	ldrb	r3, [r3, #0]
2000011c:	0018      	movs	r0, r3
2000011e:	f7ff ffbd 	bl	2000009c <ascii_write_controller>
	
}
20000122:	46c0      	nop			; (mov r8, r8)
20000124:	46bd      	mov	sp, r7
20000126:	b002      	add	sp, #8
20000128:	bd80      	pop	{r7, pc}

2000012a <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
2000012a:	b580      	push	{r7, lr}
2000012c:	b082      	sub	sp, #8
2000012e:	af00      	add	r7, sp, #0
20000130:	0002      	movs	r2, r0
20000132:	1dfb      	adds	r3, r7, #7
20000134:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000136:	2001      	movs	r0, #1
20000138:	f7ff ff6a 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000013c:	2002      	movs	r0, #2
2000013e:	f7ff ff89 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000142:	1dfb      	adds	r3, r7, #7
20000144:	781b      	ldrb	r3, [r3, #0]
20000146:	0018      	movs	r0, r3
20000148:	f7ff ffa8 	bl	2000009c <ascii_write_controller>
}
2000014c:	46c0      	nop			; (mov r8, r8)
2000014e:	46bd      	mov	sp, r7
20000150:	b002      	add	sp, #8
20000152:	bd80      	pop	{r7, pc}

20000154 <ascii_read_status>:



unsigned char ascii_read_status(void)
{
20000154:	b590      	push	{r4, r7, lr}
20000156:	b083      	sub	sp, #12
20000158:	af00      	add	r7, sp, #0
	unsigned char rv;
	GPIO_E.moder &= 0x00005555;
2000015a:	4b0e      	ldr	r3, [pc, #56]	; (20000194 <ascii_read_status+0x40>)
2000015c:	681a      	ldr	r2, [r3, #0]
2000015e:	4b0d      	ldr	r3, [pc, #52]	; (20000194 <ascii_read_status+0x40>)
20000160:	490d      	ldr	r1, [pc, #52]	; (20000198 <ascii_read_status+0x44>)
20000162:	400a      	ands	r2, r1
20000164:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000166:	2002      	movs	r0, #2
20000168:	f7ff ff52 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
2000016c:	2001      	movs	r0, #1
2000016e:	f7ff ff71 	bl	20000054 <ascii_ctrl_bit_clear>
	rv = ascii_read_controller();
20000172:	1dfc      	adds	r4, r7, #7
20000174:	f7ff ffaa 	bl	200000cc <ascii_read_controller>
20000178:	0003      	movs	r3, r0
2000017a:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder |= 0x55555555;
2000017c:	4b05      	ldr	r3, [pc, #20]	; (20000194 <ascii_read_status+0x40>)
2000017e:	681a      	ldr	r2, [r3, #0]
20000180:	4b04      	ldr	r3, [pc, #16]	; (20000194 <ascii_read_status+0x40>)
20000182:	4906      	ldr	r1, [pc, #24]	; (2000019c <ascii_read_status+0x48>)
20000184:	430a      	orrs	r2, r1
20000186:	601a      	str	r2, [r3, #0]
	return rv;
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
}
2000018c:	0018      	movs	r0, r3
2000018e:	46bd      	mov	sp, r7
20000190:	b003      	add	sp, #12
20000192:	bd90      	pop	{r4, r7, pc}
20000194:	40021000 	andmi	r1, r2, r0
20000198:	00005555 	andeq	r5, r0, r5, asr r5
2000019c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001a0 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
200001a0:	b590      	push	{r4, r7, lr}
200001a2:	b083      	sub	sp, #12
200001a4:	af00      	add	r7, sp, #0
	unsigned char rv;
	GPIO_E.moder &= 0x00005555;
200001a6:	4b0e      	ldr	r3, [pc, #56]	; (200001e0 <ascii_read_data+0x40>)
200001a8:	681a      	ldr	r2, [r3, #0]
200001aa:	4b0d      	ldr	r3, [pc, #52]	; (200001e0 <ascii_read_data+0x40>)
200001ac:	490d      	ldr	r1, [pc, #52]	; (200001e4 <ascii_read_data+0x44>)
200001ae:	400a      	ands	r2, r1
200001b0:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200001b2:	2001      	movs	r0, #1
200001b4:	f7ff ff2c 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200001b8:	2002      	movs	r0, #2
200001ba:	f7ff ff29 	bl	20000010 <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
200001be:	1dfc      	adds	r4, r7, #7
200001c0:	f7ff ff84 	bl	200000cc <ascii_read_controller>
200001c4:	0003      	movs	r3, r0
200001c6:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder |= 0x55555555;
200001c8:	4b05      	ldr	r3, [pc, #20]	; (200001e0 <ascii_read_data+0x40>)
200001ca:	681a      	ldr	r2, [r3, #0]
200001cc:	4b04      	ldr	r3, [pc, #16]	; (200001e0 <ascii_read_data+0x40>)
200001ce:	4906      	ldr	r1, [pc, #24]	; (200001e8 <ascii_read_data+0x48>)
200001d0:	430a      	orrs	r2, r1
200001d2:	601a      	str	r2, [r3, #0]
	return rv;
200001d4:	1dfb      	adds	r3, r7, #7
200001d6:	781b      	ldrb	r3, [r3, #0]
}
200001d8:	0018      	movs	r0, r3
200001da:	46bd      	mov	sp, r7
200001dc:	b003      	add	sp, #12
200001de:	bd90      	pop	{r4, r7, pc}
200001e0:	40021000 	andmi	r1, r2, r0
200001e4:	00005555 	andeq	r5, r0, r5, asr r5
200001e8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001ec <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	f7ff ffab 	bl	20000154 <ascii_read_status>
200001fe:	0003      	movs	r3, r0
20000200:	001a      	movs	r2, r3
20000202:	2380      	movs	r3, #128	; 0x80
20000204:	4013      	ands	r3, r2
20000206:	2b80      	cmp	r3, #128	; 0x80
20000208:	d0f7      	beq.n	200001fa <ascii_write_char+0xe>
	delay_micro(8);
2000020a:	2008      	movs	r0, #8
2000020c:	f000 f90b 	bl	20000426 <delay_micro>
	ascii_write_data(c);
20000210:	1dfb      	adds	r3, r7, #7
20000212:	781b      	ldrb	r3, [r3, #0]
20000214:	0018      	movs	r0, r3
20000216:	f7ff ff88 	bl	2000012a <ascii_write_data>
	delay_micro(45);
2000021a:	202d      	movs	r0, #45	; 0x2d
2000021c:	f000 f903 	bl	20000426 <delay_micro>
}
20000220:	46c0      	nop			; (mov r8, r8)
20000222:	46bd      	mov	sp, r7
20000224:	b002      	add	sp, #8
20000226:	bd80      	pop	{r7, pc}

20000228 <ascii_gotoxy>:

void ascii_gotoxy(int row, int col)
{
20000228:	b580      	push	{r7, lr}
2000022a:	b084      	sub	sp, #16
2000022c:	af00      	add	r7, sp, #0
2000022e:	6078      	str	r0, [r7, #4]
20000230:	6039      	str	r1, [r7, #0]
	unsigned int adress;
	adress = row -1;
20000232:	687b      	ldr	r3, [r7, #4]
20000234:	3b01      	subs	r3, #1
20000236:	60fb      	str	r3, [r7, #12]
	if(col == 2)
20000238:	683b      	ldr	r3, [r7, #0]
2000023a:	2b02      	cmp	r3, #2
2000023c:	d102      	bne.n	20000244 <ascii_gotoxy+0x1c>
	{
		adress = adress + 0x40;
2000023e:	68fb      	ldr	r3, [r7, #12]
20000240:	3340      	adds	r3, #64	; 0x40
20000242:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80|adress);
20000244:	68fb      	ldr	r3, [r7, #12]
20000246:	b2db      	uxtb	r3, r3
20000248:	2280      	movs	r2, #128	; 0x80
2000024a:	4252      	negs	r2, r2
2000024c:	4313      	orrs	r3, r2
2000024e:	b2db      	uxtb	r3, r3
20000250:	0018      	movs	r0, r3
20000252:	f7ff ff55 	bl	20000100 <ascii_write_cmd>
}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	46bd      	mov	sp, r7
2000025a:	b004      	add	sp, #16
2000025c:	bd80      	pop	{r7, pc}

2000025e <ascii_init>:

void ascii_init(void)
{
2000025e:	b580      	push	{r7, lr}
20000260:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000262:	46c0      	nop			; (mov r8, r8)
20000264:	f7ff ff76 	bl	20000154 <ascii_read_status>
20000268:	0003      	movs	r3, r0
2000026a:	001a      	movs	r2, r3
2000026c:	2380      	movs	r3, #128	; 0x80
2000026e:	4013      	ands	r3, r2
20000270:	2b80      	cmp	r3, #128	; 0x80
20000272:	d0f7      	beq.n	20000264 <ascii_init+0x6>
	delay_micro(8);
20000274:	2008      	movs	r0, #8
20000276:	f000 f8d6 	bl	20000426 <delay_micro>
	ascii_write_cmd(0x38); //00111000
2000027a:	2038      	movs	r0, #56	; 0x38
2000027c:	f7ff ff40 	bl	20000100 <ascii_write_cmd>
	delay_micro(40);
20000280:	2028      	movs	r0, #40	; 0x28
20000282:	f000 f8d0 	bl	20000426 <delay_micro>
	
	while((ascii_read_status() & 0x80) == 0x80){}
20000286:	46c0      	nop			; (mov r8, r8)
20000288:	f7ff ff64 	bl	20000154 <ascii_read_status>
2000028c:	0003      	movs	r3, r0
2000028e:	001a      	movs	r2, r3
20000290:	2380      	movs	r3, #128	; 0x80
20000292:	4013      	ands	r3, r2
20000294:	2b80      	cmp	r3, #128	; 0x80
20000296:	d0f7      	beq.n	20000288 <ascii_init+0x2a>
	delay_micro(8);
20000298:	2008      	movs	r0, #8
2000029a:	f000 f8c4 	bl	20000426 <delay_micro>
	ascii_write_cmd(0x0D); //00001110
2000029e:	200d      	movs	r0, #13
200002a0:	f7ff ff2e 	bl	20000100 <ascii_write_cmd>
	delay_micro(40);
200002a4:	2028      	movs	r0, #40	; 0x28
200002a6:	f000 f8be 	bl	20000426 <delay_micro>
	
	while((ascii_read_status() & 0x80) == 0x80){}
200002aa:	46c0      	nop			; (mov r8, r8)
200002ac:	f7ff ff52 	bl	20000154 <ascii_read_status>
200002b0:	0003      	movs	r3, r0
200002b2:	001a      	movs	r2, r3
200002b4:	2380      	movs	r3, #128	; 0x80
200002b6:	4013      	ands	r3, r2
200002b8:	2b80      	cmp	r3, #128	; 0x80
200002ba:	d0f7      	beq.n	200002ac <ascii_init+0x4e>
	delay_micro(8);
200002bc:	2008      	movs	r0, #8
200002be:	f000 f8b2 	bl	20000426 <delay_micro>
	ascii_write_cmd(1);
200002c2:	2001      	movs	r0, #1
200002c4:	f7ff ff1c 	bl	20000100 <ascii_write_cmd>
	delay_milli(2);
200002c8:	2002      	movs	r0, #2
200002ca:	f000 f89d 	bl	20000408 <delay_milli>
	
	while((ascii_read_status() & 0x80) == 0x80){}
200002ce:	46c0      	nop			; (mov r8, r8)
200002d0:	f7ff ff40 	bl	20000154 <ascii_read_status>
200002d4:	0003      	movs	r3, r0
200002d6:	001a      	movs	r2, r3
200002d8:	2380      	movs	r3, #128	; 0x80
200002da:	4013      	ands	r3, r2
200002dc:	2b80      	cmp	r3, #128	; 0x80
200002de:	d0f7      	beq.n	200002d0 <ascii_init+0x72>
	delay_micro(8);
200002e0:	2008      	movs	r0, #8
200002e2:	f000 f8a0 	bl	20000426 <delay_micro>
	ascii_write_cmd(0x06); //Rätt? Increment? 00000100
200002e6:	2006      	movs	r0, #6
200002e8:	f7ff ff0a 	bl	20000100 <ascii_write_cmd>
	delay_micro(39);
200002ec:	2027      	movs	r0, #39	; 0x27
200002ee:	f000 f89a 	bl	20000426 <delay_micro>
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	46bd      	mov	sp, r7
200002f6:	bd80      	pop	{r7, pc}

200002f8 <keyb>:
#include <gpio.h>

unsigned char keyb(void) 
{ 
200002f8:	b590      	push	{r4, r7, lr}
200002fa:	b087      	sub	sp, #28
200002fc:	af00      	add	r7, sp, #0
 unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD}; 
200002fe:	003b      	movs	r3, r7
20000300:	4a16      	ldr	r2, [pc, #88]	; (2000035c <keyb+0x64>)
20000302:	ca13      	ldmia	r2!, {r0, r1, r4}
20000304:	c313      	stmia	r3!, {r0, r1, r4}
20000306:	6812      	ldr	r2, [r2, #0]
20000308:	601a      	str	r2, [r3, #0]
 int row, col; 
 for (row=1; row <=4 ; row++ ) { 
2000030a:	2301      	movs	r3, #1
2000030c:	617b      	str	r3, [r7, #20]
2000030e:	e019      	b.n	20000344 <keyb+0x4c>
  kbdActivate(row); 
20000310:	697b      	ldr	r3, [r7, #20]
20000312:	0018      	movs	r0, r3
20000314:	f000 f824 	bl	20000360 <kbdActivate>
  col = kbdGetCol();
20000318:	f000 f84c 	bl	200003b4 <kbdGetCol>
2000031c:	0003      	movs	r3, r0
2000031e:	613b      	str	r3, [r7, #16]
  if( col != 0 ) { 
20000320:	693b      	ldr	r3, [r7, #16]
20000322:	2b00      	cmp	r3, #0
20000324:	d00b      	beq.n	2000033e <keyb+0x46>
   kbdActivate( 0 ); 
20000326:	2000      	movs	r0, #0
20000328:	f000 f81a 	bl	20000360 <kbdActivate>
   return key [4*(row-1)+(col-1) ]; 
2000032c:	697b      	ldr	r3, [r7, #20]
2000032e:	3b01      	subs	r3, #1
20000330:	009a      	lsls	r2, r3, #2
20000332:	693b      	ldr	r3, [r7, #16]
20000334:	3b01      	subs	r3, #1
20000336:	18d3      	adds	r3, r2, r3
20000338:	003a      	movs	r2, r7
2000033a:	5cd3      	ldrb	r3, [r2, r3]
2000033c:	e009      	b.n	20000352 <keyb+0x5a>
 for (row=1; row <=4 ; row++ ) { 
2000033e:	697b      	ldr	r3, [r7, #20]
20000340:	3301      	adds	r3, #1
20000342:	617b      	str	r3, [r7, #20]
20000344:	697b      	ldr	r3, [r7, #20]
20000346:	2b04      	cmp	r3, #4
20000348:	dde2      	ble.n	20000310 <keyb+0x18>
  } 
 } 
 kbdActivate( 0 ); 
2000034a:	2000      	movs	r0, #0
2000034c:	f000 f808 	bl	20000360 <kbdActivate>
 return 0xFF; 
20000350:	23ff      	movs	r3, #255	; 0xff
}
20000352:	0018      	movs	r0, r3
20000354:	46bd      	mov	sp, r7
20000356:	b007      	add	sp, #28
20000358:	bd90      	pop	{r4, r7, pc}
2000035a:	46c0      	nop			; (mov r8, r8)
2000035c:	20000e48 	andcs	r0, r0, r8, asr #28

20000360 <kbdActivate>:

void kbdActivate( unsigned int row ) /* Aktivera angiven rad hos tangentbordet, eller * deaktivera samtliga */
{  
20000360:	b580      	push	{r7, lr}
20000362:	b082      	sub	sp, #8
20000364:	af00      	add	r7, sp, #0
20000366:	6078      	str	r0, [r7, #4]
 switch( row ) 
20000368:	687b      	ldr	r3, [r7, #4]
2000036a:	2b04      	cmp	r3, #4
2000036c:	d819      	bhi.n	200003a2 <kbdActivate+0x42>
2000036e:	687b      	ldr	r3, [r7, #4]
20000370:	009a      	lsls	r2, r3, #2
20000372:	4b0e      	ldr	r3, [pc, #56]	; (200003ac <kbdActivate+0x4c>)
20000374:	18d3      	adds	r3, r2, r3
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	469f      	mov	pc, r3
 { 
  case 1: GPIO_D.odrHigh = 0x10; break; 
2000037a:	4b0d      	ldr	r3, [pc, #52]	; (200003b0 <kbdActivate+0x50>)
2000037c:	2210      	movs	r2, #16
2000037e:	755a      	strb	r2, [r3, #21]
20000380:	e00f      	b.n	200003a2 <kbdActivate+0x42>
  case 2: GPIO_D.odrHigh = 0x20; break; 
20000382:	4b0b      	ldr	r3, [pc, #44]	; (200003b0 <kbdActivate+0x50>)
20000384:	2220      	movs	r2, #32
20000386:	755a      	strb	r2, [r3, #21]
20000388:	e00b      	b.n	200003a2 <kbdActivate+0x42>
  case 3: GPIO_D.odrHigh = 0x40; break; 
2000038a:	4b09      	ldr	r3, [pc, #36]	; (200003b0 <kbdActivate+0x50>)
2000038c:	2240      	movs	r2, #64	; 0x40
2000038e:	755a      	strb	r2, [r3, #21]
20000390:	e007      	b.n	200003a2 <kbdActivate+0x42>
  case 4: GPIO_D.odrHigh = 0x80; break; 
20000392:	4b07      	ldr	r3, [pc, #28]	; (200003b0 <kbdActivate+0x50>)
20000394:	2280      	movs	r2, #128	; 0x80
20000396:	755a      	strb	r2, [r3, #21]
20000398:	e003      	b.n	200003a2 <kbdActivate+0x42>
  case 0: GPIO_D.odrHigh = 0x00; break; 
2000039a:	4b05      	ldr	r3, [pc, #20]	; (200003b0 <kbdActivate+0x50>)
2000039c:	2200      	movs	r2, #0
2000039e:	755a      	strb	r2, [r3, #21]
200003a0:	46c0      	nop			; (mov r8, r8)
 } 
}
200003a2:	46c0      	nop			; (mov r8, r8)
200003a4:	46bd      	mov	sp, r7
200003a6:	b002      	add	sp, #8
200003a8:	bd80      	pop	{r7, pc}
200003aa:	46c0      	nop			; (mov r8, r8)
200003ac:	20000e58 	andcs	r0, r0, r8, asr lr
200003b0:	40020c00 	andmi	r0, r2, r0, lsl #24

200003b4 <kbdGetCol>:
int kbdGetCol ( void )  /* Om någon tangent (i aktiverad rad) * är nedtryckt, returnera dess kolumnnummer, * annars, returnera 0 */ 
{
200003b4:	b580      	push	{r7, lr}
200003b6:	b082      	sub	sp, #8
200003b8:	af00      	add	r7, sp, #0
 unsigned char c; 
 c = GPIO_D.idrHigh; 
200003ba:	4a12      	ldr	r2, [pc, #72]	; (20000404 <kbdGetCol+0x50>)
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	7c52      	ldrb	r2, [r2, #17]
200003c0:	701a      	strb	r2, [r3, #0]
 if ( c & 0x8 ) return 4; 
200003c2:	1dfb      	adds	r3, r7, #7
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	2208      	movs	r2, #8
200003c8:	4013      	ands	r3, r2
200003ca:	d001      	beq.n	200003d0 <kbdGetCol+0x1c>
200003cc:	2304      	movs	r3, #4
200003ce:	e015      	b.n	200003fc <kbdGetCol+0x48>
 if ( c & 0x4 ) return 3;
200003d0:	1dfb      	adds	r3, r7, #7
200003d2:	781b      	ldrb	r3, [r3, #0]
200003d4:	2204      	movs	r2, #4
200003d6:	4013      	ands	r3, r2
200003d8:	d001      	beq.n	200003de <kbdGetCol+0x2a>
200003da:	2303      	movs	r3, #3
200003dc:	e00e      	b.n	200003fc <kbdGetCol+0x48>
 if ( c & 0x2 ) return 2;
200003de:	1dfb      	adds	r3, r7, #7
200003e0:	781b      	ldrb	r3, [r3, #0]
200003e2:	2202      	movs	r2, #2
200003e4:	4013      	ands	r3, r2
200003e6:	d001      	beq.n	200003ec <kbdGetCol+0x38>
200003e8:	2302      	movs	r3, #2
200003ea:	e007      	b.n	200003fc <kbdGetCol+0x48>
 if ( c & 0x1 ) return 1; 
200003ec:	1dfb      	adds	r3, r7, #7
200003ee:	781b      	ldrb	r3, [r3, #0]
200003f0:	2201      	movs	r2, #1
200003f2:	4013      	ands	r3, r2
200003f4:	d001      	beq.n	200003fa <kbdGetCol+0x46>
200003f6:	2301      	movs	r3, #1
200003f8:	e000      	b.n	200003fc <kbdGetCol+0x48>
 return 0; 
200003fa:	2300      	movs	r3, #0
}
200003fc:	0018      	movs	r0, r3
200003fe:	46bd      	mov	sp, r7
20000400:	b002      	add	sp, #8
20000402:	bd80      	pop	{r7, pc}
20000404:	40020c00 	andmi	r0, r2, r0, lsl #24

20000408 <delay_milli>:
#include <delay.h>
#include <gpio.h>

void delay_milli(int ms)
{
20000408:	b580      	push	{r7, lr}
2000040a:	b082      	sub	sp, #8
2000040c:	af00      	add	r7, sp, #0
2000040e:	6078      	str	r0, [r7, #4]
	while(ms > 0)
20000410:	e002      	b.n	20000418 <delay_milli+0x10>
	{
	#ifndef SIMULATOR
	delay_micro(1000);
	#endif
	ms--;
20000412:	687b      	ldr	r3, [r7, #4]
20000414:	3b01      	subs	r3, #1
20000416:	607b      	str	r3, [r7, #4]
	while(ms > 0)
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	2b00      	cmp	r3, #0
2000041c:	dcf9      	bgt.n	20000412 <delay_milli+0xa>
	}
}
2000041e:	46c0      	nop			; (mov r8, r8)
20000420:	46bd      	mov	sp, r7
20000422:	b002      	add	sp, #8
20000424:	bd80      	pop	{r7, pc}

20000426 <delay_micro>:

void delay_micro(int us)
{
20000426:	b580      	push	{r7, lr}
20000428:	b082      	sub	sp, #8
2000042a:	af00      	add	r7, sp, #0
2000042c:	6078      	str	r0, [r7, #4]
	while(us > 0)
2000042e:	e002      	b.n	20000436 <delay_micro+0x10>
	delay_250ns();
	delay_250ns();
	delay_250ns();
	delay_250ns();
	#endif
	us--;
20000430:	687b      	ldr	r3, [r7, #4]
20000432:	3b01      	subs	r3, #1
20000434:	607b      	str	r3, [r7, #4]
	while(us > 0)
20000436:	687b      	ldr	r3, [r7, #4]
20000438:	2b00      	cmp	r3, #0
2000043a:	dcf9      	bgt.n	20000430 <delay_micro+0xa>
	}
}
2000043c:	46c0      	nop			; (mov r8, r8)
2000043e:	46bd      	mov	sp, r7
20000440:	b002      	add	sp, #8
20000442:	bd80      	pop	{r7, pc}

20000444 <delay_250ns>:

void delay_250ns(void)
{
20000444:	b580      	push	{r7, lr}
20000446:	b082      	sub	sp, #8
20000448:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000044a:	4b10      	ldr	r3, [pc, #64]	; (2000048c <delay_250ns+0x48>)
2000044c:	2200      	movs	r2, #0
2000044e:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 0x29; //0x2A - 1
20000450:	4b0f      	ldr	r3, [pc, #60]	; (20000490 <delay_250ns+0x4c>)
20000452:	2229      	movs	r2, #41	; 0x29
20000454:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0x0;
20000456:	4b0f      	ldr	r3, [pc, #60]	; (20000494 <delay_250ns+0x50>)
20000458:	2200      	movs	r2, #0
2000045a:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000045c:	4b0b      	ldr	r3, [pc, #44]	; (2000048c <delay_250ns+0x48>)
2000045e:	2205      	movs	r2, #5
20000460:	601a      	str	r2, [r3, #0]
	unsigned int ctrl = *STK_CTRL & 0x10000;
20000462:	4b0a      	ldr	r3, [pc, #40]	; (2000048c <delay_250ns+0x48>)
20000464:	681a      	ldr	r2, [r3, #0]
20000466:	2380      	movs	r3, #128	; 0x80
20000468:	025b      	lsls	r3, r3, #9
2000046a:	4013      	ands	r3, r2
2000046c:	607b      	str	r3, [r7, #4]
	while((*STK_CTRL & 0x10000) == 0);
2000046e:	46c0      	nop			; (mov r8, r8)
20000470:	4b06      	ldr	r3, [pc, #24]	; (2000048c <delay_250ns+0x48>)
20000472:	681a      	ldr	r2, [r3, #0]
20000474:	2380      	movs	r3, #128	; 0x80
20000476:	025b      	lsls	r3, r3, #9
20000478:	4013      	ands	r3, r2
2000047a:	d0f9      	beq.n	20000470 <delay_250ns+0x2c>
	*STK_CTRL= 0;
2000047c:	4b03      	ldr	r3, [pc, #12]	; (2000048c <delay_250ns+0x48>)
2000047e:	2200      	movs	r2, #0
20000480:	601a      	str	r2, [r3, #0]
	
}
20000482:	46c0      	nop			; (mov r8, r8)
20000484:	46bd      	mov	sp, r7
20000486:	b002      	add	sp, #8
20000488:	bd80      	pop	{r7, pc}
2000048a:	46c0      	nop			; (mov r8, r8)
2000048c:	e000e010 	and	lr, r0, r0, lsl r0
20000490:	e000e014 	and	lr, r0, r4, lsl r0
20000494:	e000e018 	and	lr, r0, r8, lsl r0

20000498 <delay_500ns>:

void delay_500ns(void)
{
20000498:	b580      	push	{r7, lr}
2000049a:	af00      	add	r7, sp, #0
	#ifndef SIMULATOR
	delay_250ns();
	delay_250ns();
	#endif
}
2000049c:	46c0      	nop			; (mov r8, r8)
2000049e:	46bd      	mov	sp, r7
200004a0:	bd80      	pop	{r7, pc}
200004a2:	46c0      	nop			; (mov r8, r8)

200004a4 <graphic_wait_ready>:
#include <graphic.h>
#include <delay.h>
#include <gpio.h>

static void graphic_wait_ready(void)
{
200004a4:	b580      	push	{r7, lr}
200004a6:	b082      	sub	sp, #8
200004a8:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200004aa:	2040      	movs	r0, #64	; 0x40
200004ac:	f000 f932 	bl	20000714 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555;
200004b0:	4b14      	ldr	r3, [pc, #80]	; (20000504 <graphic_wait_ready+0x60>)
200004b2:	4a15      	ldr	r2, [pc, #84]	; (20000508 <graphic_wait_ready+0x64>)
200004b4:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200004b6:	2001      	movs	r0, #1
200004b8:	f000 f92c 	bl	20000714 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200004bc:	2002      	movs	r0, #2
200004be:	f000 f907 	bl	200006d0 <graphic_ctrl_bit_set>
	delay_500ns();
200004c2:	f7ff ffe9 	bl	20000498 <delay_500ns>
	
	while(1)
	{
		graphic_ctrl_bit_set(B_E);
200004c6:	2040      	movs	r0, #64	; 0x40
200004c8:	f000 f902 	bl	200006d0 <graphic_ctrl_bit_set>
		delay_500ns();
200004cc:	f7ff ffe4 	bl	20000498 <delay_500ns>
		c = GPIO_E.idrHigh & LCD_BUSY; //LCD_BUSY?????
200004d0:	4b0c      	ldr	r3, [pc, #48]	; (20000504 <graphic_wait_ready+0x60>)
200004d2:	7c5b      	ldrb	r3, [r3, #17]
200004d4:	b2da      	uxtb	r2, r3
200004d6:	1dfb      	adds	r3, r7, #7
200004d8:	217f      	movs	r1, #127	; 0x7f
200004da:	438a      	bics	r2, r1
200004dc:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200004de:	2040      	movs	r0, #64	; 0x40
200004e0:	f000 f918 	bl	20000714 <graphic_ctrl_bit_clear>
		delay_500ns();
200004e4:	f7ff ffd8 	bl	20000498 <delay_500ns>
		if(c == 0)
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	2b00      	cmp	r3, #0
200004ee:	d000      	beq.n	200004f2 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
200004f0:	e7e9      	b.n	200004c6 <graphic_wait_ready+0x22>
		{
			break;
200004f2:	46c0      	nop			; (mov r8, r8)
		}
	}
	GPIO_E.moder = 0x55555555;
200004f4:	4b03      	ldr	r3, [pc, #12]	; (20000504 <graphic_wait_ready+0x60>)
200004f6:	4a05      	ldr	r2, [pc, #20]	; (2000050c <graphic_wait_ready+0x68>)
200004f8:	601a      	str	r2, [r3, #0]
}
200004fa:	46c0      	nop			; (mov r8, r8)
200004fc:	46bd      	mov	sp, r7
200004fe:	b002      	add	sp, #8
20000500:	bd80      	pop	{r7, pc}
20000502:	46c0      	nop			; (mov r8, r8)
20000504:	40021000 	andmi	r1, r2, r0
20000508:	00005555 	andeq	r5, r0, r5, asr r5
2000050c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000510 <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
20000510:	b580      	push	{r7, lr}
20000512:	b084      	sub	sp, #16
20000514:	af00      	add	r7, sp, #0
20000516:	0002      	movs	r2, r0
20000518:	1dfb      	adds	r3, r7, #7
2000051a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
2000051c:	2040      	movs	r0, #64	; 0x40
2000051e:	f000 f8f9 	bl	20000714 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555;
20000522:	4b1c      	ldr	r3, [pc, #112]	; (20000594 <graphic_read+0x84>)
20000524:	4a1c      	ldr	r2, [pc, #112]	; (20000598 <graphic_read+0x88>)
20000526:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
20000528:	2003      	movs	r0, #3
2000052a:	f000 f8d1 	bl	200006d0 <graphic_ctrl_bit_set>
	select_controller(controller);
2000052e:	1dfb      	adds	r3, r7, #7
20000530:	781b      	ldrb	r3, [r3, #0]
20000532:	0018      	movs	r0, r3
20000534:	f000 f912 	bl	2000075c <select_controller>
	delay_500ns();
20000538:	f7ff ffae 	bl	20000498 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000053c:	2040      	movs	r0, #64	; 0x40
2000053e:	f000 f8c7 	bl	200006d0 <graphic_ctrl_bit_set>
	delay_500ns();
20000542:	f7ff ffa9 	bl	20000498 <delay_500ns>
	c = GPIO_E.idrHigh;
20000546:	4a13      	ldr	r2, [pc, #76]	; (20000594 <graphic_read+0x84>)
20000548:	230f      	movs	r3, #15
2000054a:	18fb      	adds	r3, r7, r3
2000054c:	7c52      	ldrb	r2, [r2, #17]
2000054e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000550:	2040      	movs	r0, #64	; 0x40
20000552:	f000 f8df 	bl	20000714 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x55555555;
20000556:	4b0f      	ldr	r3, [pc, #60]	; (20000594 <graphic_read+0x84>)
20000558:	4a10      	ldr	r2, [pc, #64]	; (2000059c <graphic_read+0x8c>)
2000055a:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1){
2000055c:	1dfb      	adds	r3, r7, #7
2000055e:	781b      	ldrb	r3, [r3, #0]
20000560:	2208      	movs	r2, #8
20000562:	4013      	ands	r3, r2
20000564:	d004      	beq.n	20000570 <graphic_read+0x60>
		select_controller(B_CS1);
20000566:	2008      	movs	r0, #8
20000568:	f000 f8f8 	bl	2000075c <select_controller>
		graphic_wait_ready();
2000056c:	f7ff ff9a 	bl	200004a4 <graphic_wait_ready>
	}
	if(controller & B_CS2)
20000570:	1dfb      	adds	r3, r7, #7
20000572:	781b      	ldrb	r3, [r3, #0]
20000574:	2210      	movs	r2, #16
20000576:	4013      	ands	r3, r2
20000578:	d004      	beq.n	20000584 <graphic_read+0x74>
	{
		select_controller(B_CS2);
2000057a:	2010      	movs	r0, #16
2000057c:	f000 f8ee 	bl	2000075c <select_controller>
		graphic_wait_ready();
20000580:	f7ff ff90 	bl	200004a4 <graphic_wait_ready>
	}
	return c;
20000584:	230f      	movs	r3, #15
20000586:	18fb      	adds	r3, r7, r3
20000588:	781b      	ldrb	r3, [r3, #0]
}
2000058a:	0018      	movs	r0, r3
2000058c:	46bd      	mov	sp, r7
2000058e:	b004      	add	sp, #16
20000590:	bd80      	pop	{r7, pc}
20000592:	46c0      	nop			; (mov r8, r8)
20000594:	40021000 	andmi	r1, r2, r0
20000598:	00005555 	andeq	r5, r0, r5, asr r5
2000059c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200005a0 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
200005a0:	b580      	push	{r7, lr}
200005a2:	b082      	sub	sp, #8
200005a4:	af00      	add	r7, sp, #0
200005a6:	0002      	movs	r2, r0
200005a8:	1dfb      	adds	r3, r7, #7
200005aa:	701a      	strb	r2, [r3, #0]
200005ac:	1dbb      	adds	r3, r7, #6
200005ae:	1c0a      	adds	r2, r1, #0
200005b0:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	GPIO_E.odrHigh = value;
200005b2:	4a1a      	ldr	r2, [pc, #104]	; (2000061c <graphic_write+0x7c>)
200005b4:	1dfb      	adds	r3, r7, #7
200005b6:	781b      	ldrb	r3, [r3, #0]
200005b8:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200005ba:	1dbb      	adds	r3, r7, #6
200005bc:	781b      	ldrb	r3, [r3, #0]
200005be:	0018      	movs	r0, r3
200005c0:	f000 f8cc 	bl	2000075c <select_controller>
	delay_500ns();
200005c4:	f7ff ff68 	bl	20000498 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200005c8:	2040      	movs	r0, #64	; 0x40
200005ca:	f000 f881 	bl	200006d0 <graphic_ctrl_bit_set>
	delay_500ns();
200005ce:	f7ff ff63 	bl	20000498 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200005d2:	2040      	movs	r0, #64	; 0x40
200005d4:	f000 f89e 	bl	20000714 <graphic_ctrl_bit_clear>

	if(controller & B_CS1){
200005d8:	1dbb      	adds	r3, r7, #6
200005da:	781b      	ldrb	r3, [r3, #0]
200005dc:	2208      	movs	r2, #8
200005de:	4013      	ands	r3, r2
200005e0:	d004      	beq.n	200005ec <graphic_write+0x4c>
		select_controller(B_CS1);
200005e2:	2008      	movs	r0, #8
200005e4:	f000 f8ba 	bl	2000075c <select_controller>
		graphic_wait_ready();
200005e8:	f7ff ff5c 	bl	200004a4 <graphic_wait_ready>
	}
	if(controller & B_CS2)
200005ec:	1dbb      	adds	r3, r7, #6
200005ee:	781b      	ldrb	r3, [r3, #0]
200005f0:	2210      	movs	r2, #16
200005f2:	4013      	ands	r3, r2
200005f4:	d004      	beq.n	20000600 <graphic_write+0x60>
	{
		select_controller(B_CS2);
200005f6:	2010      	movs	r0, #16
200005f8:	f000 f8b0 	bl	2000075c <select_controller>
		graphic_wait_ready();
200005fc:	f7ff ff52 	bl	200004a4 <graphic_wait_ready>
	}
	GPIO_E.odrHigh = 0;
20000600:	4b06      	ldr	r3, [pc, #24]	; (2000061c <graphic_write+0x7c>)
20000602:	2200      	movs	r2, #0
20000604:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000606:	2040      	movs	r0, #64	; 0x40
20000608:	f000 f862 	bl	200006d0 <graphic_ctrl_bit_set>
	select_controller(0);
2000060c:	2000      	movs	r0, #0
2000060e:	f000 f8a5 	bl	2000075c <select_controller>
}
20000612:	46c0      	nop			; (mov r8, r8)
20000614:	46bd      	mov	sp, r7
20000616:	b002      	add	sp, #8
20000618:	bd80      	pop	{r7, pc}
2000061a:	46c0      	nop			; (mov r8, r8)
2000061c:	40021000 	andmi	r1, r2, r0

20000620 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller)
{
20000620:	b580      	push	{r7, lr}
20000622:	b082      	sub	sp, #8
20000624:	af00      	add	r7, sp, #0
20000626:	0002      	movs	r2, r0
20000628:	1dfb      	adds	r3, r7, #7
2000062a:	701a      	strb	r2, [r3, #0]
2000062c:	1dbb      	adds	r3, r7, #6
2000062e:	1c0a      	adds	r2, r1, #0
20000630:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000632:	2040      	movs	r0, #64	; 0x40
20000634:	f000 f86e 	bl	20000714 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000638:	1dbb      	adds	r3, r7, #6
2000063a:	781b      	ldrb	r3, [r3, #0]
2000063c:	0018      	movs	r0, r3
2000063e:	f000 f88d 	bl	2000075c <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000642:	2003      	movs	r0, #3
20000644:	f000 f866 	bl	20000714 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000648:	1dbb      	adds	r3, r7, #6
2000064a:	781a      	ldrb	r2, [r3, #0]
2000064c:	1dfb      	adds	r3, r7, #7
2000064e:	781b      	ldrb	r3, [r3, #0]
20000650:	0011      	movs	r1, r2
20000652:	0018      	movs	r0, r3
20000654:	f7ff ffa4 	bl	200005a0 <graphic_write>
}
20000658:	46c0      	nop			; (mov r8, r8)
2000065a:	46bd      	mov	sp, r7
2000065c:	b002      	add	sp, #8
2000065e:	bd80      	pop	{r7, pc}

20000660 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
20000660:	b580      	push	{r7, lr}
20000662:	b082      	sub	sp, #8
20000664:	af00      	add	r7, sp, #0
20000666:	0002      	movs	r2, r0
20000668:	1dfb      	adds	r3, r7, #7
2000066a:	701a      	strb	r2, [r3, #0]
2000066c:	1dbb      	adds	r3, r7, #6
2000066e:	1c0a      	adds	r2, r1, #0
20000670:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000672:	2040      	movs	r0, #64	; 0x40
20000674:	f000 f84e 	bl	20000714 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000678:	1dbb      	adds	r3, r7, #6
2000067a:	781b      	ldrb	r3, [r3, #0]
2000067c:	0018      	movs	r0, r3
2000067e:	f000 f86d 	bl	2000075c <select_controller>
	graphic_ctrl_bit_clear(B_RW);
20000682:	2002      	movs	r0, #2
20000684:	f000 f846 	bl	20000714 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RS);
20000688:	2001      	movs	r0, #1
2000068a:	f000 f821 	bl	200006d0 <graphic_ctrl_bit_set>
	graphic_write(data, controller);
2000068e:	1dbb      	adds	r3, r7, #6
20000690:	781a      	ldrb	r2, [r3, #0]
20000692:	1dfb      	adds	r3, r7, #7
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	0011      	movs	r1, r2
20000698:	0018      	movs	r0, r3
2000069a:	f7ff ff81 	bl	200005a0 <graphic_write>
}
2000069e:	46c0      	nop			; (mov r8, r8)
200006a0:	46bd      	mov	sp, r7
200006a2:	b002      	add	sp, #8
200006a4:	bd80      	pop	{r7, pc}

200006a6 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
200006a6:	b580      	push	{r7, lr}
200006a8:	b082      	sub	sp, #8
200006aa:	af00      	add	r7, sp, #0
200006ac:	0002      	movs	r2, r0
200006ae:	1dfb      	adds	r3, r7, #7
200006b0:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200006b2:	1dfb      	adds	r3, r7, #7
200006b4:	781b      	ldrb	r3, [r3, #0]
200006b6:	0018      	movs	r0, r3
200006b8:	f7ff ff2a 	bl	20000510 <graphic_read>
	return graphic_read(controller);
200006bc:	1dfb      	adds	r3, r7, #7
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	0018      	movs	r0, r3
200006c2:	f7ff ff25 	bl	20000510 <graphic_read>
200006c6:	0003      	movs	r3, r0
}
200006c8:	0018      	movs	r0, r3
200006ca:	46bd      	mov	sp, r7
200006cc:	b002      	add	sp, #8
200006ce:	bd80      	pop	{r7, pc}

200006d0 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b084      	sub	sp, #16
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;
200006dc:	4a0c      	ldr	r2, [pc, #48]	; (20000710 <graphic_ctrl_bit_set+0x40>)
200006de:	210f      	movs	r1, #15
200006e0:	187b      	adds	r3, r7, r1
200006e2:	7d12      	ldrb	r2, [r2, #20]
200006e4:	701a      	strb	r2, [r3, #0]
	c |= ( ~B_SELECT & x ); //Nollställer B_Select!
200006e6:	1dfb      	adds	r3, r7, #7
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	b25b      	sxtb	r3, r3
200006ec:	2204      	movs	r2, #4
200006ee:	4393      	bics	r3, r2
200006f0:	b25a      	sxtb	r2, r3
200006f2:	187b      	adds	r3, r7, r1
200006f4:	781b      	ldrb	r3, [r3, #0]
200006f6:	b25b      	sxtb	r3, r3
200006f8:	4313      	orrs	r3, r2
200006fa:	b25a      	sxtb	r2, r3
200006fc:	187b      	adds	r3, r7, r1
200006fe:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
20000700:	4a03      	ldr	r2, [pc, #12]	; (20000710 <graphic_ctrl_bit_set+0x40>)
20000702:	187b      	adds	r3, r7, r1
20000704:	781b      	ldrb	r3, [r3, #0]
20000706:	7513      	strb	r3, [r2, #20]
}
20000708:	46c0      	nop			; (mov r8, r8)
2000070a:	46bd      	mov	sp, r7
2000070c:	b004      	add	sp, #16
2000070e:	bd80      	pop	{r7, pc}
20000710:	40021000 	andmi	r1, r2, r0

20000714 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x)
{
20000714:	b580      	push	{r7, lr}
20000716:	b084      	sub	sp, #16
20000718:	af00      	add	r7, sp, #0
2000071a:	0002      	movs	r2, r0
2000071c:	1dfb      	adds	r3, r7, #7
2000071e:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odrLow;;
20000720:	4a0d      	ldr	r2, [pc, #52]	; (20000758 <graphic_ctrl_bit_clear+0x44>)
20000722:	210f      	movs	r1, #15
20000724:	187b      	adds	r3, r7, r1
20000726:	7d12      	ldrb	r2, [r2, #20]
20000728:	701a      	strb	r2, [r3, #0]
	c &= (~B_SELECT & ~x); //~ bildar 1-komplement
2000072a:	1dfb      	adds	r3, r7, #7
2000072c:	781b      	ldrb	r3, [r3, #0]
2000072e:	43db      	mvns	r3, r3
20000730:	b2db      	uxtb	r3, r3
20000732:	187a      	adds	r2, r7, r1
20000734:	7812      	ldrb	r2, [r2, #0]
20000736:	4013      	ands	r3, r2
20000738:	b2da      	uxtb	r2, r3
2000073a:	0008      	movs	r0, r1
2000073c:	187b      	adds	r3, r7, r1
2000073e:	2104      	movs	r1, #4
20000740:	438a      	bics	r2, r1
20000742:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = c;
20000744:	4a04      	ldr	r2, [pc, #16]	; (20000758 <graphic_ctrl_bit_clear+0x44>)
20000746:	0001      	movs	r1, r0
20000748:	187b      	adds	r3, r7, r1
2000074a:	781b      	ldrb	r3, [r3, #0]
2000074c:	7513      	strb	r3, [r2, #20]
}
2000074e:	46c0      	nop			; (mov r8, r8)
20000750:	46bd      	mov	sp, r7
20000752:	b004      	add	sp, #16
20000754:	bd80      	pop	{r7, pc}
20000756:	46c0      	nop			; (mov r8, r8)
20000758:	40021000 	andmi	r1, r2, r0

2000075c <select_controller>:

void select_controller(uint8_t controller)
{
2000075c:	b580      	push	{r7, lr}
2000075e:	b082      	sub	sp, #8
20000760:	af00      	add	r7, sp, #0
20000762:	0002      	movs	r2, r0
20000764:	1dfb      	adds	r3, r7, #7
20000766:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000768:	1dfb      	adds	r3, r7, #7
2000076a:	781b      	ldrb	r3, [r3, #0]
2000076c:	2b08      	cmp	r3, #8
2000076e:	d00c      	beq.n	2000078a <select_controller+0x2e>
20000770:	dc02      	bgt.n	20000778 <select_controller+0x1c>
20000772:	2b00      	cmp	r3, #0
20000774:	d005      	beq.n	20000782 <select_controller+0x26>
				break;
		case B_CS1|B_CS2:
				graphic_ctrl_bit_set(B_CS1|B_CS2);
				break;
	}
}
20000776:	e01a      	b.n	200007ae <select_controller+0x52>
	switch(controller){
20000778:	2b10      	cmp	r3, #16
2000077a:	d00d      	beq.n	20000798 <select_controller+0x3c>
2000077c:	2b18      	cmp	r3, #24
2000077e:	d012      	beq.n	200007a6 <select_controller+0x4a>
}
20000780:	e015      	b.n	200007ae <select_controller+0x52>
				graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000782:	2018      	movs	r0, #24
20000784:	f7ff ffc6 	bl	20000714 <graphic_ctrl_bit_clear>
				break;
20000788:	e011      	b.n	200007ae <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1);
2000078a:	2008      	movs	r0, #8
2000078c:	f7ff ffa0 	bl	200006d0 <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS2);
20000790:	2010      	movs	r0, #16
20000792:	f7ff ffbf 	bl	20000714 <graphic_ctrl_bit_clear>
				break;
20000796:	e00a      	b.n	200007ae <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS2);
20000798:	2010      	movs	r0, #16
2000079a:	f7ff ff99 	bl	200006d0 <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS1);
2000079e:	2008      	movs	r0, #8
200007a0:	f7ff ffb8 	bl	20000714 <graphic_ctrl_bit_clear>
				break;
200007a4:	e003      	b.n	200007ae <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1|B_CS2);
200007a6:	2018      	movs	r0, #24
200007a8:	f7ff ff92 	bl	200006d0 <graphic_ctrl_bit_set>
				break;
200007ac:	46c0      	nop			; (mov r8, r8)
}
200007ae:	46c0      	nop			; (mov r8, r8)
200007b0:	46bd      	mov	sp, r7
200007b2:	b002      	add	sp, #8
200007b4:	bd80      	pop	{r7, pc}

200007b6 <graphic_initialize>:

void graphic_initialize(void)
{
200007b6:	b580      	push	{r7, lr}
200007b8:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200007ba:	2040      	movs	r0, #64	; 0x40
200007bc:	f7ff ff88 	bl	200006d0 <graphic_ctrl_bit_set>
	delay_micro(10);
200007c0:	200a      	movs	r0, #10
200007c2:	f7ff fe30 	bl	20000426 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
200007c6:	2078      	movs	r0, #120	; 0x78
200007c8:	f7ff ffa4 	bl	20000714 <graphic_ctrl_bit_clear>
	delay_milli(30);
200007cc:	201e      	movs	r0, #30
200007ce:	f7ff fe1b 	bl	20000408 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200007d2:	2020      	movs	r0, #32
200007d4:	f7ff ff7c 	bl	200006d0 <graphic_ctrl_bit_set>
	delay_milli(100);
200007d8:	2064      	movs	r0, #100	; 0x64
200007da:	f7ff fe15 	bl	20000408 <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200007de:	2118      	movs	r1, #24
200007e0:	203e      	movs	r0, #62	; 0x3e
200007e2:	f7ff ff1d 	bl	20000620 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
200007e6:	2118      	movs	r1, #24
200007e8:	203f      	movs	r0, #63	; 0x3f
200007ea:	f7ff ff19 	bl	20000620 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200007ee:	2118      	movs	r1, #24
200007f0:	20c0      	movs	r0, #192	; 0xc0
200007f2:	f7ff ff15 	bl	20000620 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200007f6:	2118      	movs	r1, #24
200007f8:	2040      	movs	r0, #64	; 0x40
200007fa:	f7ff ff11 	bl	20000620 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200007fe:	2118      	movs	r1, #24
20000800:	20b8      	movs	r0, #184	; 0xb8
20000802:	f7ff ff0d 	bl	20000620 <graphic_write_command>
	select_controller(0);
20000806:	2000      	movs	r0, #0
20000808:	f7ff ffa8 	bl	2000075c <select_controller>
}
2000080c:	46c0      	nop			; (mov r8, r8)
2000080e:	46bd      	mov	sp, r7
20000810:	bd80      	pop	{r7, pc}

20000812 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000812:	b580      	push	{r7, lr}
20000814:	b082      	sub	sp, #8
20000816:	af00      	add	r7, sp, #0
	for(unsigned int page = 0; page < 8; page++)
20000818:	2300      	movs	r3, #0
2000081a:	607b      	str	r3, [r7, #4]
2000081c:	e01d      	b.n	2000085a <graphic_clear_screen+0x48>
	{
		graphic_write_command(LCD_SET_PAGE|page,B_CS1|B_CS2);
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	b2db      	uxtb	r3, r3
20000822:	2248      	movs	r2, #72	; 0x48
20000824:	4252      	negs	r2, r2
20000826:	4313      	orrs	r3, r2
20000828:	b2db      	uxtb	r3, r3
2000082a:	2118      	movs	r1, #24
2000082c:	0018      	movs	r0, r3
2000082e:	f7ff fef7 	bl	20000620 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD|0,B_CS1|B_CS2);
20000832:	2118      	movs	r1, #24
20000834:	2040      	movs	r0, #64	; 0x40
20000836:	f7ff fef3 	bl	20000620 <graphic_write_command>
		for(unsigned int add = 0; add<64;add++)
2000083a:	2300      	movs	r3, #0
2000083c:	603b      	str	r3, [r7, #0]
2000083e:	e006      	b.n	2000084e <graphic_clear_screen+0x3c>
		{
			graphic_write_data(0, B_CS1|B_CS2);
20000840:	2118      	movs	r1, #24
20000842:	2000      	movs	r0, #0
20000844:	f7ff ff0c 	bl	20000660 <graphic_write_data>
		for(unsigned int add = 0; add<64;add++)
20000848:	683b      	ldr	r3, [r7, #0]
2000084a:	3301      	adds	r3, #1
2000084c:	603b      	str	r3, [r7, #0]
2000084e:	683b      	ldr	r3, [r7, #0]
20000850:	2b3f      	cmp	r3, #63	; 0x3f
20000852:	d9f5      	bls.n	20000840 <graphic_clear_screen+0x2e>
	for(unsigned int page = 0; page < 8; page++)
20000854:	687b      	ldr	r3, [r7, #4]
20000856:	3301      	adds	r3, #1
20000858:	607b      	str	r3, [r7, #4]
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	2b07      	cmp	r3, #7
2000085e:	d9de      	bls.n	2000081e <graphic_clear_screen+0xc>
		}
	}
}
20000860:	46c0      	nop			; (mov r8, r8)
20000862:	46bd      	mov	sp, r7
20000864:	b002      	add	sp, #8
20000866:	bd80      	pop	{r7, pc}

20000868 <pixel>:

void pixel(int x, int y, int set)
{
20000868:	b5b0      	push	{r4, r5, r7, lr}
2000086a:	b088      	sub	sp, #32
2000086c:	af00      	add	r7, sp, #0
2000086e:	60f8      	str	r0, [r7, #12]
20000870:	60b9      	str	r1, [r7, #8]
20000872:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000874:	68fb      	ldr	r3, [r7, #12]
20000876:	2b00      	cmp	r3, #0
20000878:	dc00      	bgt.n	2000087c <pixel+0x14>
2000087a:	e0b6      	b.n	200009ea <pixel+0x182>
2000087c:	68bb      	ldr	r3, [r7, #8]
2000087e:	2b00      	cmp	r3, #0
20000880:	dc00      	bgt.n	20000884 <pixel+0x1c>
20000882:	e0b2      	b.n	200009ea <pixel+0x182>
20000884:	68fb      	ldr	r3, [r7, #12]
20000886:	2b80      	cmp	r3, #128	; 0x80
20000888:	dd00      	ble.n	2000088c <pixel+0x24>
2000088a:	e0ae      	b.n	200009ea <pixel+0x182>
2000088c:	68bb      	ldr	r3, [r7, #8]
2000088e:	2b40      	cmp	r3, #64	; 0x40
20000890:	dd00      	ble.n	20000894 <pixel+0x2c>
20000892:	e0aa      	b.n	200009ea <pixel+0x182>
	
	index = (y-1)/8;
20000894:	68bb      	ldr	r3, [r7, #8]
20000896:	3b01      	subs	r3, #1
20000898:	2b00      	cmp	r3, #0
2000089a:	da00      	bge.n	2000089e <pixel+0x36>
2000089c:	3307      	adds	r3, #7
2000089e:	10db      	asrs	r3, r3, #3
200008a0:	61bb      	str	r3, [r7, #24]
	
	switch((y-1)%8){
200008a2:	68bb      	ldr	r3, [r7, #8]
200008a4:	3b01      	subs	r3, #1
200008a6:	4a53      	ldr	r2, [pc, #332]	; (200009f4 <pixel+0x18c>)
200008a8:	4013      	ands	r3, r2
200008aa:	d504      	bpl.n	200008b6 <pixel+0x4e>
200008ac:	3b01      	subs	r3, #1
200008ae:	2208      	movs	r2, #8
200008b0:	4252      	negs	r2, r2
200008b2:	4313      	orrs	r3, r2
200008b4:	3301      	adds	r3, #1
200008b6:	2b07      	cmp	r3, #7
200008b8:	d82c      	bhi.n	20000914 <pixel+0xac>
200008ba:	009a      	lsls	r2, r3, #2
200008bc:	4b4e      	ldr	r3, [pc, #312]	; (200009f8 <pixel+0x190>)
200008be:	18d3      	adds	r3, r2, r3
200008c0:	681b      	ldr	r3, [r3, #0]
200008c2:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200008c4:	231f      	movs	r3, #31
200008c6:	18fb      	adds	r3, r7, r3
200008c8:	2201      	movs	r2, #1
200008ca:	701a      	strb	r2, [r3, #0]
200008cc:	e022      	b.n	20000914 <pixel+0xac>
		case 1: mask = 2; break;
200008ce:	231f      	movs	r3, #31
200008d0:	18fb      	adds	r3, r7, r3
200008d2:	2202      	movs	r2, #2
200008d4:	701a      	strb	r2, [r3, #0]
200008d6:	e01d      	b.n	20000914 <pixel+0xac>
		case 2: mask = 4; break;
200008d8:	231f      	movs	r3, #31
200008da:	18fb      	adds	r3, r7, r3
200008dc:	2204      	movs	r2, #4
200008de:	701a      	strb	r2, [r3, #0]
200008e0:	e018      	b.n	20000914 <pixel+0xac>
		case 3: mask = 8; break;
200008e2:	231f      	movs	r3, #31
200008e4:	18fb      	adds	r3, r7, r3
200008e6:	2208      	movs	r2, #8
200008e8:	701a      	strb	r2, [r3, #0]
200008ea:	e013      	b.n	20000914 <pixel+0xac>
		case 4: mask = 0x10; break;
200008ec:	231f      	movs	r3, #31
200008ee:	18fb      	adds	r3, r7, r3
200008f0:	2210      	movs	r2, #16
200008f2:	701a      	strb	r2, [r3, #0]
200008f4:	e00e      	b.n	20000914 <pixel+0xac>
		case 5: mask = 0x20; break;
200008f6:	231f      	movs	r3, #31
200008f8:	18fb      	adds	r3, r7, r3
200008fa:	2220      	movs	r2, #32
200008fc:	701a      	strb	r2, [r3, #0]
200008fe:	e009      	b.n	20000914 <pixel+0xac>
		case 6: mask = 0x40; break;
20000900:	231f      	movs	r3, #31
20000902:	18fb      	adds	r3, r7, r3
20000904:	2240      	movs	r2, #64	; 0x40
20000906:	701a      	strb	r2, [r3, #0]
20000908:	e004      	b.n	20000914 <pixel+0xac>
		case 7: mask = 0x80; break;
2000090a:	231f      	movs	r3, #31
2000090c:	18fb      	adds	r3, r7, r3
2000090e:	2280      	movs	r2, #128	; 0x80
20000910:	701a      	strb	r2, [r3, #0]
20000912:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0){
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	2b00      	cmp	r3, #0
20000918:	d105      	bne.n	20000926 <pixel+0xbe>
		mask = ~mask;
2000091a:	221f      	movs	r2, #31
2000091c:	18bb      	adds	r3, r7, r2
2000091e:	18ba      	adds	r2, r7, r2
20000920:	7812      	ldrb	r2, [r2, #0]
20000922:	43d2      	mvns	r2, r2
20000924:	701a      	strb	r2, [r3, #0]
	}
	if(x>64){
20000926:	68fb      	ldr	r3, [r7, #12]
20000928:	2b40      	cmp	r3, #64	; 0x40
2000092a:	dd07      	ble.n	2000093c <pixel+0xd4>
		controller = B_CS2;
2000092c:	231e      	movs	r3, #30
2000092e:	18fb      	adds	r3, r7, r3
20000930:	2210      	movs	r2, #16
20000932:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000934:	68fb      	ldr	r3, [r7, #12]
20000936:	3b41      	subs	r3, #65	; 0x41
20000938:	60fb      	str	r3, [r7, #12]
2000093a:	e006      	b.n	2000094a <pixel+0xe2>
	}else{
		controller = B_CS1;
2000093c:	231e      	movs	r3, #30
2000093e:	18fb      	adds	r3, r7, r3
20000940:	2208      	movs	r2, #8
20000942:	701a      	strb	r2, [r3, #0]
		x = x-1;
20000944:	68fb      	ldr	r3, [r7, #12]
20000946:	3b01      	subs	r3, #1
20000948:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD | x,controller);
2000094a:	68fb      	ldr	r3, [r7, #12]
2000094c:	b25b      	sxtb	r3, r3
2000094e:	2240      	movs	r2, #64	; 0x40
20000950:	4313      	orrs	r3, r2
20000952:	b25b      	sxtb	r3, r3
20000954:	b2da      	uxtb	r2, r3
20000956:	251e      	movs	r5, #30
20000958:	197b      	adds	r3, r7, r5
2000095a:	781b      	ldrb	r3, [r3, #0]
2000095c:	0019      	movs	r1, r3
2000095e:	0010      	movs	r0, r2
20000960:	f7ff fe5e 	bl	20000620 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE| index, controller);
20000964:	69bb      	ldr	r3, [r7, #24]
20000966:	b25b      	sxtb	r3, r3
20000968:	2248      	movs	r2, #72	; 0x48
2000096a:	4252      	negs	r2, r2
2000096c:	4313      	orrs	r3, r2
2000096e:	b25b      	sxtb	r3, r3
20000970:	b2da      	uxtb	r2, r3
20000972:	197b      	adds	r3, r7, r5
20000974:	781b      	ldrb	r3, [r3, #0]
20000976:	0019      	movs	r1, r3
20000978:	0010      	movs	r0, r2
2000097a:	f7ff fe51 	bl	20000620 <graphic_write_command>
	c = graphic_read_data(controller);
2000097e:	2317      	movs	r3, #23
20000980:	18fc      	adds	r4, r7, r3
20000982:	197b      	adds	r3, r7, r5
20000984:	781b      	ldrb	r3, [r3, #0]
20000986:	0018      	movs	r0, r3
20000988:	f7ff fe8d 	bl	200006a6 <graphic_read_data>
2000098c:	0003      	movs	r3, r0
2000098e:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD| x, controller);
20000990:	68fb      	ldr	r3, [r7, #12]
20000992:	b25b      	sxtb	r3, r3
20000994:	2240      	movs	r2, #64	; 0x40
20000996:	4313      	orrs	r3, r2
20000998:	b25b      	sxtb	r3, r3
2000099a:	b2da      	uxtb	r2, r3
2000099c:	197b      	adds	r3, r7, r5
2000099e:	781b      	ldrb	r3, [r3, #0]
200009a0:	0019      	movs	r1, r3
200009a2:	0010      	movs	r0, r2
200009a4:	f7ff fe3c 	bl	20000620 <graphic_write_command>
	
	if(set){
200009a8:	687b      	ldr	r3, [r7, #4]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d009      	beq.n	200009c2 <pixel+0x15a>
		mask = mask | c;
200009ae:	221f      	movs	r2, #31
200009b0:	18bb      	adds	r3, r7, r2
200009b2:	18b9      	adds	r1, r7, r2
200009b4:	2217      	movs	r2, #23
200009b6:	18ba      	adds	r2, r7, r2
200009b8:	7809      	ldrb	r1, [r1, #0]
200009ba:	7812      	ldrb	r2, [r2, #0]
200009bc:	430a      	orrs	r2, r1
200009be:	701a      	strb	r2, [r3, #0]
200009c0:	e008      	b.n	200009d4 <pixel+0x16c>
	}else{
		mask = mask & c;
200009c2:	221f      	movs	r2, #31
200009c4:	18bb      	adds	r3, r7, r2
200009c6:	18ba      	adds	r2, r7, r2
200009c8:	2117      	movs	r1, #23
200009ca:	1879      	adds	r1, r7, r1
200009cc:	7812      	ldrb	r2, [r2, #0]
200009ce:	7809      	ldrb	r1, [r1, #0]
200009d0:	400a      	ands	r2, r1
200009d2:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
200009d4:	231e      	movs	r3, #30
200009d6:	18fb      	adds	r3, r7, r3
200009d8:	781a      	ldrb	r2, [r3, #0]
200009da:	231f      	movs	r3, #31
200009dc:	18fb      	adds	r3, r7, r3
200009de:	781b      	ldrb	r3, [r3, #0]
200009e0:	0011      	movs	r1, r2
200009e2:	0018      	movs	r0, r3
200009e4:	f7ff fe3c 	bl	20000660 <graphic_write_data>
200009e8:	e000      	b.n	200009ec <pixel+0x184>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200009ea:	46c0      	nop			; (mov r8, r8)
}
200009ec:	46bd      	mov	sp, r7
200009ee:	b008      	add	sp, #32
200009f0:	bdb0      	pop	{r4, r5, r7, pc}
200009f2:	46c0      	nop			; (mov r8, r8)
200009f4:	80000007 	andhi	r0, r0, r7
200009f8:	20000e6c 	andcs	r0, r0, ip, ror #28

200009fc <draw_object>:

void draw_object(POBJECT obj)
{
200009fc:	b5b0      	push	{r4, r5, r7, lr}
200009fe:	b084      	sub	sp, #16
20000a00:	af00      	add	r7, sp, #0
20000a02:	6078      	str	r0, [r7, #4]
	uint8_t p;
	uint8_t n = obj->geo->numpoints;
20000a04:	687b      	ldr	r3, [r7, #4]
20000a06:	681b      	ldr	r3, [r3, #0]
20000a08:	681a      	ldr	r2, [r3, #0]
20000a0a:	230e      	movs	r3, #14
20000a0c:	18fb      	adds	r3, r7, r3
20000a0e:	701a      	strb	r2, [r3, #0]
	uint8_t x_coord;
	uint8_t y_coord;
	
	POINT s;
	for(p = 0; p<n; p++){
20000a10:	230f      	movs	r3, #15
20000a12:	18fb      	adds	r3, r7, r3
20000a14:	2200      	movs	r2, #0
20000a16:	701a      	strb	r2, [r3, #0]
20000a18:	e02d      	b.n	20000a76 <draw_object+0x7a>
		//s = obj -> geo -> px[p];
		x_coord  = obj->posx + obj->geo->px[p].x;
20000a1a:	687b      	ldr	r3, [r7, #4]
20000a1c:	68db      	ldr	r3, [r3, #12]
20000a1e:	b2d9      	uxtb	r1, r3
20000a20:	687b      	ldr	r3, [r7, #4]
20000a22:	681a      	ldr	r2, [r3, #0]
20000a24:	240f      	movs	r4, #15
20000a26:	193b      	adds	r3, r7, r4
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	3304      	adds	r3, #4
20000a2c:	005b      	lsls	r3, r3, #1
20000a2e:	18d3      	adds	r3, r2, r3
20000a30:	3304      	adds	r3, #4
20000a32:	781a      	ldrb	r2, [r3, #0]
20000a34:	200d      	movs	r0, #13
20000a36:	183b      	adds	r3, r7, r0
20000a38:	188a      	adds	r2, r1, r2
20000a3a:	701a      	strb	r2, [r3, #0]
		y_coord = obj->posy + obj->geo->px[p].y;
20000a3c:	687b      	ldr	r3, [r7, #4]
20000a3e:	691b      	ldr	r3, [r3, #16]
20000a40:	b2d9      	uxtb	r1, r3
20000a42:	687b      	ldr	r3, [r7, #4]
20000a44:	681a      	ldr	r2, [r3, #0]
20000a46:	193b      	adds	r3, r7, r4
20000a48:	781b      	ldrb	r3, [r3, #0]
20000a4a:	3304      	adds	r3, #4
20000a4c:	005b      	lsls	r3, r3, #1
20000a4e:	18d3      	adds	r3, r2, r3
20000a50:	3305      	adds	r3, #5
20000a52:	781a      	ldrb	r2, [r3, #0]
20000a54:	250c      	movs	r5, #12
20000a56:	197b      	adds	r3, r7, r5
20000a58:	188a      	adds	r2, r1, r2
20000a5a:	701a      	strb	r2, [r3, #0]
		//point = obj->geo->px;
		//pixel(s.x, s.y,1);
		pixel(x_coord,y_coord,1);
20000a5c:	183b      	adds	r3, r7, r0
20000a5e:	7818      	ldrb	r0, [r3, #0]
20000a60:	197b      	adds	r3, r7, r5
20000a62:	781b      	ldrb	r3, [r3, #0]
20000a64:	2201      	movs	r2, #1
20000a66:	0019      	movs	r1, r3
20000a68:	f7ff fefe 	bl	20000868 <pixel>
	for(p = 0; p<n; p++){
20000a6c:	193b      	adds	r3, r7, r4
20000a6e:	781a      	ldrb	r2, [r3, #0]
20000a70:	193b      	adds	r3, r7, r4
20000a72:	3201      	adds	r2, #1
20000a74:	701a      	strb	r2, [r3, #0]
20000a76:	230f      	movs	r3, #15
20000a78:	18fa      	adds	r2, r7, r3
20000a7a:	230e      	movs	r3, #14
20000a7c:	18fb      	adds	r3, r7, r3
20000a7e:	7812      	ldrb	r2, [r2, #0]
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	429a      	cmp	r2, r3
20000a84:	d3c9      	bcc.n	20000a1a <draw_object+0x1e>
	}
}
20000a86:	46c0      	nop			; (mov r8, r8)
20000a88:	46bd      	mov	sp, r7
20000a8a:	b004      	add	sp, #16
20000a8c:	bdb0      	pop	{r4, r5, r7, pc}

20000a8e <clear_object>:

void clear_object(POBJECT obj)
{
20000a8e:	b5b0      	push	{r4, r5, r7, lr}
20000a90:	b084      	sub	sp, #16
20000a92:	af00      	add	r7, sp, #0
20000a94:	6078      	str	r0, [r7, #4]
	uint8_t p;
	uint8_t n = obj->geo->numpoints;
20000a96:	687b      	ldr	r3, [r7, #4]
20000a98:	681b      	ldr	r3, [r3, #0]
20000a9a:	681a      	ldr	r2, [r3, #0]
20000a9c:	230e      	movs	r3, #14
20000a9e:	18fb      	adds	r3, r7, r3
20000aa0:	701a      	strb	r2, [r3, #0]
	uint8_t x_coord;
	uint8_t y_coord;
	for(p = 0; p<n; p++){
20000aa2:	230f      	movs	r3, #15
20000aa4:	18fb      	adds	r3, r7, r3
20000aa6:	2200      	movs	r2, #0
20000aa8:	701a      	strb	r2, [r3, #0]
20000aaa:	e02d      	b.n	20000b08 <clear_object+0x7a>
		x_coord  = obj->posx + obj->geo->px[p].x;
20000aac:	687b      	ldr	r3, [r7, #4]
20000aae:	68db      	ldr	r3, [r3, #12]
20000ab0:	b2d9      	uxtb	r1, r3
20000ab2:	687b      	ldr	r3, [r7, #4]
20000ab4:	681a      	ldr	r2, [r3, #0]
20000ab6:	240f      	movs	r4, #15
20000ab8:	193b      	adds	r3, r7, r4
20000aba:	781b      	ldrb	r3, [r3, #0]
20000abc:	3304      	adds	r3, #4
20000abe:	005b      	lsls	r3, r3, #1
20000ac0:	18d3      	adds	r3, r2, r3
20000ac2:	3304      	adds	r3, #4
20000ac4:	781a      	ldrb	r2, [r3, #0]
20000ac6:	200d      	movs	r0, #13
20000ac8:	183b      	adds	r3, r7, r0
20000aca:	188a      	adds	r2, r1, r2
20000acc:	701a      	strb	r2, [r3, #0]
		y_coord = obj->posy + obj->geo->px[p].y;
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	691b      	ldr	r3, [r3, #16]
20000ad2:	b2d9      	uxtb	r1, r3
20000ad4:	687b      	ldr	r3, [r7, #4]
20000ad6:	681a      	ldr	r2, [r3, #0]
20000ad8:	193b      	adds	r3, r7, r4
20000ada:	781b      	ldrb	r3, [r3, #0]
20000adc:	3304      	adds	r3, #4
20000ade:	005b      	lsls	r3, r3, #1
20000ae0:	18d3      	adds	r3, r2, r3
20000ae2:	3305      	adds	r3, #5
20000ae4:	781a      	ldrb	r2, [r3, #0]
20000ae6:	250c      	movs	r5, #12
20000ae8:	197b      	adds	r3, r7, r5
20000aea:	188a      	adds	r2, r1, r2
20000aec:	701a      	strb	r2, [r3, #0]
		pixel(x_coord,y_coord,0);
20000aee:	183b      	adds	r3, r7, r0
20000af0:	7818      	ldrb	r0, [r3, #0]
20000af2:	197b      	adds	r3, r7, r5
20000af4:	781b      	ldrb	r3, [r3, #0]
20000af6:	2200      	movs	r2, #0
20000af8:	0019      	movs	r1, r3
20000afa:	f7ff feb5 	bl	20000868 <pixel>
	for(p = 0; p<n; p++){
20000afe:	193b      	adds	r3, r7, r4
20000b00:	781a      	ldrb	r2, [r3, #0]
20000b02:	193b      	adds	r3, r7, r4
20000b04:	3201      	adds	r2, #1
20000b06:	701a      	strb	r2, [r3, #0]
20000b08:	230f      	movs	r3, #15
20000b0a:	18fa      	adds	r2, r7, r3
20000b0c:	230e      	movs	r3, #14
20000b0e:	18fb      	adds	r3, r7, r3
20000b10:	7812      	ldrb	r2, [r2, #0]
20000b12:	781b      	ldrb	r3, [r3, #0]
20000b14:	429a      	cmp	r2, r3
20000b16:	d3c9      	bcc.n	20000aac <clear_object+0x1e>
	}
20000b18:	46c0      	nop			; (mov r8, r8)
20000b1a:	46bd      	mov	sp, r7
20000b1c:	b004      	add	sp, #16
20000b1e:	bdb0      	pop	{r4, r5, r7, pc}

20000b20 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
20000b20:	b580      	push	{r7, lr}
20000b22:	b084      	sub	sp, #16
20000b24:	af00      	add	r7, sp, #0
20000b26:	60f8      	str	r0, [r7, #12]
20000b28:	60b9      	str	r1, [r7, #8]
20000b2a:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000b2c:	68fb      	ldr	r3, [r7, #12]
20000b2e:	68ba      	ldr	r2, [r7, #8]
20000b30:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000b32:	68fb      	ldr	r3, [r7, #12]
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	609a      	str	r2, [r3, #8]
	
	}else{
		
	}
	 */
}
20000b38:	46c0      	nop			; (mov r8, r8)
20000b3a:	46bd      	mov	sp, r7
20000b3c:	b004      	add	sp, #16
20000b3e:	bd80      	pop	{r7, pc}

20000b40 <move_object>:

void move_object(POBJECT o){
20000b40:	b580      	push	{r7, lr}
20000b42:	b082      	sub	sp, #8
20000b44:	af00      	add	r7, sp, #0
20000b46:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000b48:	687b      	ldr	r3, [r7, #4]
20000b4a:	0018      	movs	r0, r3
20000b4c:	f7ff ff9f 	bl	20000a8e <clear_object>
	o->posx += o->dirx;
20000b50:	687b      	ldr	r3, [r7, #4]
20000b52:	68da      	ldr	r2, [r3, #12]
20000b54:	687b      	ldr	r3, [r7, #4]
20000b56:	685b      	ldr	r3, [r3, #4]
20000b58:	18d2      	adds	r2, r2, r3
20000b5a:	687b      	ldr	r3, [r7, #4]
20000b5c:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
20000b5e:	687b      	ldr	r3, [r7, #4]
20000b60:	691a      	ldr	r2, [r3, #16]
20000b62:	687b      	ldr	r3, [r7, #4]
20000b64:	689b      	ldr	r3, [r3, #8]
20000b66:	18d2      	adds	r2, r2, r3
20000b68:	687b      	ldr	r3, [r7, #4]
20000b6a:	611a      	str	r2, [r3, #16]
	
	if(o->posx <= 1){
20000b6c:	687b      	ldr	r3, [r7, #4]
20000b6e:	68db      	ldr	r3, [r3, #12]
20000b70:	2b01      	cmp	r3, #1
20000b72:	dc06      	bgt.n	20000b82 <move_object+0x42>
		o->posx = 128 - o->geo->sizex;
20000b74:	687b      	ldr	r3, [r7, #4]
20000b76:	681b      	ldr	r3, [r3, #0]
20000b78:	685b      	ldr	r3, [r3, #4]
20000b7a:	2280      	movs	r2, #128	; 0x80
20000b7c:	1ad2      	subs	r2, r2, r3
20000b7e:	687b      	ldr	r3, [r7, #4]
20000b80:	60da      	str	r2, [r3, #12]
	}
	if(o->posx > 128 - o->geo->sizex){
20000b82:	687b      	ldr	r3, [r7, #4]
20000b84:	68da      	ldr	r2, [r3, #12]
20000b86:	687b      	ldr	r3, [r7, #4]
20000b88:	681b      	ldr	r3, [r3, #0]
20000b8a:	685b      	ldr	r3, [r3, #4]
20000b8c:	2180      	movs	r1, #128	; 0x80
20000b8e:	1acb      	subs	r3, r1, r3
20000b90:	429a      	cmp	r2, r3
20000b92:	dd02      	ble.n	20000b9a <move_object+0x5a>
		o->posx = 1;
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	2201      	movs	r2, #1
20000b98:	60da      	str	r2, [r3, #12]
	}
	if(o->posy <= 1){
20000b9a:	687b      	ldr	r3, [r7, #4]
20000b9c:	691b      	ldr	r3, [r3, #16]
20000b9e:	2b01      	cmp	r3, #1
20000ba0:	dc06      	bgt.n	20000bb0 <move_object+0x70>
		o->posy = 64 - o->geo->sizey;
20000ba2:	687b      	ldr	r3, [r7, #4]
20000ba4:	681b      	ldr	r3, [r3, #0]
20000ba6:	689b      	ldr	r3, [r3, #8]
20000ba8:	2240      	movs	r2, #64	; 0x40
20000baa:	1ad2      	subs	r2, r2, r3
20000bac:	687b      	ldr	r3, [r7, #4]
20000bae:	611a      	str	r2, [r3, #16]
	}
	if(o->posy > 64 - o->geo->sizey){
20000bb0:	687b      	ldr	r3, [r7, #4]
20000bb2:	691a      	ldr	r2, [r3, #16]
20000bb4:	687b      	ldr	r3, [r7, #4]
20000bb6:	681b      	ldr	r3, [r3, #0]
20000bb8:	689b      	ldr	r3, [r3, #8]
20000bba:	2140      	movs	r1, #64	; 0x40
20000bbc:	1acb      	subs	r3, r1, r3
20000bbe:	429a      	cmp	r2, r3
20000bc0:	dd02      	ble.n	20000bc8 <move_object+0x88>
		o->posy = 1 ;
20000bc2:	687b      	ldr	r3, [r7, #4]
20000bc4:	2201      	movs	r2, #1
20000bc6:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000bc8:	687b      	ldr	r3, [r7, #4]
20000bca:	0018      	movs	r0, r3
20000bcc:	f7ff ff16 	bl	200009fc <draw_object>
}
20000bd0:	46c0      	nop			; (mov r8, r8)
20000bd2:	46bd      	mov	sp, r7
20000bd4:	b002      	add	sp, #8
20000bd6:	bd80      	pop	{r7, pc}

20000bd8 <init_app>:
move_object,
set_object_speed};


void init_app(void)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	af00      	add	r7, sp, #0
	#ifdef USBDM
	*((unsigned long*) 0x40023830) = 0x18;
	__asm volatile("LDR R0,=0x08000209\n BLX R0\n");
	#endif
	
	GPIO_D.moder= 0x55005555;
20000bdc:	4b08      	ldr	r3, [pc, #32]	; (20000c00 <init_app+0x28>)
20000bde:	4a09      	ldr	r2, [pc, #36]	; (20000c04 <init_app+0x2c>)
20000be0:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper = 0x0100;
20000be2:	4b07      	ldr	r3, [pc, #28]	; (20000c00 <init_app+0x28>)
20000be4:	2280      	movs	r2, #128	; 0x80
20000be6:	0052      	lsls	r2, r2, #1
20000be8:	809a      	strh	r2, [r3, #4]
	GPIO_D.pupdr = 0x00AA0000;
20000bea:	4b05      	ldr	r3, [pc, #20]	; (20000c00 <init_app+0x28>)
20000bec:	22aa      	movs	r2, #170	; 0xaa
20000bee:	0412      	lsls	r2, r2, #16
20000bf0:	60da      	str	r2, [r3, #12]
 
	GPIO_E.moder = 0x55555555;
20000bf2:	4b05      	ldr	r3, [pc, #20]	; (20000c08 <init_app+0x30>)
20000bf4:	4a05      	ldr	r2, [pc, #20]	; (20000c0c <init_app+0x34>)
20000bf6:	601a      	str	r2, [r3, #0]
	
}
20000bf8:	46c0      	nop			; (mov r8, r8)
20000bfa:	46bd      	mov	sp, r7
20000bfc:	bd80      	pop	{r7, pc}
20000bfe:	46c0      	nop			; (mov r8, r8)
20000c00:	40020c00 	andmi	r0, r2, r0, lsl #24
20000c04:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000c08:	40021000 	andmi	r1, r2, r0
20000c0c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c10 <collision>:
int points =0;
char *s;
char string[] = "Points";

void collision(POBJECT p, POBJECT a)
{
20000c10:	b590      	push	{r4, r7, lr}
20000c12:	b087      	sub	sp, #28
20000c14:	af00      	add	r7, sp, #0
20000c16:	6078      	str	r0, [r7, #4]
20000c18:	6039      	str	r1, [r7, #0]
	if(p->posx +4 >= a->posx & p->posx <= a->posx + 4)
20000c1a:	687b      	ldr	r3, [r7, #4]
20000c1c:	68db      	ldr	r3, [r3, #12]
20000c1e:	1d1a      	adds	r2, r3, #4
20000c20:	683b      	ldr	r3, [r7, #0]
20000c22:	68db      	ldr	r3, [r3, #12]
20000c24:	17d0      	asrs	r0, r2, #31
20000c26:	0fd9      	lsrs	r1, r3, #31
20000c28:	429a      	cmp	r2, r3
20000c2a:	4148      	adcs	r0, r1
20000c2c:	0003      	movs	r3, r0
20000c2e:	b2d9      	uxtb	r1, r3
20000c30:	687b      	ldr	r3, [r7, #4]
20000c32:	68db      	ldr	r3, [r3, #12]
20000c34:	683a      	ldr	r2, [r7, #0]
20000c36:	68d2      	ldr	r2, [r2, #12]
20000c38:	3204      	adds	r2, #4
20000c3a:	0fdc      	lsrs	r4, r3, #31
20000c3c:	17d0      	asrs	r0, r2, #31
20000c3e:	429a      	cmp	r2, r3
20000c40:	4144      	adcs	r4, r0
20000c42:	0023      	movs	r3, r4
20000c44:	b2db      	uxtb	r3, r3
20000c46:	400b      	ands	r3, r1
20000c48:	b2db      	uxtb	r3, r3
20000c4a:	2b00      	cmp	r3, #0
20000c4c:	d053      	beq.n	20000cf6 <collision+0xe6>
	{
		if(p->posy +4 >= a->posy & p->posy <= a->posy + 4)
20000c4e:	687b      	ldr	r3, [r7, #4]
20000c50:	691b      	ldr	r3, [r3, #16]
20000c52:	1d1a      	adds	r2, r3, #4
20000c54:	683b      	ldr	r3, [r7, #0]
20000c56:	691b      	ldr	r3, [r3, #16]
20000c58:	17d0      	asrs	r0, r2, #31
20000c5a:	0fd9      	lsrs	r1, r3, #31
20000c5c:	429a      	cmp	r2, r3
20000c5e:	4148      	adcs	r0, r1
20000c60:	0003      	movs	r3, r0
20000c62:	b2d9      	uxtb	r1, r3
20000c64:	687b      	ldr	r3, [r7, #4]
20000c66:	691b      	ldr	r3, [r3, #16]
20000c68:	683a      	ldr	r2, [r7, #0]
20000c6a:	6912      	ldr	r2, [r2, #16]
20000c6c:	3204      	adds	r2, #4
20000c6e:	0fdc      	lsrs	r4, r3, #31
20000c70:	17d0      	asrs	r0, r2, #31
20000c72:	429a      	cmp	r2, r3
20000c74:	4144      	adcs	r4, r0
20000c76:	0023      	movs	r3, r4
20000c78:	b2db      	uxtb	r3, r3
20000c7a:	400b      	ands	r3, r1
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	2b00      	cmp	r3, #0
20000c80:	d039      	beq.n	20000cf6 <collision+0xe6>
		{
			clear_object(a);
20000c82:	683b      	ldr	r3, [r7, #0]
20000c84:	0018      	movs	r0, r3
20000c86:	f7ff ff02 	bl	20000a8e <clear_object>
			points++;
20000c8a:	4b1d      	ldr	r3, [pc, #116]	; (20000d00 <collision+0xf0>)
20000c8c:	681b      	ldr	r3, [r3, #0]
20000c8e:	1c5a      	adds	r2, r3, #1
20000c90:	4b1b      	ldr	r3, [pc, #108]	; (20000d00 <collision+0xf0>)
20000c92:	601a      	str	r2, [r3, #0]
			
			char string[] = "Points:";
20000c94:	210c      	movs	r1, #12
20000c96:	187b      	adds	r3, r7, r1
20000c98:	4a1a      	ldr	r2, [pc, #104]	; (20000d04 <collision+0xf4>)
20000c9a:	ca11      	ldmia	r2!, {r0, r4}
20000c9c:	c311      	stmia	r3!, {r0, r4}
			s = string;
20000c9e:	4b1a      	ldr	r3, [pc, #104]	; (20000d08 <collision+0xf8>)
20000ca0:	187a      	adds	r2, r7, r1
20000ca2:	601a      	str	r2, [r3, #0]
			ascii_gotoxy(1,1);
20000ca4:	2101      	movs	r1, #1
20000ca6:	2001      	movs	r0, #1
20000ca8:	f7ff fabe 	bl	20000228 <ascii_gotoxy>
			while(*s)
20000cac:	e008      	b.n	20000cc0 <collision+0xb0>
			{
			ascii_write_char(*s++);
20000cae:	4b16      	ldr	r3, [pc, #88]	; (20000d08 <collision+0xf8>)
20000cb0:	681b      	ldr	r3, [r3, #0]
20000cb2:	1c59      	adds	r1, r3, #1
20000cb4:	4a14      	ldr	r2, [pc, #80]	; (20000d08 <collision+0xf8>)
20000cb6:	6011      	str	r1, [r2, #0]
20000cb8:	781b      	ldrb	r3, [r3, #0]
20000cba:	0018      	movs	r0, r3
20000cbc:	f7ff fa96 	bl	200001ec <ascii_write_char>
			while(*s)
20000cc0:	4b11      	ldr	r3, [pc, #68]	; (20000d08 <collision+0xf8>)
20000cc2:	681b      	ldr	r3, [r3, #0]
20000cc4:	781b      	ldrb	r3, [r3, #0]
20000cc6:	2b00      	cmp	r3, #0
20000cc8:	d1f1      	bne.n	20000cae <collision+0x9e>
			}
			char pts = points + '0';
20000cca:	4b0d      	ldr	r3, [pc, #52]	; (20000d00 <collision+0xf0>)
20000ccc:	681b      	ldr	r3, [r3, #0]
20000cce:	b2da      	uxtb	r2, r3
20000cd0:	2117      	movs	r1, #23
20000cd2:	187b      	adds	r3, r7, r1
20000cd4:	3230      	adds	r2, #48	; 0x30
20000cd6:	701a      	strb	r2, [r3, #0]
			ascii_write_char(pts);
20000cd8:	187b      	adds	r3, r7, r1
20000cda:	781b      	ldrb	r3, [r3, #0]
20000cdc:	0018      	movs	r0, r3
20000cde:	f7ff fa85 	bl	200001ec <ascii_write_char>
			
			a->posx = a->posx + 5;
20000ce2:	683b      	ldr	r3, [r7, #0]
20000ce4:	68db      	ldr	r3, [r3, #12]
20000ce6:	1d5a      	adds	r2, r3, #5
20000ce8:	683b      	ldr	r3, [r7, #0]
20000cea:	60da      	str	r2, [r3, #12]
			a->posy = a->posy + 5;
20000cec:	683b      	ldr	r3, [r7, #0]
20000cee:	691b      	ldr	r3, [r3, #16]
20000cf0:	1d5a      	adds	r2, r3, #5
20000cf2:	683b      	ldr	r3, [r7, #0]
20000cf4:	611a      	str	r2, [r3, #16]
		}
	}
}
20000cf6:	46c0      	nop			; (mov r8, r8)
20000cf8:	46bd      	mov	sp, r7
20000cfa:	b007      	add	sp, #28
20000cfc:	bd90      	pop	{r4, r7, pc}
20000cfe:	46c0      	nop			; (mov r8, r8)
20000d00:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
20000d04:	20000e8c 	andcs	r0, r0, ip, lsl #29
20000d08:	20000dc0 	andcs	r0, r0, r0, asr #27

20000d0c <main>:

void main(void)
{
20000d0c:	b580      	push	{r7, lr}
20000d0e:	b084      	sub	sp, #16
20000d10:	af00      	add	r7, sp, #0
	char c;
	
	POBJECT p = &ball;
20000d12:	4b28      	ldr	r3, [pc, #160]	; (20000db4 <main+0xa8>)
20000d14:	60fb      	str	r3, [r7, #12]
	POBJECT a = &apple;
20000d16:	4b28      	ldr	r3, [pc, #160]	; (20000db8 <main+0xac>)
20000d18:	60bb      	str	r3, [r7, #8]
	init_app();
20000d1a:	f7ff ff5d 	bl	20000bd8 <init_app>
	graphic_initialize();
20000d1e:	f7ff fd4a 	bl	200007b6 <graphic_initialize>
	ascii_init();
20000d22:	f7ff fa9c 	bl	2000025e <ascii_init>
	ascii_gotoxy(1,1);
20000d26:	2101      	movs	r1, #1
20000d28:	2001      	movs	r0, #1
20000d2a:	f7ff fa7d 	bl	20000228 <ascii_gotoxy>
		graphic_clear_screen();
	#endif
	
	while(1)
	{
		p->move(p);
20000d2e:	68fb      	ldr	r3, [r7, #12]
20000d30:	69db      	ldr	r3, [r3, #28]
20000d32:	68fa      	ldr	r2, [r7, #12]
20000d34:	0010      	movs	r0, r2
20000d36:	4798      	blx	r3
		draw_object(a);
20000d38:	68bb      	ldr	r3, [r7, #8]
20000d3a:	0018      	movs	r0, r3
20000d3c:	f7ff fe5e 	bl	200009fc <draw_object>
		
		collision(p,a);
20000d40:	68ba      	ldr	r2, [r7, #8]
20000d42:	68fb      	ldr	r3, [r7, #12]
20000d44:	0011      	movs	r1, r2
20000d46:	0018      	movs	r0, r3
20000d48:	f7ff ff62 	bl	20000c10 <collision>
		
		delay_milli(40);
20000d4c:	2028      	movs	r0, #40	; 0x28
20000d4e:	f7ff fb5b 	bl	20000408 <delay_milli>
		c = keyb();
20000d52:	f7ff fad1 	bl	200002f8 <keyb>
20000d56:	0002      	movs	r2, r0
20000d58:	1dfb      	adds	r3, r7, #7
20000d5a:	701a      	strb	r2, [r3, #0]
		switch(c)
20000d5c:	1dfb      	adds	r3, r7, #7
20000d5e:	781b      	ldrb	r3, [r3, #0]
20000d60:	2b04      	cmp	r3, #4
20000d62:	d00f      	beq.n	20000d84 <main+0x78>
20000d64:	dc02      	bgt.n	20000d6c <main+0x60>
20000d66:	2b02      	cmp	r3, #2
20000d68:	d014      	beq.n	20000d94 <main+0x88>
20000d6a:	e022      	b.n	20000db2 <main+0xa6>
20000d6c:	2b06      	cmp	r3, #6
20000d6e:	d002      	beq.n	20000d76 <main+0x6a>
20000d70:	2b08      	cmp	r3, #8
20000d72:	d017      	beq.n	20000da4 <main+0x98>
20000d74:	e01d      	b.n	20000db2 <main+0xa6>
		{
			case 6: p->set_speed(p,2,0); break;
20000d76:	68fb      	ldr	r3, [r7, #12]
20000d78:	6a1b      	ldr	r3, [r3, #32]
20000d7a:	68f8      	ldr	r0, [r7, #12]
20000d7c:	2200      	movs	r2, #0
20000d7e:	2102      	movs	r1, #2
20000d80:	4798      	blx	r3
20000d82:	e016      	b.n	20000db2 <main+0xa6>
			case 4: p->set_speed(p,-2,0); break;
20000d84:	68fb      	ldr	r3, [r7, #12]
20000d86:	6a1b      	ldr	r3, [r3, #32]
20000d88:	2202      	movs	r2, #2
20000d8a:	4251      	negs	r1, r2
20000d8c:	68f8      	ldr	r0, [r7, #12]
20000d8e:	2200      	movs	r2, #0
20000d90:	4798      	blx	r3
20000d92:	e00e      	b.n	20000db2 <main+0xa6>
			case 2: p->set_speed(p,0,-2); break;
20000d94:	68fb      	ldr	r3, [r7, #12]
20000d96:	6a1b      	ldr	r3, [r3, #32]
20000d98:	2202      	movs	r2, #2
20000d9a:	4252      	negs	r2, r2
20000d9c:	68f8      	ldr	r0, [r7, #12]
20000d9e:	2100      	movs	r1, #0
20000da0:	4798      	blx	r3
20000da2:	e006      	b.n	20000db2 <main+0xa6>
			case 8: p->set_speed(p,0,2); break;
20000da4:	68fb      	ldr	r3, [r7, #12]
20000da6:	6a1b      	ldr	r3, [r3, #32]
20000da8:	68f8      	ldr	r0, [r7, #12]
20000daa:	2202      	movs	r2, #2
20000dac:	2100      	movs	r1, #0
20000dae:	4798      	blx	r3
20000db0:	46c0      	nop			; (mov r8, r8)
	{
20000db2:	e7bc      	b.n	20000d2e <main+0x22>
20000db4:	20000df8 	strdcs	r0, [r0], -r8
20000db8:	20000e1c 	andcs	r0, r0, ip, lsl lr

20000dbc <points>:
20000dbc:	00000000 	andeq	r0, r0, r0

20000dc0 <s>:
20000dc0:	00000000 	andeq	r0, r0, r0

20000dc4 <ball_geometry>:
20000dc4:	0000000c 	andeq	r0, r0, ip
20000dc8:	00000004 	andeq	r0, r0, r4
20000dcc:	00000004 	andeq	r0, r0, r4
20000dd0:	02000100 	andeq	r0, r0, #0, 2
20000dd4:	01010001 	tsteq	r1, r1
20000dd8:	03010201 	movweq	r0, #4609	; 0x1201
20000ddc:	01020002 	tsteq	r2, r2
20000de0:	03020202 	movweq	r0, #8706	; 0x2202
20000de4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000df8 <ball>:
20000df8:	20000dc4 	andcs	r0, r0, r4, asr #27
	...
20000e04:	00000002 	andeq	r0, r0, r2
20000e08:	00000002 	andeq	r0, r0, r2
20000e0c:	200009fd 	strdcs	r0, [r0], -sp
20000e10:	20000a8f 	andcs	r0, r0, pc, lsl #21
20000e14:	20000b41 	andcs	r0, r0, r1, asr #22
20000e18:	20000b21 	andcs	r0, r0, r1, lsr #22

20000e1c <apple>:
20000e1c:	20000dc4 	andcs	r0, r0, r4, asr #27
	...
20000e28:	00000007 	andeq	r0, r0, r7
20000e2c:	00000007 	andeq	r0, r0, r7
20000e30:	200009fd 	strdcs	r0, [r0], -sp
20000e34:	20000a8f 	andcs	r0, r0, pc, lsl #21
20000e38:	20000b41 	andcs	r0, r0, r1, asr #22
20000e3c:	20000b21 	andcs	r0, r0, r1, lsr #22

20000e40 <string>:
20000e40:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
20000e44:	00007374 	andeq	r7, r0, r4, ror r3
20000e48:	0a030201 	beq	200c1654 <string+0xc0814>
20000e4c:	0b060504 	bleq	20182264 <string+0x181424>
20000e50:	0c090807 	stceq	8, cr0, [r9], {7}
20000e54:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000e24 <apple+0x8>
20000e58:	2000039a 	mulcs	r0, sl, r3
20000e5c:	2000037a 	andcs	r0, r0, sl, ror r3
20000e60:	20000382 	andcs	r0, r0, r2, lsl #7
20000e64:	2000038a 	andcs	r0, r0, sl, lsl #7
20000e68:	20000392 	mulcs	r0, r2, r3
20000e6c:	200008c4 	andcs	r0, r0, r4, asr #17
20000e70:	200008ce 	andcs	r0, r0, lr, asr #17
20000e74:	200008d8 	ldrdcs	r0, [r0], -r8
20000e78:	200008e2 	andcs	r0, r0, r2, ror #17
20000e7c:	200008ec 	andcs	r0, r0, ip, ror #17
20000e80:	200008f6 	strdcs	r0, [r0], -r6
20000e84:	20000900 	andcs	r0, r0, r0, lsl #18
20000e88:	2000090a 	andcs	r0, r0, sl, lsl #18
20000e8c:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
20000e90:	003a7374 	eorseq	r7, sl, r4, ror r3

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002a3 	andeq	r0, r0, r3, lsr #5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000006 	andeq	r0, r0, r6
  10:	0002200c 	andeq	r2, r2, ip
  14:	0000e000 	andeq	lr, r0, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	0002e820 	andeq	lr, r2, r0, lsr #16
  20:	00000000 	andeq	r0, r0, r0
  24:	01800200 	orreq	r0, r0, r0, lsl #4
  28:	07020000 	streq	r0, [r2, -r0]
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	d2070403 	andle	r0, r7, #50331648	; 0x3000000
  34:	02000001 	andeq	r0, r0, #1
  38:	00000203 	andeq	r0, r0, r3, lsl #4
  3c:	00420802 	subeq	r0, r2, r2, lsl #16
  40:	02030000 	andeq	r0, r3, #0
  44:	0001cc07 	andeq	ip, r1, r7, lsl #24
  48:	01620200 	cmneq	r2, r0, lsl #4
  4c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
  50:	00000054 	andeq	r0, r0, r4, asr r0
  54:	6a080103 	bvs	200468 <startup-0x1fdffb98>
  58:	04000001 	streq	r0, [r0], #-1
  5c:	e80b0218 	stmda	fp, {r3, r4, r9}
  60:	05000000 	streq	r0, [r0, #-0]
  64:	0000009e 	muleq	r0, lr, r0
  68:	00250c02 	eoreq	r0, r5, r2, lsl #24
  6c:	05000000 	streq	r0, [r0, #-0]
  70:	0000011d 	andeq	r0, r0, sp, lsl r1
  74:	00370d02 	eorseq	r0, r7, r2, lsl #26
  78:	05040000 	streq	r0, [r4, #-0]
  7c:	000000b9 	strheq	r0, [r0], -r9
  80:	00370e02 	eorseq	r0, r7, r2, lsl #28
  84:	05060000 	streq	r0, [r6, #-0]
  88:	0000015a 	andeq	r0, r0, sl, asr r1
  8c:	00250f02 	eoreq	r0, r5, r2, lsl #30
  90:	05080000 	streq	r0, [r8, #-0]
  94:	00000000 	andeq	r0, r0, r0
  98:	00251002 	eoreq	r1, r5, r2
  9c:	050c0000 	streq	r0, [ip, #-0]
  a0:	000001ef 	andeq	r0, r0, pc, ror #3
  a4:	00491102 	subeq	r1, r9, r2, lsl #2
  a8:	05100000 	ldreq	r0, [r0, #-0]
  ac:	00000211 	andeq	r0, r0, r1, lsl r2
  b0:	00491202 	subeq	r1, r9, r2, lsl #4
  b4:	05110000 	ldreq	r0, [r1, #-0]
  b8:	000001aa 	andeq	r0, r0, sl, lsr #3
  bc:	00371302 	eorseq	r1, r7, r2, lsl #6
  c0:	05120000 	ldreq	r0, [r2, #-0]
  c4:	00000153 	andeq	r0, r0, r3, asr r1
  c8:	00491402 	subeq	r1, r9, r2, lsl #8
  cc:	05140000 	ldreq	r0, [r4, #-0]
  d0:	00000178 	andeq	r0, r0, r8, ror r1
  d4:	00491502 	subeq	r1, r9, r2, lsl #10
  d8:	05150000 	ldreq	r0, [r5, #-0]
  dc:	00000124 	andeq	r0, r0, r4, lsr #2
  e0:	00371602 	eorseq	r1, r7, r2, lsl #12
  e4:	00160000 	andseq	r0, r6, r0
  e8:	00020c02 	andeq	r0, r2, r2, lsl #24
  ec:	5b170200 	blpl	5c08f4 <startup-0x1fa3f70c>
  f0:	06000000 	streq	r0, [r0], -r0
  f4:	00000252 	andeq	r0, r0, r2, asr r2
  f8:	025e6201 	subseq	r6, lr, #268435456	; 0x10000000
  fc:	009a2000 	addseq	r2, sl, r0
 100:	9c010000 	stcls	0, cr0, [r1], {-0}
 104:	0001f607 	andeq	pc, r1, r7, lsl #12
 108:	28570100 	ldmdacs	r7, {r8}^
 10c:	36200002 	strtcc	r0, [r0], -r2
 110:	01000000 	mrseq	r0, (UNDEF: 0)
 114:	0001449c 	muleq	r1, ip, r4
 118:	6f720800 	svcvs	0x00720800
 11c:	57010077 	smlsdxpl	r1, r7, r0, r0
 120:	00000144 	andeq	r0, r0, r4, asr #2
 124:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
 128:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 12c:	01445701 	cmpeq	r4, r1, lsl #14
 130:	91020000 	mrsls	r0, (UNDEF: 2)
 134:	02190968 	andseq	r0, r9, #104, 18	; 0x1a0000
 138:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
 13c:	00000030 	andeq	r0, r0, r0, lsr r0
 140:	00749102 	rsbseq	r9, r4, r2, lsl #2
 144:	6905040a 	stmdbvs	r5, {r1, r3, sl}
 148:	0700746e 	streq	r7, [r0, -lr, ror #8]
 14c:	00000189 	andeq	r0, r0, r9, lsl #3
 150:	01ec4f01 	mvneq	r4, r1, lsl #30
 154:	003c2000 	eorseq	r2, ip, r0
 158:	9c010000 	stcls	0, cr0, [r1], {-0}
 15c:	0000016d 	andeq	r0, r0, sp, ror #2
 160:	01006308 	tsteq	r0, r8, lsl #6
 164:	0000544f 	andeq	r5, r0, pc, asr #8
 168:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 16c:	019a0b00 	orrseq	r0, sl, r0, lsl #22
 170:	44010000 	strmi	r0, [r1], #-0
 174:	00000054 	andeq	r0, r0, r4, asr r0
 178:	200001a0 	andcs	r0, r0, r0, lsr #3
 17c:	0000004c 	andeq	r0, r0, ip, asr #32
 180:	01949c01 	orrseq	r9, r4, r1, lsl #24
 184:	720c0000 	andvc	r0, ip, #0
 188:	46010076 			; <UNDEFINED> instruction: 0x46010076
 18c:	00000054 	andeq	r0, r0, r4, asr r0
 190:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 194:	0001410b 	andeq	r4, r1, fp, lsl #2
 198:	54390100 	ldrtpl	r0, [r9], #-256	; 0xffffff00
 19c:	54000000 	strpl	r0, [r0], #-0
 1a0:	4c200001 	stcmi	0, cr0, [r0], #-4
 1a4:	01000000 	mrseq	r0, (UNDEF: 0)
 1a8:	0001bb9c 	muleq	r1, ip, fp
 1ac:	76720c00 	ldrbtvc	r0, [r2], -r0, lsl #24
 1b0:	543b0100 	ldrtpl	r0, [fp], #-256	; 0xffffff00
 1b4:	02000000 	andeq	r0, r0, #0
 1b8:	07006f91 			; <UNDEFINED> instruction: 0x07006f91
 1bc:	00000130 	andeq	r0, r0, r0, lsr r1
 1c0:	012a3001 			; <UNDEFINED> instruction: 0x012a3001
 1c4:	002a2000 	eoreq	r2, sl, r0
 1c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1cc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 1d0:	0003bc0d 	andeq	fp, r3, sp, lsl #24
 1d4:	54300100 	ldrtpl	r0, [r0], #-256	; 0xffffff00
 1d8:	02000000 	andeq	r0, r0, #0
 1dc:	07007791 			; <UNDEFINED> instruction: 0x07007791
 1e0:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 1e4:	01002801 	tsteq	r0, r1, lsl #16
 1e8:	002a2000 	eoreq	r2, sl, r0
 1ec:	9c010000 	stcls	0, cr0, [r1], {-0}
 1f0:	00000203 	andeq	r0, r0, r3, lsl #4
 1f4:	00049f0d 	andeq	r9, r4, sp, lsl #30
 1f8:	54280100 	strtpl	r0, [r8], #-256	; 0xffffff00
 1fc:	02000000 	andeq	r0, r0, #0
 200:	0b007791 	bleq	1e04c <startup-0x1ffe1fb4>
 204:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 208:	00541c01 	subseq	r1, r4, r1, lsl #24
 20c:	00cc0000 	sbceq	r0, ip, r0
 210:	00342000 	eorseq	r2, r4, r0
 214:	9c010000 	stcls	0, cr0, [r1], {-0}
 218:	0000022a 	andeq	r0, r0, sl, lsr #4
 21c:	0076720c 	rsbseq	r7, r6, ip, lsl #4
 220:	00541e01 	subseq	r1, r4, r1, lsl #28
 224:	91020000 	mrsls	r0, (UNDEF: 2)
 228:	c4070077 	strgt	r0, [r7], #-119	; 0xffffff89
 22c:	01000000 	mrseq	r0, (UNDEF: 0)
 230:	00009c14 	andeq	r9, r0, r4, lsl ip
 234:	00003020 	andeq	r3, r0, r0, lsr #32
 238:	4e9c0100 	fmlmie	f0, f4, f0
 23c:	0d000002 	stceq	0, cr0, [r0, #-8]
 240:	000000db 	ldrdeq	r0, [r0], -fp
 244:	00541401 	subseq	r1, r4, r1, lsl #8
 248:	91020000 	mrsls	r0, (UNDEF: 2)
 24c:	a40e0077 	strge	r0, [lr], #-119	; 0xffffff89
 250:	01000000 	mrseq	r0, (UNDEF: 0)
 254:	0000540c 	andeq	r5, r0, ip, lsl #8
 258:	00004820 	andeq	r4, r0, r0, lsr #16
 25c:	7c9c0100 	ldfvcs	f0, [ip], {0}
 260:	08000002 	stmdaeq	r0, {r1}
 264:	0c010078 	stceq	0, cr0, [r1], {120}	; 0x78
 268:	00000054 	andeq	r0, r0, r4, asr r0
 26c:	0c6f9102 	stfeqp	f1, [pc], #-8	; 26c <startup-0x1ffffd94>
 270:	0e010063 	cdpeq	0, 0, cr0, cr1, cr3, {3}
 274:	00000054 	andeq	r0, r0, r4, asr r0
 278:	00779102 	rsbseq	r9, r7, r2, lsl #2
 27c:	00010a0f 	andeq	r0, r1, pc, lsl #20
 280:	10040100 	andne	r0, r4, r0, lsl #2
 284:	44200000 	strtmi	r0, [r0], #-0
 288:	01000000 	mrseq	r0, (UNDEF: 0)
 28c:	0078089c 			; <UNDEFINED> instruction: 0x0078089c
 290:	00540401 	subseq	r0, r4, r1, lsl #8
 294:	91020000 	mrsls	r0, (UNDEF: 2)
 298:	00630c6f 	rsbeq	r0, r3, pc, ror #24
 29c:	00540601 	subseq	r0, r4, r1, lsl #12
 2a0:	91020000 	mrsls	r0, (UNDEF: 2)
 2a4:	ca000077 	bgt	488 <startup-0x1ffffb78>
 2a8:	04000001 	streq	r0, [r0], #-1
 2ac:	00010f00 	andeq	r0, r1, r0, lsl #30
 2b0:	06010400 	streq	r0, [r1], -r0, lsl #8
 2b4:	0c000000 	stceq	0, cr0, [r0], {-0}
 2b8:	00000262 	andeq	r0, r0, r2, ror #4
 2bc:	000000e0 	andeq	r0, r0, r0, ror #1
 2c0:	200002f8 	strdcs	r0, [r0], -r8
 2c4:	00000110 	andeq	r0, r0, r0, lsl r1
 2c8:	000000dd 	ldrdeq	r0, [r0], -sp
 2cc:	00018002 	andeq	r8, r1, r2
 2d0:	30070200 	andcc	r0, r7, r0, lsl #4
 2d4:	03000000 	movweq	r0, #0
 2d8:	01d20704 	bicseq	r0, r2, r4, lsl #14
 2dc:	03020000 	movweq	r0, #8192	; 0x2000
 2e0:	02000002 	andeq	r0, r0, #2
 2e4:	00004208 	andeq	r4, r0, r8, lsl #4
 2e8:	07020300 	streq	r0, [r2, -r0, lsl #6]
 2ec:	000001cc 	andeq	r0, r0, ip, asr #3
 2f0:	00016202 	andeq	r6, r1, r2, lsl #4
 2f4:	54090200 	strpl	r0, [r9], #-512	; 0xfffffe00
 2f8:	03000000 	movweq	r0, #0
 2fc:	016a0801 	cmneq	sl, r1, lsl #16
 300:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
 304:	00e80b02 	rsceq	r0, r8, r2, lsl #22
 308:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
 30c:	02000000 	andeq	r0, r0, #0
 310:	0000250c 	andeq	r2, r0, ip, lsl #10
 314:	1d050000 	stcne	0, cr0, [r5, #-0]
 318:	02000001 	andeq	r0, r0, #1
 31c:	0000370d 	andeq	r3, r0, sp, lsl #14
 320:	b9050400 	stmdblt	r5, {sl}
 324:	02000000 	andeq	r0, r0, #0
 328:	0000370e 	andeq	r3, r0, lr, lsl #14
 32c:	5a050600 	bpl	141b34 <startup-0x1febe4cc>
 330:	02000001 	andeq	r0, r0, #1
 334:	0000250f 	andeq	r2, r0, pc, lsl #10
 338:	00050800 	andeq	r0, r5, r0, lsl #16
 33c:	02000000 	andeq	r0, r0, #0
 340:	00002510 	andeq	r2, r0, r0, lsl r5
 344:	ef050c00 	svc	0x00050c00
 348:	02000001 	andeq	r0, r0, #1
 34c:	00004911 	andeq	r4, r0, r1, lsl r9
 350:	11051000 	mrsne	r1, (UNDEF: 5)
 354:	02000002 	andeq	r0, r0, #2
 358:	00004912 	andeq	r4, r0, r2, lsl r9
 35c:	aa051100 	bge	144764 <startup-0x1febb89c>
 360:	02000001 	andeq	r0, r0, #1
 364:	00003713 	andeq	r3, r0, r3, lsl r7
 368:	53051200 	movwpl	r1, #20992	; 0x5200
 36c:	02000001 	andeq	r0, r0, #1
 370:	00004914 	andeq	r4, r0, r4, lsl r9
 374:	78051400 	stmdavc	r5, {sl, ip}
 378:	02000001 	andeq	r0, r0, #1
 37c:	00004915 	andeq	r4, r0, r5, lsl r9
 380:	24051500 	strcs	r1, [r5], #-1280	; 0xfffffb00
 384:	02000001 	andeq	r0, r0, #1
 388:	00003716 	andeq	r3, r0, r6, lsl r7
 38c:	02001600 	andeq	r1, r0, #0, 12
 390:	0000020c 	andeq	r0, r0, ip, lsl #4
 394:	005b1702 	subseq	r1, fp, r2, lsl #14
 398:	93060000 	movwls	r0, #24576	; 0x6000
 39c:	01000002 	tsteq	r0, r2
 3a0:	0001191e 	andeq	r1, r1, lr, lsl r9
 3a4:	0003b400 	andeq	fp, r3, r0, lsl #8
 3a8:	00005420 	andeq	r5, r0, r0, lsr #8
 3ac:	199c0100 	ldmibne	ip, {r8}
 3b0:	07000001 	streq	r0, [r0, -r1]
 3b4:	20010063 	andcs	r0, r1, r3, rrx
 3b8:	00000054 	andeq	r0, r0, r4, asr r0
 3bc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 3c0:	69050408 	stmdbvs	r5, {r3, sl}
 3c4:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 3c8:	0000029d 	muleq	r0, sp, r2
 3cc:	03601301 	cmneq	r0, #67108864	; 0x4000000
 3d0:	00542000 	subseq	r2, r4, r0
 3d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3d8:	00000144 	andeq	r0, r0, r4, asr #2
 3dc:	776f720a 	strbvc	r7, [pc, -sl, lsl #4]!
 3e0:	30130100 	andscc	r0, r3, r0, lsl #2
 3e4:	02000000 	andeq	r0, r0, #0
 3e8:	0b007491 	bleq	1d634 <startup-0x1ffe29cc>
 3ec:	0000025d 	andeq	r0, r0, sp, asr r2
 3f0:	00540301 	subseq	r0, r4, r1, lsl #6
 3f4:	02f80000 	rscseq	r0, r8, #0
 3f8:	00682000 	rsbeq	r2, r8, r0
 3fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 400:	000001c1 	andeq	r0, r0, r1, asr #3
 404:	79656b07 	stmdbvc	r5!, {r0, r1, r2, r8, r9, fp, sp, lr}^
 408:	c1050100 	mrsgt	r0, (UNDEF: 21)
 40c:	02000001 	andeq	r0, r0, #1
 410:	72075891 	andvc	r5, r7, #9502720	; 0x910000
 414:	0100776f 	tsteq	r0, pc, ror #14
 418:	00011906 	andeq	r1, r1, r6, lsl #18
 41c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 420:	6c6f6307 	stclvs	3, cr6, [pc], #-28	; 40c <startup-0x1ffffbf4>
 424:	19060100 	stmdbne	r6, {r8}
 428:	02000001 	andeq	r0, r0, #1
 42c:	9d0c6891 	stcls	8, cr6, [ip, #-580]	; 0xfffffdbc
 430:	01000002 	tsteq	r0, r2
 434:	00011908 	andeq	r1, r1, r8, lsl #18
 438:	00019800 	andeq	r9, r1, r0, lsl #16
 43c:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
 440:	20000310 	andcs	r0, r0, r0, lsl r3
 444:	0000002e 	andeq	r0, r0, lr, lsr #32
 448:	00029d0c 	andeq	r9, r2, ip, lsl #26
 44c:	19080100 	stmdbne	r8, {r8}
 450:	b2000001 	andlt	r0, r0, #1
 454:	0d000001 	stceq	0, cr0, [r0, #-4]
 458:	02930f00 	addseq	r0, r3, #0, 30
 45c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 460:	00000119 	andeq	r0, r0, r9, lsl r1
 464:	0000000d 	andeq	r0, r0, sp
 468:	00005410 	andeq	r5, r0, r0, lsl r4
 46c:	00301100 	eorseq	r1, r0, r0, lsl #2
 470:	000f0000 	andeq	r0, pc, r0
 474:	0000b500 	andeq	fp, r0, r0, lsl #10
 478:	14000400 	strne	r0, [r0], #-1024	; 0xfffffc00
 47c:	04000002 	streq	r0, [r0], #-2
 480:	00000601 	andeq	r0, r0, r1, lsl #12
 484:	02b50c00 	adcseq	r0, r5, #0, 24
 488:	00e00000 	rsceq	r0, r0, r0
 48c:	04080000 	streq	r0, [r8], #-0
 490:	009a2000 	addseq	r2, sl, r0
 494:	018d0000 	orreq	r0, sp, r0
 498:	04020000 	streq	r0, [r2], #-0
 49c:	0001d207 	andeq	sp, r1, r7, lsl #4
 4a0:	07020200 	streq	r0, [r2, -r0, lsl #4]
 4a4:	000001cc 	andeq	r0, r0, ip, asr #3
 4a8:	6a080102 	bvs	2008b8 <startup-0x1fdff748>
 4ac:	03000001 	movweq	r0, #1
 4b0:	000002f8 	strdeq	r0, [r0], -r8
 4b4:	04982901 	ldreq	r2, [r8], #2305	; 0x901
 4b8:	000a2000 	andeq	r2, sl, r0
 4bc:	9c010000 	stcls	0, cr0, [r1], {-0}
 4c0:	0002ec04 	andeq	lr, r2, r4, lsl #24
 4c4:	441d0100 	ldrmi	r0, [sp], #-256	; 0xffffff00
 4c8:	54200004 	strtpl	r0, [r0], #-4
 4cc:	01000000 	mrseq	r0, (UNDEF: 0)
 4d0:	00006f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 4d4:	02e70500 	rsceq	r0, r7, #0, 10
 4d8:	23010000 	movwcs	r0, #4096	; 0x1000
 4dc:	00000025 	andeq	r0, r0, r5, lsr #32
 4e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 4e4:	00030404 	andeq	r0, r3, r4, lsl #8
 4e8:	260f0100 	strcs	r0, [pc], -r0, lsl #2
 4ec:	1e200004 	cdpne	0, 2, cr0, cr0, cr4, {0}
 4f0:	01000000 	mrseq	r0, (UNDEF: 0)
 4f4:	0000929c 	muleq	r0, ip, r2
 4f8:	73750600 	cmnvc	r5, #0, 12
 4fc:	920f0100 	andls	r0, pc, #0, 2
 500:	02000000 	andeq	r0, r0, #0
 504:	07007491 			; <UNDEFINED> instruction: 0x07007491
 508:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 50c:	a9080074 	stmdbge	r8, {r2, r4, r5, r6}
 510:	01000002 	tsteq	r0, r2
 514:	00040804 	andeq	r0, r4, r4, lsl #16
 518:	00001e20 	andeq	r1, r0, r0, lsr #28
 51c:	069c0100 	ldreq	r0, [ip], r0, lsl #2
 520:	0100736d 	tsteq	r0, sp, ror #6
 524:	00009204 	andeq	r9, r0, r4, lsl #4
 528:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 52c:	059e0000 	ldreq	r0, [lr]
 530:	00040000 	andeq	r0, r4, r0
 534:	000002a6 	andeq	r0, r0, r6, lsr #5
 538:	00060104 	andeq	r0, r6, r4, lsl #2
 53c:	5a0c0000 	bpl	300544 <startup-0x1fcffabc>
 540:	e0000003 	and	r0, r0, r3
 544:	a4000000 	strge	r0, [r0], #-0
 548:	7c200004 	stcvc	0, cr0, [r0], #-16
 54c:	0b000006 	bleq	56c <startup-0x1ffffa94>
 550:	02000002 	andeq	r0, r0, #2
 554:	00000180 	andeq	r0, r0, r0, lsl #3
 558:	00300702 	eorseq	r0, r0, r2, lsl #14
 55c:	04030000 	streq	r0, [r3], #-0
 560:	0001d207 	andeq	sp, r1, r7, lsl #4
 564:	02030200 	andeq	r0, r3, #0, 4
 568:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 56c:	00000042 	andeq	r0, r0, r2, asr #32
 570:	cc070203 	sfmgt	f0, 4, [r7], {3}
 574:	02000001 	andeq	r0, r0, #1
 578:	00000162 	andeq	r0, r0, r2, ror #2
 57c:	00540902 	subseq	r0, r4, r2, lsl #18
 580:	01030000 	mrseq	r0, (UNDEF: 3)
 584:	00016a08 	andeq	r6, r1, r8, lsl #20
 588:	02180400 	andseq	r0, r8, #0, 8
 58c:	0000e80b 	andeq	lr, r0, fp, lsl #16
 590:	009e0500 	addseq	r0, lr, r0, lsl #10
 594:	0c020000 	stceq	0, cr0, [r2], {-0}
 598:	00000025 	andeq	r0, r0, r5, lsr #32
 59c:	011d0500 	tsteq	sp, r0, lsl #10
 5a0:	0d020000 	stceq	0, cr0, [r2, #-0]
 5a4:	00000037 	andeq	r0, r0, r7, lsr r0
 5a8:	00b90504 	adcseq	r0, r9, r4, lsl #10
 5ac:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 5b0:	00000037 	andeq	r0, r0, r7, lsr r0
 5b4:	015a0506 	cmpeq	sl, r6, lsl #10
 5b8:	0f020000 	svceq	0x00020000
 5bc:	00000025 	andeq	r0, r0, r5, lsr #32
 5c0:	00000508 	andeq	r0, r0, r8, lsl #10
 5c4:	10020000 	andne	r0, r2, r0
 5c8:	00000025 	andeq	r0, r0, r5, lsr #32
 5cc:	01ef050c 	mvneq	r0, ip, lsl #10
 5d0:	11020000 	mrsne	r0, (UNDEF: 2)
 5d4:	00000049 	andeq	r0, r0, r9, asr #32
 5d8:	02110510 	andseq	r0, r1, #16, 10	; 0x4000000
 5dc:	12020000 	andne	r0, r2, #0
 5e0:	00000049 	andeq	r0, r0, r9, asr #32
 5e4:	01aa0511 			; <UNDEFINED> instruction: 0x01aa0511
 5e8:	13020000 	movwne	r0, #8192	; 0x2000
 5ec:	00000037 	andeq	r0, r0, r7, lsr r0
 5f0:	01530512 	cmpeq	r3, r2, lsl r5
 5f4:	14020000 	strne	r0, [r2], #-0
 5f8:	00000049 	andeq	r0, r0, r9, asr #32
 5fc:	01780514 	cmneq	r8, r4, lsl r5
 600:	15020000 	strne	r0, [r2, #-0]
 604:	00000049 	andeq	r0, r0, r9, asr #32
 608:	01240515 			; <UNDEFINED> instruction: 0x01240515
 60c:	16020000 	strne	r0, [r2], -r0
 610:	00000037 	andeq	r0, r0, r7, lsr r0
 614:	0c020016 	stceq	0, cr0, [r2], {22}
 618:	02000002 	andeq	r0, r0, #2
 61c:	00005b17 	andeq	r5, r0, r7, lsl fp
 620:	038e0600 	orreq	r0, lr, #0, 12
 624:	03020000 	movweq	r0, #8192	; 0x2000
 628:	00011404 	andeq	r1, r1, r4, lsl #8
 62c:	00780700 	rsbseq	r0, r8, r0, lsl #14
 630:	00540603 	subseq	r0, r4, r3, lsl #12
 634:	07000000 	streq	r0, [r0, -r0]
 638:	07030079 	smlsdxeq	r3, r9, r0, r0
 63c:	00000054 	andeq	r0, r0, r4, asr r0
 640:	95020001 	strls	r0, [r2, #-1]
 644:	03000003 	movweq	r0, #3
 648:	0000f308 	andeq	pc, r0, r8, lsl #6
 64c:	04190600 	ldreq	r0, [r9], #-1536	; 0xfffffa00
 650:	03340000 	teqeq	r4, #0
 654:	00015b0a 	andeq	r5, r1, sl, lsl #22
 658:	047f0500 	ldrbteq	r0, [pc], #-1280	; 660 <startup-0x1ffff9a0>
 65c:	0c030000 	stceq	0, cr0, [r3], {-0}
 660:	0000015b 	andeq	r0, r0, fp, asr r1
 664:	04130500 	ldreq	r0, [r3], #-1280	; 0xfffffb00
 668:	0d030000 	stceq	0, cr0, [r3, #-0]
 66c:	0000015b 	andeq	r0, r0, fp, asr r1
 670:	04230504 	strteq	r0, [r3], #-1284	; 0xfffffafc
 674:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
 678:	0000015b 	andeq	r0, r0, fp, asr r1
 67c:	78700708 	ldmdavc	r0!, {r3, r8, r9, sl}^
 680:	620f0300 	andvs	r0, pc, #0, 6
 684:	0c000001 	stceq	0, cr0, [r0], {1}
 688:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
 68c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 690:	00011409 	andeq	r1, r1, r9, lsl #8
 694:	00017200 	andeq	r7, r1, r0, lsl #4
 698:	00300a00 	eorseq	r0, r0, r0, lsl #20
 69c:	00130000 	andseq	r0, r3, r0
 6a0:	00031002 	andeq	r1, r3, r2
 6a4:	7d100300 	ldcvc	3, cr0, [r0, #-0]
 6a8:	0b000001 	bleq	6b4 <startup-0x1ffff94c>
 6ac:	00011f04 	andeq	r1, r1, r4, lsl #30
 6b0:	046d0600 	strbteq	r0, [sp], #-1536	; 0xfffffa00
 6b4:	03240000 			; <UNDEFINED> instruction: 0x03240000
 6b8:	0001fc12 	andeq	pc, r1, r2, lsl ip	; <UNPREDICTABLE>
 6bc:	65670700 	strbvs	r0, [r7, #-1792]!	; 0xfffff900
 6c0:	1303006f 	movwne	r0, #12399	; 0x306f
 6c4:	00000172 	andeq	r0, r0, r2, ror r1
 6c8:	033e0500 	teqeq	lr, #0, 10
 6cc:	14030000 	strne	r0, [r3], #-0
 6d0:	0000015b 	andeq	r0, r0, fp, asr r1
 6d4:	03e60504 	mvneq	r0, #4, 10	; 0x1000000
 6d8:	14030000 	strne	r0, [r3], #-0
 6dc:	0000015b 	andeq	r0, r0, fp, asr r1
 6e0:	03a50508 			; <UNDEFINED> instruction: 0x03a50508
 6e4:	15030000 	strne	r0, [r3, #-0]
 6e8:	0000015b 	andeq	r0, r0, fp, asr r1
 6ec:	03aa050c 			; <UNDEFINED> instruction: 0x03aa050c
 6f0:	15030000 	strne	r0, [r3, #-0]
 6f4:	0000015b 	andeq	r0, r0, fp, asr r1
 6f8:	03220510 			; <UNDEFINED> instruction: 0x03220510
 6fc:	16030000 	strne	r0, [r3], -r0
 700:	0000020d 	andeq	r0, r0, sp, lsl #4
 704:	03e00514 	mvneq	r0, #20, 10	; 0x5000000
 708:	17030000 	strne	r0, [r3, -r0]
 70c:	0000020d 	andeq	r0, r0, sp, lsl #4
 710:	03270518 			; <UNDEFINED> instruction: 0x03270518
 714:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 718:	0000020d 	andeq	r0, r0, sp, lsl #4
 71c:	039b051c 	orrseq	r0, fp, #28, 10	; 0x7000000
 720:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
 724:	00000228 	andeq	r0, r0, r8, lsr #4
 728:	070c0020 	streq	r0, [ip, -r0, lsr #32]
 72c:	0d000002 	stceq	0, cr0, [r0, #-8]
 730:	00000207 	andeq	r0, r0, r7, lsl #4
 734:	83040b00 	movwhi	r0, #19200	; 0x4b00
 738:	0b000001 	bleq	744 <startup-0x1ffff8bc>
 73c:	0001fc04 	andeq	pc, r1, r4, lsl #24
 740:	02280c00 	eoreq	r0, r8, #0, 24
 744:	070d0000 	streq	r0, [sp, -r0]
 748:	0d000002 	stceq	0, cr0, [r0, #-8]
 74c:	0000015b 	andeq	r0, r0, fp, asr r1
 750:	00015b0d 	andeq	r5, r1, sp, lsl #22
 754:	040b0000 	streq	r0, [fp], #-0
 758:	00000213 	andeq	r0, r0, r3, lsl r2
 75c:	0004a702 	andeq	sl, r4, r2, lsl #14
 760:	071a0300 	ldreq	r0, [sl, -r0, lsl #6]
 764:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 768:	00000429 	andeq	r0, r0, r9, lsr #8
 76c:	0a8ee501 	beq	fe3b9b78 <string+0xde3b8d38>
 770:	00922000 	addseq	r2, r2, r0
 774:	9c010000 	stcls	0, cr0, [r1], {-0}
 778:	00000291 	muleq	r0, r1, r2
 77c:	6a626f0f 	bvs	189c3c0 <startup-0x1e763c40>
 780:	2ee50100 	cdpcs	1, 14, cr0, cr5, cr0, {0}
 784:	02000002 	andeq	r0, r0, #2
 788:	70106491 	mulsvc	r0, r1, r4
 78c:	49e70100 	stmibmi	r7!, {r8}^
 790:	02000000 	andeq	r0, r0, #0
 794:	6e106f91 	mrcvs	15, 0, r6, cr0, cr1, {4}
 798:	49e80100 	stmibmi	r8!, {r8}^
 79c:	02000000 	andeq	r0, r0, #0
 7a0:	89116e91 	ldmdbhi	r1, {r0, r4, r7, r9, sl, fp, sp, lr}
 7a4:	01000004 	tsteq	r0, r4
 7a8:	000049e9 	andeq	r4, r0, r9, ror #19
 7ac:	6d910200 	lfmvs	f0, 4, [r1]
 7b0:	00031a11 	andeq	r1, r3, r1, lsl sl
 7b4:	49ea0100 	stmibmi	sl!, {r8}^
 7b8:	02000000 	andeq	r0, r0, #0
 7bc:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
 7c0:	00000349 	andeq	r0, r0, r9, asr #6
 7c4:	09fcd301 	ldmibeq	ip!, {r0, r8, r9, ip, lr, pc}^
 7c8:	00922000 	addseq	r2, r2, r0
 7cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 7d0:	000002f5 	strdeq	r0, [r0], -r5
 7d4:	6a626f0f 	bvs	189c418 <startup-0x1e763be8>
 7d8:	2ed30100 	cdpcs	1, 13, cr0, cr3, cr0, {0}
 7dc:	02000002 	andeq	r0, r0, #2
 7e0:	70106491 	mulsvc	r0, r1, r4
 7e4:	49d50100 	ldmibmi	r5, {r8}^
 7e8:	02000000 	andeq	r0, r0, #0
 7ec:	6e106f91 	mrcvs	15, 0, r6, cr0, cr1, {4}
 7f0:	49d60100 	ldmibmi	r6, {r8}^
 7f4:	02000000 	andeq	r0, r0, #0
 7f8:	89116e91 	ldmdbhi	r1, {r0, r4, r7, r9, sl, fp, sp, lr}
 7fc:	01000004 	tsteq	r0, r4
 800:	000049d7 	ldrdeq	r4, [r0], -r7
 804:	6d910200 	lfmvs	f0, 4, [r1]
 808:	00031a11 	andeq	r1, r3, r1, lsl sl
 80c:	49d80100 	ldmibmi	r8, {r8}^
 810:	02000000 	andeq	r0, r0, #0
 814:	73106c91 	tstvc	r0, #37120	; 0x9100
 818:	14da0100 	ldrbne	r0, [sl], #256	; 0x100
 81c:	02000001 	andeq	r0, r0, #1
 820:	0e006891 	mcreq	8, 0, r6, cr0, cr1, {4}
 824:	00000343 	andeq	r0, r0, r3, asr #6
 828:	0868a701 	stmdaeq	r8!, {r0, r8, r9, sl, sp, pc}^
 82c:	01942000 	orrseq	r2, r4, r0
 830:	9c010000 	stcls	0, cr0, [r1], {-0}
 834:	00000367 	andeq	r0, r0, r7, ror #6
 838:	0100780f 	tsteq	r0, pc, lsl #16
 83c:	00015ba7 	andeq	r5, r1, r7, lsr #23
 840:	5c910200 	lfmpl	f0, 4, [r1], {0}
 844:	0100790f 	tsteq	r0, pc, lsl #18
 848:	00015ba7 	andeq	r5, r1, r7, lsr #23
 84c:	58910200 	ldmpl	r1, {r9}
 850:	7465730f 	strbtvc	r7, [r5], #-783	; 0xfffffcf1
 854:	5ba70100 	blpl	fe9c0c5c <string+0xde9bfe1c>
 858:	02000001 	andeq	r0, r0, #1
 85c:	36115491 			; <UNDEFINED> instruction: 0x36115491
 860:	01000004 	tsteq	r0, r4
 864:	000049a9 	andeq	r4, r0, r9, lsr #19
 868:	6f910200 	svcvs	0x00910200
 86c:	01006310 	tsteq	r0, r0, lsl r3
 870:	000049a9 	andeq	r4, r0, r9, lsr #19
 874:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 878:	0001c111 	andeq	ip, r1, r1, lsl r1
 87c:	49a90100 	stmibmi	r9!, {r8}
 880:	02000000 	andeq	r0, r0, #0
 884:	67116e91 			; <UNDEFINED> instruction: 0x67116e91
 888:	01000004 	tsteq	r0, r4
 88c:	00015baa 	andeq	r5, r1, sl, lsr #23
 890:	68910200 	ldmvs	r1, {r9}
 894:	04af0e00 	strteq	r0, [pc], #3584	; 89c <startup-0x1ffff764>
 898:	9a010000 	bls	408a0 <startup-0x1ffbf760>
 89c:	20000812 	andcs	r0, r0, r2, lsl r8
 8a0:	00000056 	andeq	r0, r0, r6, asr r0
 8a4:	03ad9c01 			; <UNDEFINED> instruction: 0x03ad9c01
 8a8:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
 8ac:	48200008 	stmdami	r0!, {r3}
 8b0:	11000000 	mrsne	r0, (UNDEF: 0)
 8b4:	00000355 	andeq	r0, r0, r5, asr r3
 8b8:	00309c01 	eorseq	r9, r0, r1, lsl #24
 8bc:	91020000 	mrsls	r0, (UNDEF: 2)
 8c0:	083a1274 	ldmdaeq	sl!, {r2, r4, r5, r6, r9, ip}
 8c4:	001a2000 	andseq	r2, sl, r0
 8c8:	61100000 	tstvs	r0, r0
 8cc:	01006464 	tsteq	r0, r4, ror #8
 8d0:	000030a0 	andeq	r3, r0, r0, lsr #1
 8d4:	70910200 	addsvc	r0, r1, r0, lsl #4
 8d8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 8dc:	000003eb 	andeq	r0, r0, fp, ror #7
 8e0:	07b68a01 	ldreq	r8, [r6, r1, lsl #20]!
 8e4:	005c2000 	subseq	r2, ip, r0
 8e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 8ec:	000003e1 	andeq	r0, r0, r1, ror #7
 8f0:	00030413 	andeq	r0, r3, r3, lsl r4
 8f4:	5b8d0100 	blpl	fe340cfc <string+0xde33febc>
 8f8:	d3000001 	movwle	r0, #1
 8fc:	14000003 	strne	r0, [r0], #-3
 900:	02a91500 	adceq	r1, r9, #0, 10
 904:	8f010000 	svchi	0x00010000
 908:	0000015b 	andeq	r0, r0, fp, asr r1
 90c:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
 910:	0000032c 	andeq	r0, r0, ip, lsr #6
 914:	075c7601 	ldrbeq	r7, [ip, -r1, lsl #12]
 918:	005a2000 	subseq	r2, sl, r0
 91c:	9c010000 	stcls	0, cr0, [r1], {-0}
 920:	00000405 	andeq	r0, r0, r5, lsl #8
 924:	0001c116 	andeq	ip, r1, r6, lsl r1
 928:	49760100 	ldmdbmi	r6!, {r8}^
 92c:	02000000 	andeq	r0, r0, #0
 930:	17007791 			; <UNDEFINED> instruction: 0x17007791
 934:	000003cf 	andeq	r0, r0, pc, asr #7
 938:	07146e01 	ldreq	r6, [r4, -r1, lsl #28]
 93c:	00482000 	subeq	r2, r8, r0
 940:	9c010000 	stcls	0, cr0, [r1], {-0}
 944:	00000433 	andeq	r0, r0, r3, lsr r4
 948:	0100780f 	tsteq	r0, pc, lsl #16
 94c:	0000546e 	andeq	r5, r0, lr, ror #8
 950:	6f910200 	svcvs	0x00910200
 954:	01006310 	tsteq	r0, r0, lsl r3
 958:	00005470 	andeq	r5, r0, r0, ror r4
 95c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 960:	03fe1700 	mvnseq	r1, #0, 14
 964:	66010000 	strvs	r0, [r1], -r0
 968:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 96c:	00000044 	andeq	r0, r0, r4, asr #32
 970:	04619c01 	strbteq	r9, [r1], #-3073	; 0xfffff3ff
 974:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
 978:	49660100 	stmdbmi	r6!, {r8}^
 97c:	02000000 	andeq	r0, r0, #0
 980:	63106f91 	tstvs	r0, #580	; 0x244
 984:	54680100 	strbtpl	r0, [r8], #-256	; 0xffffff00
 988:	02000000 	andeq	r0, r0, #0
 98c:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 990:	000003af 	andeq	r0, r0, pc, lsr #7
 994:	00496001 	subeq	r6, r9, r1
 998:	06a60000 	strteq	r0, [r6], r0
 99c:	002a2000 	eoreq	r2, sl, r0
 9a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 9a4:	00000489 	andeq	r0, r0, r9, lsl #9
 9a8:	0001c116 	andeq	ip, r1, r6, lsl r1
 9ac:	49600100 	stmdbmi	r0!, {r8}^
 9b0:	02000000 	andeq	r0, r0, #0
 9b4:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 9b8:	00000441 	andeq	r0, r0, r1, asr #8
 9bc:	06605701 	strbteq	r5, [r0], -r1, lsl #14
 9c0:	00462000 	subeq	r2, r6, r0
 9c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 9c8:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
 9cc:	0003bc16 	andeq	fp, r3, r6, lsl ip
 9d0:	49570100 	ldmdbmi	r7, {r8}^
 9d4:	02000000 	andeq	r0, r0, #0
 9d8:	c1167791 			; <UNDEFINED> instruction: 0xc1167791
 9dc:	01000001 	tsteq	r0, r1
 9e0:	00004957 	andeq	r4, r0, r7, asr r9
 9e4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 9e8:	04910e00 	ldreq	r0, [r1], #3584	; 0xe00
 9ec:	4f010000 	svcmi	0x00010000
 9f0:	20000620 	andcs	r0, r0, r0, lsr #12
 9f4:	00000040 	andeq	r0, r0, r0, asr #32
 9f8:	04ed9c01 	strbteq	r9, [sp], #3073	; 0xc01
 9fc:	9f160000 	svcls	0x00160000
 a00:	01000004 	tsteq	r0, r4
 a04:	0000494f 	andeq	r4, r0, pc, asr #18
 a08:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a0c:	0001c116 	andeq	ip, r1, r6, lsl r1
 a10:	494f0100 	stmdbmi	pc, {r8}^	; <UNPREDICTABLE>
 a14:	02000000 	andeq	r0, r0, #0
 a18:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 a1c:	000003c1 	andeq	r0, r0, r1, asr #7
 a20:	05a03701 	streq	r3, [r0, #1793]!	; 0x701
 a24:	00802000 	addeq	r2, r0, r0
 a28:	9c010000 	stcls	0, cr0, [r1], {-0}
 a2c:	00000535 	andeq	r0, r0, r5, lsr r5
 a30:	00043b16 	andeq	r3, r4, r6, lsl fp
 a34:	49370100 	ldmdbmi	r7!, {r8}
 a38:	02000000 	andeq	r0, r0, #0
 a3c:	c1167791 			; <UNDEFINED> instruction: 0xc1167791
 a40:	01000001 	tsteq	r0, r1
 a44:	00004937 	andeq	r4, r0, r7, lsr r9
 a48:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 a4c:	01006319 	tsteq	r0, r9, lsl r3
 a50:	00004939 	andeq	r4, r0, r9, lsr r9
 a54:	02f81500 	rscseq	r1, r8, #0, 10
 a58:	0c010000 	stceq	0, cr0, [r1], {-0}
 a5c:	0000015b 	andeq	r0, r0, fp, asr r1
 a60:	1a000014 	bne	ab8 <startup-0x1ffff548>
 a64:	00000472 	andeq	r0, r0, r2, ror r4
 a68:	00491d01 	subeq	r1, r9, r1, lsl #26
 a6c:	05100000 	ldreq	r0, [r0, #-0]
 a70:	00902000 	addseq	r2, r0, r0
 a74:	9c010000 	stcls	0, cr0, [r1], {-0}
 a78:	00000576 	andeq	r0, r0, r6, ror r5
 a7c:	0001c116 	andeq	ip, r1, r6, lsl r1
 a80:	491d0100 	ldmdbmi	sp, {r8}
 a84:	02000000 	andeq	r0, r0, #0
 a88:	63106f91 	tstvs	r0, #580	; 0x244
 a8c:	491f0100 	ldmdbmi	pc, {r8}	; <UNPREDICTABLE>
 a90:	02000000 	andeq	r0, r0, #0
 a94:	f8157791 			; <UNDEFINED> instruction: 0xf8157791
 a98:	01000002 	tsteq	r0, r2
 a9c:	00015b0c 	andeq	r5, r1, ip, lsl #22
 aa0:	00001400 	andeq	r1, r0, r0, lsl #8
 aa4:	0004541b 	andeq	r5, r4, fp, lsl r4
 aa8:	a4050100 	strge	r0, [r5], #-256	; 0xffffff00
 aac:	6c200004 	stcvs	0, cr0, [r0], #-16
 ab0:	01000000 	mrseq	r0, (UNDEF: 0)
 ab4:	0063109c 	mlseq	r3, ip, r0, r1
 ab8:	00490701 	subeq	r0, r9, r1, lsl #14
 abc:	91020000 	mrsls	r0, (UNDEF: 2)
 ac0:	02f81577 	rscseq	r1, r8, #499122176	; 0x1dc00000
 ac4:	0c010000 	stceq	0, cr0, [r1], {-0}
 ac8:	0000015b 	andeq	r0, r0, fp, asr r1
 acc:	00000014 	andeq	r0, r0, r4, lsl r0
 ad0:	00000415 	andeq	r0, r0, r5, lsl r4
 ad4:	043d0004 	ldrteq	r0, [sp], #-4
 ad8:	01040000 	mrseq	r0, (UNDEF: 4)
 adc:	00000006 	andeq	r0, r0, r6
 ae0:	0004cc0c 	andeq	ip, r4, ip, lsl #24
 ae4:	0000e000 	andeq	lr, r0, r0
	...
 af0:	00039500 	andeq	r9, r3, r0, lsl #10
 af4:	01800200 	orreq	r0, r0, r0, lsl #4
 af8:	07020000 	streq	r0, [r2, -r0]
 afc:	00000030 	andeq	r0, r0, r0, lsr r0
 b00:	d2070403 	andle	r0, r7, #50331648	; 0x3000000
 b04:	02000001 	andeq	r0, r0, #1
 b08:	00000203 	andeq	r0, r0, r3, lsl #4
 b0c:	00420802 	subeq	r0, r2, r2, lsl #16
 b10:	02030000 	andeq	r0, r3, #0
 b14:	0001cc07 	andeq	ip, r1, r7, lsl #24
 b18:	01620200 	cmneq	r2, r0, lsl #4
 b1c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
 b20:	00000054 	andeq	r0, r0, r4, asr r0
 b24:	6a080103 	bvs	200f38 <startup-0x1fdff0c8>
 b28:	04000001 	streq	r0, [r0], #-1
 b2c:	e80b0218 	stmda	fp, {r3, r4, r9}
 b30:	05000000 	streq	r0, [r0, #-0]
 b34:	0000009e 	muleq	r0, lr, r0
 b38:	00250c02 	eoreq	r0, r5, r2, lsl #24
 b3c:	05000000 	streq	r0, [r0, #-0]
 b40:	0000011d 	andeq	r0, r0, sp, lsl r1
 b44:	00370d02 	eorseq	r0, r7, r2, lsl #26
 b48:	05040000 	streq	r0, [r4, #-0]
 b4c:	000000b9 	strheq	r0, [r0], -r9
 b50:	00370e02 	eorseq	r0, r7, r2, lsl #28
 b54:	05060000 	streq	r0, [r6, #-0]
 b58:	0000015a 	andeq	r0, r0, sl, asr r1
 b5c:	00250f02 	eoreq	r0, r5, r2, lsl #30
 b60:	05080000 	streq	r0, [r8, #-0]
 b64:	00000000 	andeq	r0, r0, r0
 b68:	00251002 	eoreq	r1, r5, r2
 b6c:	050c0000 	streq	r0, [ip, #-0]
 b70:	000001ef 	andeq	r0, r0, pc, ror #3
 b74:	00491102 	subeq	r1, r9, r2, lsl #2
 b78:	05100000 	ldreq	r0, [r0, #-0]
 b7c:	00000211 	andeq	r0, r0, r1, lsl r2
 b80:	00491202 	subeq	r1, r9, r2, lsl #4
 b84:	05110000 	ldreq	r0, [r1, #-0]
 b88:	000001aa 	andeq	r0, r0, sl, lsr #3
 b8c:	00371302 	eorseq	r1, r7, r2, lsl #6
 b90:	05120000 	ldreq	r0, [r2, #-0]
 b94:	00000153 	andeq	r0, r0, r3, asr r1
 b98:	00491402 	subeq	r1, r9, r2, lsl #8
 b9c:	05140000 	ldreq	r0, [r4, #-0]
 ba0:	00000178 	andeq	r0, r0, r8, ror r1
 ba4:	00491502 	subeq	r1, r9, r2, lsl #10
 ba8:	05150000 	ldreq	r0, [r5, #-0]
 bac:	00000124 	andeq	r0, r0, r4, lsr #2
 bb0:	00371602 	eorseq	r1, r7, r2, lsl #12
 bb4:	00160000 	andseq	r0, r6, r0
 bb8:	00020c02 	andeq	r0, r2, r2, lsl #24
 bbc:	5b170200 	blpl	5c13c4 <startup-0x1fa3ec3c>
 bc0:	06000000 	streq	r0, [r0], -r0
 bc4:	0000038e 	andeq	r0, r0, lr, lsl #7
 bc8:	14040302 	strne	r0, [r4], #-770	; 0xfffffcfe
 bcc:	07000001 	streq	r0, [r0, -r1]
 bd0:	06030078 			; <UNDEFINED> instruction: 0x06030078
 bd4:	00000054 	andeq	r0, r0, r4, asr r0
 bd8:	00790700 	rsbseq	r0, r9, r0, lsl #14
 bdc:	00540703 	subseq	r0, r4, r3, lsl #14
 be0:	00010000 	andeq	r0, r1, r0
 be4:	00039502 	andeq	r9, r3, r2, lsl #10
 be8:	f3080300 	vcgt.u8	d0, d8, d0
 bec:	06000000 	streq	r0, [r0], -r0
 bf0:	00000419 	andeq	r0, r0, r9, lsl r4
 bf4:	5b0a0334 	blpl	2818cc <startup-0x1fd7e734>
 bf8:	05000001 	streq	r0, [r0, #-1]
 bfc:	0000047f 	andeq	r0, r0, pc, ror r4
 c00:	015b0c03 	cmpeq	fp, r3, lsl #24
 c04:	05000000 	streq	r0, [r0, #-0]
 c08:	00000413 	andeq	r0, r0, r3, lsl r4
 c0c:	015b0d03 	cmpeq	fp, r3, lsl #26
 c10:	05040000 	streq	r0, [r4, #-0]
 c14:	00000423 	andeq	r0, r0, r3, lsr #8
 c18:	015b0e03 	cmpeq	fp, r3, lsl #28
 c1c:	07080000 	streq	r0, [r8, -r0]
 c20:	03007870 	movweq	r7, #2160	; 0x870
 c24:	0001620f 	andeq	r6, r1, pc, lsl #4
 c28:	08000c00 	stmdaeq	r0, {sl, fp}
 c2c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 c30:	14090074 	strne	r0, [r9], #-116	; 0xffffff8c
 c34:	72000001 	andvc	r0, r0, #1
 c38:	0a000001 	beq	c44 <startup-0x1ffff3bc>
 c3c:	00000030 	andeq	r0, r0, r0, lsr r0
 c40:	11020013 	tstne	r2, r3, lsl r0
 c44:	03000003 	movweq	r0, #3
 c48:	00011f10 	andeq	r1, r1, r0, lsl pc
 c4c:	03100200 	tsteq	r0, #0, 4
 c50:	10030000 	andne	r0, r3, r0
 c54:	00000188 	andeq	r0, r0, r8, lsl #3
 c58:	011f040b 	tsteq	pc, fp, lsl #8
 c5c:	6d060000 	stcvs	0, cr0, [r6, #-0]
 c60:	24000004 	strcs	r0, [r0], #-4
 c64:	02071203 	andeq	r1, r7, #805306368	; 0x30000000
 c68:	67070000 	strvs	r0, [r7, -r0]
 c6c:	03006f65 	movweq	r6, #3941	; 0xf65
 c70:	00017d13 	andeq	r7, r1, r3, lsl sp
 c74:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
 c78:	03000003 	movweq	r0, #3
 c7c:	00015b14 	andeq	r5, r1, r4, lsl fp
 c80:	e6050400 	str	r0, [r5], -r0, lsl #8
 c84:	03000003 	movweq	r0, #3
 c88:	00015b14 	andeq	r5, r1, r4, lsl fp
 c8c:	a5050800 	strge	r0, [r5, #-2048]	; 0xfffff800
 c90:	03000003 	movweq	r0, #3
 c94:	00015b15 	andeq	r5, r1, r5, lsl fp
 c98:	aa050c00 	bge	143ca0 <startup-0x1febc360>
 c9c:	03000003 	movweq	r0, #3
 ca0:	00015b15 	andeq	r5, r1, r5, lsl fp
 ca4:	22051000 	andcs	r1, r5, #0
 ca8:	03000003 	movweq	r0, #3
 cac:	00021816 	andeq	r1, r2, r6, lsl r8
 cb0:	e0051400 	and	r1, r5, r0, lsl #8
 cb4:	03000003 	movweq	r0, #3
 cb8:	00021817 	andeq	r1, r2, r7, lsl r8
 cbc:	27051800 	strcs	r1, [r5, -r0, lsl #16]
 cc0:	03000003 	movweq	r0, #3
 cc4:	00021818 	andeq	r1, r2, r8, lsl r8
 cc8:	9b051c00 	blls	147cd0 <startup-0x1feb8330>
 ccc:	03000003 	movweq	r0, #3
 cd0:	00023319 	andeq	r3, r2, r9, lsl r3
 cd4:	0c002000 	stceq	0, cr2, [r0], {-0}
 cd8:	00000212 	andeq	r0, r0, r2, lsl r2
 cdc:	0002120d 	andeq	r1, r2, sp, lsl #4
 ce0:	040b0000 	streq	r0, [fp], #-0
 ce4:	0000018e 	andeq	r0, r0, lr, lsl #3
 ce8:	0207040b 	andeq	r0, r7, #184549376	; 0xb000000
 cec:	330c0000 	movwcc	r0, #49152	; 0xc000
 cf0:	0d000002 	stceq	0, cr0, [r0, #-8]
 cf4:	00000212 	andeq	r0, r0, r2, lsl r2
 cf8:	00015b0d 	andeq	r5, r1, sp, lsl #22
 cfc:	015b0d00 	cmpeq	fp, r0, lsl #26
 d00:	0b000000 	bleq	d08 <startup-0x1ffff2f8>
 d04:	00021e04 	andeq	r1, r2, r4, lsl #28
 d08:	04a80200 	strteq	r0, [r8], #512	; 0x200
 d0c:	1a030000 	bne	c0d14 <startup-0x1ff3f2ec>
 d10:	0000018e 	andeq	r0, r0, lr, lsl #3
 d14:	0004a702 	andeq	sl, r4, r2, lsl #14
 d18:	121a0300 	andsne	r0, sl, #0, 6
 d1c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 d20:	00000513 	andeq	r0, r0, r3, lsl r5
 d24:	01723901 	cmneq	r2, r1, lsl #18
 d28:	03050000 	movweq	r0, #20480	; 0x5000
 d2c:	20000dc4 	andcs	r0, r0, r4, asr #27
 d30:	0005390f 	andeq	r3, r5, pc, lsl #18
 d34:	393e0100 	ldmdbcc	lr!, {r8}
 d38:	05000002 	streq	r0, [r0, #-2]
 d3c:	000df803 	andeq	pc, sp, r3, lsl #16
 d40:	054f0f20 	strbeq	r0, [pc, #-3872]	; fffffe28 <string+0xdfffefe8>
 d44:	47010000 	strmi	r0, [r1, -r0]
 d48:	00000239 	andeq	r0, r0, r9, lsr r2
 d4c:	0e1c0305 	cdpeq	3, 1, cr0, cr12, cr5, {0}
 d50:	820e2000 	andhi	r2, lr, #0
 d54:	01000004 	tsteq	r0, r4
 d58:	00015b60 	andeq	r5, r1, r0, ror #22
 d5c:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
 d60:	1020000d 	eorne	r0, r0, sp
 d64:	61010073 	tstvs	r1, r3, ror r0
 d68:	000002a2 	andeq	r0, r0, r2, lsr #5
 d6c:	0dc00305 	stcleq	3, cr0, [r0, #20]
 d70:	040b2000 	streq	r2, [fp], #-0
 d74:	000002a8 	andeq	r0, r0, r8, lsr #5
 d78:	73080103 	movwvc	r0, #33027	; 0x8103
 d7c:	09000001 	stmdbeq	r0, {r0}
 d80:	000002a8 	andeq	r0, r0, r8, lsr #5
 d84:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
 d88:	0000300a 	andeq	r3, r0, sl
 d8c:	0e000600 	cfmadd32eq	mvax0, mvfx0, mvfx0, mvfx0
 d90:	0000050c 	andeq	r0, r0, ip, lsl #10
 d94:	02af6201 	adceq	r6, pc, #268435456	; 0x10000000
 d98:	03050000 	movweq	r0, #20480	; 0x5000
 d9c:	20000e40 	andcs	r0, r0, r0, asr #28
 da0:	00052111 	andeq	r2, r5, r1, lsl r1
 da4:	0c7d0100 	ldfeqe	f0, [sp], #-0
 da8:	b020000d 	eorlt	r0, r0, sp
 dac:	01000000 	mrseq	r0, (UNDEF: 0)
 db0:	0003329c 	muleq	r3, ip, r2
 db4:	00631200 	rsbeq	r1, r3, r0, lsl #4
 db8:	02a87f01 	adceq	r7, r8, #1, 30
 dbc:	91020000 	mrsls	r0, (UNDEF: 2)
 dc0:	0070126f 	rsbseq	r1, r0, pc, ror #4
 dc4:	02448101 	subeq	r8, r4, #1073741824	; 0x40000000
 dc8:	91020000 	mrsls	r0, (UNDEF: 2)
 dcc:	00611274 	rsbeq	r1, r1, r4, ror r2
 dd0:	02448201 	subeq	r8, r4, #268435456	; 0x10000000
 dd4:	91020000 	mrsls	r0, (UNDEF: 2)
 dd8:	0d2e1370 	stceq	3, cr1, [lr, #-448]!	; 0xfffffe40
 ddc:	00842000 	addeq	r2, r4, r0
 de0:	a9140000 	ldmdbge	r4, {}	; <UNPREDICTABLE>
 de4:	01000002 	tsteq	r0, r2
 de8:	00015b93 	muleq	r1, r3, fp
 dec:	00032300 	andeq	r2, r3, r0, lsl #6
 df0:	16001500 	strne	r1, [r0], -r0, lsl #10
 df4:	0000025d 	andeq	r0, r0, sp, asr r2
 df8:	015b9401 	cmpeq	fp, r1, lsl #8
 dfc:	00150000 	andseq	r0, r5, r0
 e00:	2f110000 	svccs	0x00110000
 e04:	01000005 	tsteq	r0, r5
 e08:	000c1064 	andeq	r1, ip, r4, rrx
 e0c:	0000fc20 	andeq	pc, r0, r0, lsr #24
 e10:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
 e14:	17000003 	strne	r0, [r0, -r3]
 e18:	64010070 	strvs	r0, [r1], #-112	; 0xffffff90
 e1c:	00000244 	andeq	r0, r0, r4, asr #4
 e20:	175c9102 	ldrbne	r9, [ip, -r2, lsl #2]
 e24:	64010061 	strvs	r0, [r1], #-97	; 0xffffff9f
 e28:	00000244 	andeq	r0, r0, r4, asr #4
 e2c:	13589102 	cmpne	r8, #-2147483648	; 0x80000000
 e30:	20000c82 	andcs	r0, r0, r2, lsl #25
 e34:	00000074 	andeq	r0, r0, r4, ror r0
 e38:	00050c0f 	andeq	r0, r5, pc, lsl #24
 e3c:	866d0100 	strbthi	r0, [sp], -r0, lsl #2
 e40:	02000003 	andeq	r0, r0, #3
 e44:	70126491 	mulsvc	r2, r1, r4
 e48:	01007374 	tsteq	r0, r4, ror r3
 e4c:	0002a874 	andeq	sl, r2, r4, ror r8
 e50:	6f910200 	svcvs	0x00910200
 e54:	a8090000 	stmdage	r9, {}	; <UNPREDICTABLE>
 e58:	96000002 	strls	r0, [r0], -r2
 e5c:	0a000003 	beq	e70 <startup-0x1ffff190>
 e60:	00000030 	andeq	r0, r0, r0, lsr r0
 e64:	26180007 	ldrcs	r0, [r8], -r7
 e68:	01000005 	tsteq	r0, r5
 e6c:	000bd851 	andeq	sp, fp, r1, asr r8
 e70:	00003820 	andeq	r3, r0, r0, lsr #16
 e74:	119c0100 	orrsne	r0, ip, r0, lsl #2
 e78:	00000500 	andeq	r0, r0, r0, lsl #10
 e7c:	0b402501 	bleq	100a288 <startup-0x1eff5d78>
 e80:	00982000 	addseq	r2, r8, r0
 e84:	9c010000 	stcls	0, cr0, [r1], {-0}
 e88:	000003c9 	andeq	r0, r0, r9, asr #7
 e8c:	01006f17 	tsteq	r0, r7, lsl pc
 e90:	00024425 	andeq	r4, r2, r5, lsr #8
 e94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 e98:	053e1900 	ldreq	r1, [lr, #-2304]!	; 0xfffff700
 e9c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
 ea0:	20000b20 	andcs	r0, r0, r0, lsr #22
 ea4:	00000020 	andeq	r0, r0, r0, lsr #32
 ea8:	04079c01 	streq	r9, [r7], #-3073	; 0xfffff3ff
 eac:	6f170000 	svcvs	0x00170000
 eb0:	44180100 	ldrmi	r0, [r8], #-256	; 0xffffff00
 eb4:	02000002 	andeq	r0, r0, #2
 eb8:	551a7491 	ldrpl	r7, [sl, #-1169]	; 0xfffffb6f
 ebc:	01000005 	tsteq	r0, r5
 ec0:	00015b18 	andeq	r5, r1, r8, lsl fp
 ec4:	70910200 	addsvc	r0, r1, r0, lsl #4
 ec8:	00055c1a 	andeq	r5, r5, sl, lsl ip
 ecc:	5b180100 	blpl	6012d4 <startup-0x1f9fed2c>
 ed0:	02000001 	andeq	r0, r0, #1
 ed4:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
 ed8:	000004c4 	andeq	r0, r0, r4, asr #9
 edc:	00000e01 	andeq	r0, r0, r1, lsl #28
 ee0:	000c2000 	andeq	r2, ip, r0
 ee4:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	0b0b0113 	bleq	2c0480 <startup-0x1fd3fb80>
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	00001301 	andeq	r1, r0, r1, lsl #6
  38:	03000d05 	movweq	r0, #3333	; 0xd05
  3c:	3b0b3a0e 	blcc	2ce87c <startup-0x1fd31784>
  40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  44:	0600000b 	streq	r0, [r0], -fp
  48:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  54:	06120111 			; <UNDEFINED> instruction: 0x06120111
  58:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  5c:	07000019 	smladeq	r0, r9, r0, r0
  60:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  64:	0b3a0e03 	bleq	e83878 <startup-0x1f17c788>
  68:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  70:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  74:	00130119 	andseq	r0, r3, r9, lsl r1
  78:	00050800 	andeq	r0, r5, r0, lsl #16
  7c:	0b3a0803 	bleq	e82090 <startup-0x1f17df70>
  80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  84:	00001802 	andeq	r1, r0, r2, lsl #16
  88:	03003409 	movweq	r3, #1033	; 0x409
  8c:	3b0b3a0e 	blcc	2ce8cc <startup-0x1fd31734>
  90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  94:	0a000018 	beq	fc <startup-0x1fffff04>
  98:	0b0b0024 	bleq	2c0130 <startup-0x1fd3fed0>
  9c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  a0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  a4:	03193f01 	tsteq	r9, #1, 30
  a8:	3b0b3a0e 	blcc	2ce8e8 <startup-0x1fd31718>
  ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  b4:	96184006 	ldrls	r4, [r8], -r6
  b8:	13011942 	movwne	r1, #6466	; 0x1942
  bc:	340c0000 	strcc	r0, [ip], #-0
  c0:	3a080300 	bcc	200cc8 <startup-0x1fdff338>
  c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c8:	00180213 	andseq	r0, r8, r3, lsl r2
  cc:	00050d00 	andeq	r0, r5, r0, lsl #26
  d0:	0b3a0e03 	bleq	e838e4 <startup-0x1f17c71c>
  d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d8:	00001802 	andeq	r1, r0, r2, lsl #16
  dc:	3f012e0e 	svccc	0x00012e0e
  e0:	3a0e0319 	bcc	380d4c <startup-0x1fc7f2b4>
  e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  ec:	97184006 	ldrls	r4, [r8, -r6]
  f0:	13011942 	movwne	r1, #6466	; 0x1942
  f4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  f8:	03193f01 	tsteq	r9, #1, 30
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	1119270b 	tstne	r9, fp, lsl #14
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 114:	0e030b13 	vmoveq.32	d3[0], r0
 118:	01110e1b 	tsteq	r1, fp, lsl lr
 11c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 120:	16020000 	strne	r0, [r2], -r0
 124:	3a0e0300 	bcc	380d2c <startup-0x1fc7f2d4>
 128:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 12c:	03000013 	movweq	r0, #19
 130:	0b0b0024 	bleq	2c01c8 <startup-0x1fd3fe38>
 134:	0e030b3e 	vmoveq.16	d3[0], r0
 138:	13040000 	movwne	r0, #16384	; 0x4000
 13c:	3a0b0b01 	bcc	2c2d48 <startup-0x1fd3d2b8>
 140:	010b3b0b 	tsteq	fp, fp, lsl #22
 144:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 148:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 14c:	0b3b0b3a 	bleq	ec2e3c <startup-0x1f13d1c4>
 150:	0b381349 	bleq	e04e7c <startup-0x1f1fb184>
 154:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 158:	03193f01 	tsteq	r9, #1, 30
 15c:	3b0b3a0e 	blcc	2ce99c <startup-0x1fd31664>
 160:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 164:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 168:	97184006 	ldrls	r4, [r8, -r6]
 16c:	13011942 	movwne	r1, #6466	; 0x1942
 170:	34070000 	strcc	r0, [r7], #-0
 174:	3a080300 	bcc	200d7c <startup-0x1fdff284>
 178:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 17c:	00180213 	andseq	r0, r8, r3, lsl r2
 180:	00240800 	eoreq	r0, r4, r0, lsl #16
 184:	0b3e0b0b 	bleq	f82db8 <startup-0x1f07d248>
 188:	00000803 	andeq	r0, r0, r3, lsl #16
 18c:	3f012e09 	svccc	0x00012e09
 190:	3a0e0319 	bcc	380dfc <startup-0x1fc7f204>
 194:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 198:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 19c:	97184006 	ldrls	r4, [r8, -r6]
 1a0:	13011942 	movwne	r1, #6466	; 0x1942
 1a4:	050a0000 	streq	r0, [sl, #-0]
 1a8:	3a080300 	bcc	200db0 <startup-0x1fdff250>
 1ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1b0:	00180213 	andseq	r0, r8, r3, lsl r2
 1b4:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 1b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1bc:	0b3b0b3a 	bleq	ec2eac <startup-0x1f13d154>
 1c0:	13491927 	movtne	r1, #39207	; 0x9927
 1c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1cc:	00130119 	andseq	r0, r3, r9, lsl r1
 1d0:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 1d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1d8:	0b3b0b3a 	bleq	ec2ec8 <startup-0x1f13d138>
 1dc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 1e0:	00001301 	andeq	r1, r0, r1, lsl #6
 1e4:	0000180d 	andeq	r1, r0, sp, lsl #16
 1e8:	010b0e00 	tsteq	fp, r0, lsl #28
 1ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 1f4:	03193f01 	tsteq	r9, #1, 30
 1f8:	3b0b3a0e 	blcc	2cea38 <startup-0x1fd315c8>
 1fc:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 200:	10000019 	andne	r0, r0, r9, lsl r0
 204:	13490101 	movtne	r0, #37121	; 0x9101
 208:	21110000 	tstcs	r1, r0
 20c:	2f134900 	svccs	0x00134900
 210:	0000000b 	andeq	r0, r0, fp
 214:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 218:	030b130e 	movweq	r1, #45838	; 0xb30e
 21c:	110e1b0e 	tstne	lr, lr, lsl #22
 220:	10061201 	andne	r1, r6, r1, lsl #4
 224:	02000017 	andeq	r0, r0, #23
 228:	0b0b0024 	bleq	2c02c0 <startup-0x1fd3fd40>
 22c:	0e030b3e 	vmoveq.16	d3[0], r0
 230:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 234:	03193f00 	tsteq	r9, #0, 30
 238:	3b0b3a0e 	blcc	2cea78 <startup-0x1fd31588>
 23c:	1119270b 	tstne	r9, fp, lsl #14
 240:	40061201 	andmi	r1, r6, r1, lsl #4
 244:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 248:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 24c:	03193f01 	tsteq	r9, #1, 30
 250:	3b0b3a0e 	blcc	2cea90 <startup-0x1fd31570>
 254:	1119270b 	tstne	r9, fp, lsl #14
 258:	40061201 	andmi	r1, r6, r1, lsl #4
 25c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 260:	00001301 	andeq	r1, r0, r1, lsl #6
 264:	03003405 	movweq	r3, #1029	; 0x405
 268:	3b0b3a0e 	blcc	2ceaa8 <startup-0x1fd31558>
 26c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 270:	06000018 			; <UNDEFINED> instruction: 0x06000018
 274:	08030005 	stmdaeq	r3, {r0, r2}
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 280:	24070000 	strcs	r0, [r7], #-0
 284:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 288:	0008030b 	andeq	r0, r8, fp, lsl #6
 28c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 290:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 294:	0b3b0b3a 	bleq	ec2f84 <startup-0x1f13d07c>
 298:	01111927 	tsteq	r1, r7, lsr #18
 29c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a0:	00194297 	mulseq	r9, r7, r2
 2a4:	11010000 	mrsne	r0, (UNDEF: 1)
 2a8:	130e2501 	movwne	r2, #58625	; 0xe501
 2ac:	1b0e030b 	blne	380ee0 <startup-0x1fc7f120>
 2b0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 2b4:	00171006 	andseq	r1, r7, r6
 2b8:	00160200 	andseq	r0, r6, r0, lsl #4
 2bc:	0b3a0e03 	bleq	e83ad0 <startup-0x1f17c530>
 2c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2c4:	24030000 	strcs	r0, [r3], #-0
 2c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2cc:	000e030b 	andeq	r0, lr, fp, lsl #6
 2d0:	01130400 	tsteq	r3, r0, lsl #8
 2d4:	0b3a0b0b 	bleq	e82f08 <startup-0x1f17d0f8>
 2d8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 2dc:	0d050000 	stceq	0, cr0, [r5, #-0]
 2e0:	3a0e0300 	bcc	380ee8 <startup-0x1fc7f118>
 2e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e8:	000b3813 	andeq	r3, fp, r3, lsl r8
 2ec:	01130600 	tsteq	r3, r0, lsl #12
 2f0:	0b0b0e03 	bleq	2c3b04 <startup-0x1fd3c4fc>
 2f4:	0b3b0b3a 	bleq	ec2fe4 <startup-0x1f13d01c>
 2f8:	00001301 	andeq	r1, r0, r1, lsl #6
 2fc:	03000d07 	movweq	r0, #3335	; 0xd07
 300:	3b0b3a08 	blcc	2ceb28 <startup-0x1fd314d8>
 304:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 308:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 30c:	0b0b0024 	bleq	2c03a4 <startup-0x1fd3fc5c>
 310:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 314:	01090000 	mrseq	r0, (UNDEF: 9)
 318:	01134901 	tsteq	r3, r1, lsl #18
 31c:	0a000013 	beq	370 <startup-0x1ffffc90>
 320:	13490021 	movtne	r0, #36897	; 0x9021
 324:	00000b2f 	andeq	r0, r0, pc, lsr #22
 328:	0b000f0b 	bleq	3f5c <startup-0x1fffc0a4>
 32c:	0013490b 	andseq	r4, r3, fp, lsl #18
 330:	01150c00 	tsteq	r5, r0, lsl #24
 334:	13011927 	movwne	r1, #6439	; 0x1927
 338:	050d0000 	streq	r0, [sp, #-0]
 33c:	00134900 	andseq	r4, r3, r0, lsl #18
 340:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 344:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 348:	0b3b0b3a 	bleq	ec3038 <startup-0x1f13cfc8>
 34c:	01111927 	tsteq	r1, r7, lsr #18
 350:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 354:	01194296 			; <UNDEFINED> instruction: 0x01194296
 358:	0f000013 	svceq	0x00000013
 35c:	08030005 	stmdaeq	r3, {r0, r2}
 360:	0b3b0b3a 	bleq	ec3050 <startup-0x1f13cfb0>
 364:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 368:	34100000 	ldrcc	r0, [r0], #-0
 36c:	3a080300 	bcc	200f74 <startup-0x1fdff08c>
 370:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 374:	00180213 	andseq	r0, r8, r3, lsl r2
 378:	00341100 	eorseq	r1, r4, r0, lsl #2
 37c:	0b3a0e03 	bleq	e83b90 <startup-0x1f17c470>
 380:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 384:	00001802 	andeq	r1, r0, r2, lsl #16
 388:	11010b12 	tstne	r1, r2, lsl fp
 38c:	00061201 	andeq	r1, r6, r1, lsl #4
 390:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 394:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 398:	0b3b0b3a 	bleq	ec3088 <startup-0x1f13cf78>
 39c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 3a0:	00001301 	andeq	r1, r0, r1, lsl #6
 3a4:	00001814 	andeq	r1, r0, r4, lsl r8
 3a8:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 3ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3b0:	0b3b0b3a 	bleq	ec30a0 <startup-0x1f13cf60>
 3b4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 3b8:	05160000 	ldreq	r0, [r6, #-0]
 3bc:	3a0e0300 	bcc	380fc4 <startup-0x1fc7f03c>
 3c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3c4:	00180213 	andseq	r0, r8, r3, lsl r2
 3c8:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 3cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3d0:	0b3b0b3a 	bleq	ec30c0 <startup-0x1f13cf40>
 3d4:	01111927 	tsteq	r1, r7, lsr #18
 3d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3e0:	18000013 	stmdane	r0, {r0, r1, r4}
 3e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3e8:	0b3a0e03 	bleq	e83bfc <startup-0x1f17c404>
 3ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3f0:	01111349 	tsteq	r1, r9, asr #6
 3f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3f8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 3fc:	19000013 	stmdbne	r0, {r0, r1, r4}
 400:	08030034 	stmdaeq	r3, {r2, r4, r5}
 404:	0b3b0b3a 	bleq	ec30f4 <startup-0x1f13cf0c>
 408:	00001349 	andeq	r1, r0, r9, asr #6
 40c:	03012e1a 	movweq	r2, #7706	; 0x1e1a
 410:	3b0b3a0e 	blcc	2cec50 <startup-0x1fd313b0>
 414:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 418:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 41c:	96184006 	ldrls	r4, [r8], -r6
 420:	13011942 	movwne	r1, #6466	; 0x1942
 424:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 428:	3a0e0301 	bcc	381034 <startup-0x1fc7efcc>
 42c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 430:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 434:	96184006 	ldrls	r4, [r8], -r6
 438:	00001942 	andeq	r1, r0, r2, asr #18
 43c:	01110100 	tsteq	r1, r0, lsl #2
 440:	0b130e25 	bleq	4c3cdc <startup-0x1fb3c324>
 444:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 448:	01111755 	tsteq	r1, r5, asr r7
 44c:	00001710 	andeq	r1, r0, r0, lsl r7
 450:	03001602 	movweq	r1, #1538	; 0x602
 454:	3b0b3a0e 	blcc	2cec94 <startup-0x1fd3136c>
 458:	0013490b 	andseq	r4, r3, fp, lsl #18
 45c:	00240300 	eoreq	r0, r4, r0, lsl #6
 460:	0b3e0b0b 	bleq	f83094 <startup-0x1f07cf6c>
 464:	00000e03 	andeq	r0, r0, r3, lsl #28
 468:	0b011304 	bleq	45080 <startup-0x1ffbaf80>
 46c:	3b0b3a0b 	blcc	2ceca0 <startup-0x1fd31360>
 470:	0013010b 	andseq	r0, r3, fp, lsl #2
 474:	000d0500 	andeq	r0, sp, r0, lsl #10
 478:	0b3a0e03 	bleq	e83c8c <startup-0x1f17c374>
 47c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 480:	00000b38 	andeq	r0, r0, r8, lsr fp
 484:	03011306 	movweq	r1, #4870	; 0x1306
 488:	3a0b0b0e 	bcc	2c30c8 <startup-0x1fd3cf38>
 48c:	010b3b0b 	tsteq	fp, fp, lsl #22
 490:	07000013 	smladeq	r0, r3, r0, r0
 494:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 498:	0b3b0b3a 	bleq	ec3188 <startup-0x1f13ce78>
 49c:	0b381349 	bleq	e051c8 <startup-0x1f1fae38>
 4a0:	24080000 	strcs	r0, [r8], #-0
 4a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4a8:	0008030b 	andeq	r0, r8, fp, lsl #6
 4ac:	01010900 	tsteq	r1, r0, lsl #18
 4b0:	13011349 	movwne	r1, #4937	; 0x1349
 4b4:	210a0000 	mrscs	r0, (UNDEF: 10)
 4b8:	2f134900 	svccs	0x00134900
 4bc:	0b00000b 	bleq	4f0 <startup-0x1ffffb10>
 4c0:	0b0b000f 	bleq	2c0504 <startup-0x1fd3fafc>
 4c4:	00001349 	andeq	r1, r0, r9, asr #6
 4c8:	2701150c 	strcs	r1, [r1, -ip, lsl #10]
 4cc:	00130119 	andseq	r0, r3, r9, lsl r1
 4d0:	00050d00 	andeq	r0, r5, r0, lsl #26
 4d4:	00001349 	andeq	r1, r0, r9, asr #6
 4d8:	0300340e 	movweq	r3, #1038	; 0x40e
 4dc:	3b0b3a0e 	blcc	2ced1c <startup-0x1fd312e4>
 4e0:	3f13490b 	svccc	0x0013490b
 4e4:	00180219 	andseq	r0, r8, r9, lsl r2
 4e8:	00340f00 	eorseq	r0, r4, r0, lsl #30
 4ec:	0b3a0e03 	bleq	e83d00 <startup-0x1f17c300>
 4f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4f4:	00001802 	andeq	r1, r0, r2, lsl #16
 4f8:	03003410 	movweq	r3, #1040	; 0x410
 4fc:	3b0b3a08 	blcc	2ced24 <startup-0x1fd312dc>
 500:	3f13490b 	svccc	0x0013490b
 504:	00180219 	andseq	r0, r8, r9, lsl r2
 508:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 50c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 510:	0b3b0b3a 	bleq	ec3200 <startup-0x1f13ce00>
 514:	01111927 	tsteq	r1, r7, lsr #18
 518:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 51c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 520:	12000013 	andne	r0, r0, #19
 524:	08030034 	stmdaeq	r3, {r2, r4, r5}
 528:	0b3b0b3a 	bleq	ec3218 <startup-0x1f13cde8>
 52c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 530:	0b130000 	bleq	4c0538 <startup-0x1fb3fac8>
 534:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 538:	14000006 	strne	r0, [r0], #-6
 53c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 540:	0b3a0e03 	bleq	e83d54 <startup-0x1f17c2ac>
 544:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 548:	1301193c 	movwne	r1, #6460	; 0x193c
 54c:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
 550:	16000000 	strne	r0, [r0], -r0
 554:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 558:	0b3a0e03 	bleq	e83d6c <startup-0x1f17c294>
 55c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 560:	0000193c 	andeq	r1, r0, ip, lsr r9
 564:	03000517 	movweq	r0, #1303	; 0x517
 568:	3b0b3a08 	blcc	2ced90 <startup-0x1fd31270>
 56c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 570:	18000018 	stmdane	r0, {r3, r4}
 574:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 578:	0b3a0e03 	bleq	e83d8c <startup-0x1f17c274>
 57c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 580:	06120111 			; <UNDEFINED> instruction: 0x06120111
 584:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 588:	19000019 	stmdbne	r0, {r0, r3, r4}
 58c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 590:	0b3a0e03 	bleq	e83da4 <startup-0x1f17c25c>
 594:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 598:	06120111 			; <UNDEFINED> instruction: 0x06120111
 59c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5a0:	00130119 	andseq	r0, r3, r9, lsl r1
 5a4:	00051a00 	andeq	r1, r5, r0, lsl #20
 5a8:	0b3a0e03 	bleq	e83dbc <startup-0x1f17c244>
 5ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5b0:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002e8 	andeq	r0, r0, r8, ror #5
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02a70002 	adceq	r0, r7, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200002f8 	strdcs	r0, [r0], -r8
  34:	00000110 	andeq	r0, r0, r0, lsl r1
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	04750002 	ldrbteq	r0, [r5], #-2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000408 	andcs	r0, r0, r8, lsl #8
  54:	0000009a 	muleq	r0, sl, r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	052e0002 	streq	r0, [lr, #-2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200004a4 	andcs	r0, r0, r4, lsr #9
  74:	0000067c 	andeq	r0, r0, ip, ror r6
	...
  80:	00000024 	andeq	r0, r0, r4, lsr #32
  84:	0ad00002 	beq	ff400094 <string+0xdf3ff254>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20000b20 	andcs	r0, r0, r0, lsr #22
  94:	0000029c 	muleq	r0, ip, r2
  98:	20000000 	andcs	r0, r0, r0
  9c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000d9 	ldrdeq	r0, [r0], -r9
   4:	00540002 	subseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
  28:	6f442f61 	svcvs	0x00442f61
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; ffffff18 <string+0xdffff0d8>
  38:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; ffffff04 <string+0xdffff0c4>
  3c:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
  40:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  44:	73610000 	cmnvc	r1, #0
  48:	2e696963 	vnmulcs.f16	s13, s18, s7	; <UNPREDICTABLE>
  4c:	00010063 	andeq	r0, r1, r3, rrx
  50:	672f2e00 	strvs	r2, [pc, -r0, lsl #28]!
  54:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
  58:	00000068 	andeq	r0, r0, r8, rrx
  5c:	05000000 	streq	r0, [r0, #-0]
  60:	00001002 	andeq	r1, r0, r2
  64:	59681620 	stmdbpl	r8!, {r5, r9, sl, ip}^
  68:	687759ad 	ldmdavs	r7!, {r0, r2, r3, r5, r7, r8, fp, ip, lr}^
  6c:	694be559 	stmdbvs	fp, {r0, r3, r4, r6, r8, sl, sp, lr, pc}^
  70:	2f4b3d67 	svccs	0x004b3d67
  74:	3d3e693d 			; <UNDEFINED> instruction: 0x3d3e693d
  78:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
  7c:	3d677730 	stclcc	7, cr7, [r7, #-192]!	; 0xffffff40
  80:	674d5a3d 	smlaldxvs	r5, sp, sp, sl
  84:	4f593d3d 	svcmi	0x00593d3d
  88:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
  8c:	a12f6759 			; <UNDEFINED> instruction: 0xa12f6759
  90:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
  94:	a12f6759 			; <UNDEFINED> instruction: 0xa12f6759
  98:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
  9c:	06200601 	strteq	r0, [r0], -r1, lsl #12
  a0:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
  a4:	3e3d5a4d 	vsubcc.f32	s10, s26, s26
  a8:	2f4d913e 	svccs	0x004d913e
  ac:	01040200 	mrseq	r0, R12_usr
  b0:	83062006 	movwhi	r2, #24582	; 0x6006
  b4:	003e3d3d 	eorseq	r3, lr, sp, lsr sp
  b8:	06010402 	streq	r0, [r1], -r2, lsl #8
  bc:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
  c0:	02003e3d 	andeq	r3, r0, #976	; 0x3d0
  c4:	20060104 	andcs	r0, r6, r4, lsl #2
  c8:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
  cc:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  d0:	06200601 	strteq	r0, [r0], -r1, lsl #12
  d4:	3d3d3d83 	ldccc	13, cr3, [sp, #-524]!	; 0xfffffdf4
  d8:	01000302 	tsteq	r0, r2, lsl #6
  dc:	0000ac01 	andeq	sl, r0, r1, lsl #24
  e0:	53000200 	movwpl	r0, #512	; 0x200
  e4:	02000000 	andeq	r0, r0, #0
  e8:	0d0efb01 	vstreq	d15, [lr, #-4]
  ec:	01010100 	mrseq	r0, (UNDEF: 17)
  f0:	00000001 	andeq	r0, r0, r1
  f4:	01000001 	tsteq	r0, r1
  f8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6bd <string+0xdfffe87d>
  fc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 100:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 104:	442f6169 	strtmi	r6, [pc], #-361	; 10c <startup-0x1ffffef4>
 108:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 10c:	73746e65 	cmnvc	r4, #1616	; 0x650
 110:	2f54492f 	svccs	0x0054492f
 114:	2f504f4d 	svccs	0x00504f4d
 118:	2f504f4d 	svccs	0x00504f4d
 11c:	6b616e73 	blvs	185baf0 <startup-0x1e7a4510>
 120:	6b000065 	blvs	2bc <startup-0x1ffffd44>
 124:	2e627965 	vnmulcs.f16	s15, s4, s11	; <UNPREDICTABLE>
 128:	00010063 	andeq	r0, r1, r3, rrx
 12c:	672f2e00 	strvs	r2, [pc, -r0, lsl #28]!
 130:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 134:	00000068 	andeq	r0, r0, r8, rrx
 138:	05000000 	streq	r0, [r0, #-0]
 13c:	0002f802 	andeq	pc, r2, r2, lsl #16
 140:	683d1520 	ldmdavs	sp!, {r5, r8, sl, ip}
 144:	3d4b4b3d 	vstrcc	d20, [fp, #-244]	; 0xffffff0c
 148:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 14c:	02008b02 	andeq	r8, r0, #2048	; 0x800
 150:	3c060104 	stfccs	f0, [r6], {4}
 154:	003d4406 	eorseq	r4, sp, r6, lsl #8
 158:	21010402 	tstcs	r1, r2, lsl #8
 15c:	4b924b77 	blmi	fe492f40 <string+0xde492100>
 160:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 164:	004b3e92 	umaaleq	r3, fp, r2, lr
 168:	06010402 	streq	r0, [r1], -r2, lsl #8
 16c:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 170:	06010402 	streq	r0, [r1], -r2, lsl #8
 174:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 178:	06010402 	streq	r0, [r1], -r2, lsl #8
 17c:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 180:	06010402 	streq	r0, [r1], -r2, lsl #8
 184:	212f0658 			; <UNDEFINED> instruction: 0x212f0658
 188:	01000602 	tsteq	r0, r2, lsl #12
 18c:	00007a01 	andeq	r7, r0, r1, lsl #20
 190:	48000200 	stmdami	r0, {r9}
 194:	02000000 	andeq	r0, r0, #0
 198:	0d0efb01 	vstreq	d15, [lr, #-4]
 19c:	01010100 	mrseq	r0, (UNDEF: 17)
 1a0:	00000001 	andeq	r0, r0, r1
 1a4:	01000001 	tsteq	r0, r1
 1a8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff76d <string+0xdfffe92d>
 1ac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1b0:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 1b4:	442f6169 	strtmi	r6, [pc], #-361	; 1bc <startup-0x1ffffe44>
 1b8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1bc:	73746e65 	cmnvc	r4, #1616	; 0x650
 1c0:	2f54492f 	svccs	0x0054492f
 1c4:	2f504f4d 	svccs	0x00504f4d
 1c8:	2f504f4d 	svccs	0x00504f4d
 1cc:	6b616e73 	blvs	185bba0 <startup-0x1e7a4460>
 1d0:	64000065 	strvs	r0, [r0], #-101	; 0xffffff9b
 1d4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1d8:	0100632e 	tsteq	r0, lr, lsr #6
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	04080205 	streq	r0, [r8], #-517	; 0xfffffdfb
 1e4:	4b162000 	blmi	5881ec <startup-0x1fa77e14>
 1e8:	4d433725 	stclmi	7, cr3, [r3, #-148]	; 0xffffff6c
 1ec:	7803284b 	stmdavc	r3, {r0, r1, r3, r6, fp, sp}
 1f0:	3c0a033c 	stccc	3, cr0, [sl], {60}	; 0x3c
 1f4:	3d3d3d4d 	ldccc	13, cr3, [sp, #-308]!	; 0xfffffecc
 1f8:	00673d3d 	rsbeq	r3, r7, sp, lsr sp
 1fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 200:	3e670620 	cdpcc	6, 6, cr0, cr7, cr0, {1}
 204:	030233af 	movweq	r3, #9135	; 0x23af
 208:	86010100 	strhi	r0, [r1], -r0, lsl #2
 20c:	02000001 	andeq	r0, r0, #1
 210:	00006500 	andeq	r6, r0, r0, lsl #10
 214:	fb010200 	blx	40a1e <startup-0x1ffbf5e2>
 218:	01000d0e 	tsteq	r0, lr, lsl #26
 21c:	00010101 	andeq	r0, r1, r1, lsl #2
 220:	00010000 	andeq	r0, r1, r0
 224:	3a430100 	bcc	10c062c <startup-0x1ef3f9d4>
 228:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 22c:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 6c <startup-0x1fffff94>
 230:	61697261 	cmnvs	r9, r1, ror #4
 234:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 238:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 23c:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 240:	4f4d2f54 	svcmi	0x004d2f54
 244:	4f4d2f50 	svcmi	0x004d2f50
 248:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 24c:	00656b61 	rsbeq	r6, r5, r1, ror #22
 250:	61726700 	cmnvs	r2, r0, lsl #14
 254:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 258:	0100632e 	tsteq	r0, lr, lsr #6
 25c:	2f2e0000 	svccs	0x002e0000
 260:	6f697067 	svcvs	0x00697067
 264:	0000682e 	andeq	r6, r0, lr, lsr #16
 268:	2f2e0000 	svccs	0x002e0000
 26c:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0xfffffb8d
 270:	2e737463 	cdpcs	4, 7, cr7, cr3, cr3, {3}
 274:	00000068 	andeq	r0, r0, r8, rrx
 278:	05000000 	streq	r0, [r0, #-0]
 27c:	0004a402 	andeq	sl, r4, r2, lsl #8
 280:	3d3e1720 	ldccc	7, cr1, [lr, #-128]!	; 0xffffff80
 284:	323d3d3d 	eorscc	r3, sp, #3904	; 0xf40
 288:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 28c:	2327452f 			; <UNDEFINED> instruction: 0x2327452f
 290:	3d68af3d 	stclcc	15, cr10, [r8, #-244]!	; 0xffffff0c
 294:	2f593d3d 	svccs	0x00593d3d
 298:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 29c:	303d593e 	eorscc	r5, sp, lr, lsr r9
 2a0:	3d303d5a 	ldccc	13, cr3, [r0, #-360]!	; 0xfffffe98
 2a4:	594b92af 	stmdbpl	fp, {r0, r1, r2, r3, r5, r7, r9, ip, pc}^
 2a8:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 2ac:	5a303d59 	bpl	c0f818 <startup-0x1f3f07e8>
 2b0:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 2b4:	3d91773d 	ldccc	7, cr7, [r1, #244]	; 0xf4
 2b8:	4d833d59 	stcmi	13, cr3, [r3, #356]	; 0x164
 2bc:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 2c0:	674d833d 	smlaldxvs	r8, sp, sp, r3
 2c4:	684d6759 	stmdavs	sp, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
 2c8:	694bc959 	stmdbvs	fp, {r0, r3, r4, r6, r8, fp, lr, pc}^
 2cc:	59c95968 	stmibpl	r9, {r3, r5, r6, r8, fp, ip, lr}^
 2d0:	10036777 	andne	r6, r3, r7, ror r7
 2d4:	20700374 	rsbscs	r0, r0, r4, ror r3
 2d8:	034a1003 	movteq	r1, #40963	; 0xa003
 2dc:	223d2072 	eorscs	r2, sp, #114	; 0x72
 2e0:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 2e4:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 2e8:	3d3d2f4d 	ldccc	15, cr2, [sp, #-308]!	; 0xfffffecc
 2ec:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 2f0:	4b4b4b4b 	blmi	12d3024 <startup-0x1ed2cfdc>
 2f4:	3d3f3d4b 	ldccc	13, cr3, [pc, #-300]!	; 1d0 <startup-0x1ffffe30>
 2f8:	004b9f3e 	subeq	r9, fp, lr, lsr pc
 2fc:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 300:	03040200 	movweq	r0, #16896	; 0x4200
 304:	04020048 	streq	r0, [r2], #-72	; 0xffffffb8
 308:	003c0601 	eorseq	r0, ip, r1, lsl #12
 30c:	06020402 	streq	r0, [r2], -r2, lsl #8
 310:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
 314:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 318:	4d3c0903 			; <UNDEFINED> instruction: 0x4d3c0903
 31c:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 320:	004a0601 	subeq	r0, sl, r1, lsl #12
 324:	4a020402 	bmi	81334 <startup-0x1ff7eccc>
 328:	03040200 	movweq	r0, #16896	; 0x4200
 32c:	764c064a 	strbvc	r0, [ip], -sl, asr #12
 330:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
 334:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 338:	683d5b59 	ldmdavs	sp!, {r0, r3, r4, r6, r8, r9, fp, ip, lr}
 33c:	4b4c4b3d 	blmi	1313038 <startup-0x1ececfc8>
 340:	91c9c93f 	bicls	ip, r9, pc, lsr r9
 344:	92a03dbc 	adcls	r3, r0, #188, 26	; 0x2f00
 348:	03ac5c03 			; <UNDEFINED> instruction: 0x03ac5c03
 34c:	4c852025 	stcmi	0, cr2, [r5], {37}	; 0x25
 350:	0402006b 	streq	r0, [r2], #-107	; 0xffffff95
 354:	02005a03 	andeq	r5, r0, #12288	; 0x3000
 358:	13080304 	movwne	r0, #33540	; 0x8304
 35c:	03040200 	movweq	r0, #16896	; 0x4200
 360:	040200f5 	streq	r0, [r2], #-245	; 0xffffff0b
 364:	827a0303 	rsbshi	r0, sl, #201326592	; 0xc000000
 368:	01040200 	mrseq	r0, R12_usr
 36c:	8a065806 	bhi	19638c <startup-0x1fe69c74>
 370:	00694c4d 	rsbeq	r4, r9, sp, asr #24
 374:	59030402 	stmdbpl	r3, {r1, sl}
 378:	03040200 	movweq	r0, #16896	; 0x4200
 37c:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 380:	00f30304 	rscseq	r0, r3, r4, lsl #6
 384:	7f030402 	svcvc	0x00030402
 388:	01040200 	mrseq	r0, R12_usr
 38c:	87065806 	strhi	r5, [r6, -r6, lsl #16]
 390:	01000402 	tsteq	r0, r2, lsl #8
 394:	0000cc01 	andeq	ip, r0, r1, lsl #24
 398:	65000200 	strvs	r0, [r0, #-512]	; 0xfffffe00
 39c:	02000000 	andeq	r0, r0, #0
 3a0:	0d0efb01 	vstreq	d15, [lr, #-4]
 3a4:	01010100 	mrseq	r0, (UNDEF: 17)
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	01000001 	tsteq	r0, r1
 3b0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff975 <string+0xdfffeb35>
 3b4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3b8:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 3bc:	442f6169 	strtmi	r6, [pc], #-361	; 3c4 <startup-0x1ffffc3c>
 3c0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 3c4:	73746e65 	cmnvc	r4, #1616	; 0x650
 3c8:	2f54492f 	svccs	0x0054492f
 3cc:	2f504f4d 	svccs	0x00504f4d
 3d0:	2f504f4d 	svccs	0x00504f4d
 3d4:	6b616e73 	blvs	185bda8 <startup-0x1e7a4258>
 3d8:	73000065 	movwvc	r0, #101	; 0x65
 3dc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 3e0:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 3e4:	00000100 	andeq	r0, r0, r0, lsl #2
 3e8:	70672f2e 	rsbvc	r2, r7, lr, lsr #30
 3ec:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xfffff0d2
 3f8:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
 3fc:	00682e73 	rsbeq	r2, r8, r3, ror lr
 400:	00000000 	andeq	r0, r0, r0
 404:	00020500 	andeq	r0, r2, r0, lsl #10
 408:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 40c:	5e13010e 	mufpls	f0, f3, #0.5
 410:	01000302 	tsteq	r0, r2, lsl #6
 414:	02050001 	andeq	r0, r5, #1
 418:	20000b20 	andcs	r0, r0, r0, lsr #22
 41c:	67011703 	strvs	r1, [r1, -r3, lsl #14]
 420:	3c09033d 	stccc	3, cr0, [r9], {61}	; 0x3d
 424:	754b4b4c 	strbvc	r4, [fp, #-2892]	; 0xfffff4b4
 428:	91764b76 	cmnls	r6, r6, ror fp
 42c:	91764b3e 	cmnls	r6, lr, lsr fp
 430:	1b034b3e 	blne	d3130 <startup-0x1ff2ced0>
 434:	4b3d344a 	blmi	f4d564 <startup-0x1f0b2a9c>
 438:	59c13e4c 	stmibpl	r1, {r2, r3, r6, r9, sl, fp, ip, sp}^
 43c:	92089208 	andls	r9, r8, #8, 4	; 0x80000000
 440:	3d595a4b 	vldrcc	s11, [r9, #-300]	; 0xfffffed4
 444:	5c8e224b 	sfmpl	f2, 4, [lr], {75}	; 0x4b
 448:	5b595a75 	blpl	1656e24 <startup-0x1e9a91dc>
 44c:	2f2f3faf 	svccs	0x002f3faf
 450:	522f2f2f 	eorpl	r2, pc, #47, 30	; 0xbc
 454:	3d684c59 	stclcc	12, cr4, [r8, #-356]!	; 0xfffffe9c
 458:	8375ca59 	cmnhi	r5, #364544	; 0x59000
 45c:	74730383 	ldrbtvc	r0, [r3], #-899	; 0xfffffc7d
 460:	01000502 	tsteq	r0, r2, lsl #10
 464:	Address 0x00000464 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
   4:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
   8:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
   c:	2e372039 	mrccs	0, 1, r2, cr7, cr9, {1}
  10:	20312e32 	eorscs	r2, r1, r2, lsr lr
  14:	37313032 			; <UNDEFINED> instruction: 0x37313032
  18:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
  1c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  20:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  24:	5b202965 	blpl	80a5c0 <startup-0x1f7f5a40>
  28:	2f4d5241 	svccs	0x004d5241
  2c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  30:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  34:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
  38:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  3c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  40:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  44:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  48:	30323535 	eorscc	r3, r2, r5, lsr r5
  4c:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
  50:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  54:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  58:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  5c:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  60:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  64:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  68:	616f6c66 	cmnvs	pc, r6, ror #24
  6c:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  70:	6f733d69 	svcvs	0x00733d69
  74:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  78:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  7c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  80:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  84:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  88:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  8c:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  90:	304f2d20 	subcc	r2, pc, r0, lsr #26
  94:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  98:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
  9c:	6f6d0039 	svcvs	0x006d0039
  a0:	00726564 	rsbseq	r6, r2, r4, ror #10
  a4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  a8:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
  ac:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  b0:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
  b4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  b8:	52746f00 	rsbspl	r6, r4, #0, 30
  bc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
  c0:	00646576 	rsbeq	r6, r4, r6, ror r5
  c4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  c8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  cc:	5f657469 	svcpl	0x00657469
  d0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  d4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  d8:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
  dc:	00657479 	rsbeq	r7, r5, r9, ror r4
  e0:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
  e4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  e8:	72614d5c 	rsbvc	r4, r1, #92, 26	; 0x1700
  ec:	445c6169 	ldrbmi	r6, [ip], #-361	; 0xfffffe97
  f0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  f4:	73746e65 	cmnvc	r4, #1616	; 0x650
  f8:	5c54495c 	mrrcpl	9, 5, r4, r4, cr12	; <UNPREDICTABLE>
  fc:	5c504f4d 	mrrcpl	15, 4, r4, r0, cr13
 100:	5c504f4d 	mrrcpl	15, 4, r4, r0, cr13
 104:	6b616e73 	blvs	185bad8 <startup-0x1e7a4528>
 108:	73610065 	cmnvc	r1, #101	; 0x65
 10c:	5f696963 	svcpl	0x00696963
 110:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 114:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 118:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 11c:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
 120:	00726570 	rsbseq	r6, r2, r0, ror r5
 124:	5272646f 	rsbspl	r6, r2, #1862270976	; 0x6f000000
 128:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 12c:	00646576 	rsbeq	r6, r4, r6, ror r5
 130:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 134:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 138:	5f657469 	svcpl	0x00657469
 13c:	61746164 	cmnvs	r4, r4, ror #2
 140:	63736100 	cmnvs	r3, #0, 2
 144:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 148:	5f646165 	svcpl	0x00646165
 14c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 150:	6f007375 	svcvs	0x00007375
 154:	6f4c7264 	svcvs	0x004c7264
 158:	736f0077 	cmnvc	pc, #119	; 0x77
 15c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 160:	69750072 	ldmdbvs	r5!, {r1, r4, r5, r6}^
 164:	5f38746e 	svcpl	0x0038746e
 168:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 16c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 170:	63206465 			; <UNDEFINED> instruction: 0x63206465
 174:	00726168 	rsbseq	r6, r2, r8, ror #2
 178:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 17c:	00686769 	rsbeq	r6, r8, r9, ror #14
 180:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 184:	745f3233 	ldrbvc	r3, [pc], #-563	; 18c <startup-0x1ffffe74>
 188:	63736100 	cmnvs	r3, #0, 2
 18c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 190:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 194:	6168635f 	cmnvs	r8, pc, asr r3
 198:	73610072 	cmnvc	r1, #114	; 0x72
 19c:	5f696963 	svcpl	0x00696963
 1a0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 1a4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 1a8:	64690061 	strbtvs	r0, [r9], #-97	; 0xffffff9f
 1ac:	73655272 	cmnvc	r5, #536870919	; 0x20000007
 1b0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 1b4:	73610064 	cmnvc	r1, #100	; 0x64
 1b8:	5f696963 	svcpl	0x00696963
 1bc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 1c0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1c4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffffc <string+0xdffff1bc>
 1c8:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1cc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 1d0:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 1d4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 1d8:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 1dc:	6100746e 	tstvs	r0, lr, ror #8
 1e0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1e4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1e8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1ec:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
 1f0:	6f4c7264 	svcvs	0x004c7264
 1f4:	73610077 	cmnvc	r1, #119	; 0x77
 1f8:	5f696963 	svcpl	0x00696963
 1fc:	6f746f67 	svcvs	0x00746f67
 200:	75007978 	strvc	r7, [r0, #-2424]	; 0xfffff688
 204:	31746e69 	cmncc	r4, r9, ror #28
 208:	00745f36 	rsbseq	r5, r4, r6, lsr pc
 20c:	4f495047 	svcmi	0x00495047
 210:	72646900 	rsbvc	r6, r4, #0, 18
 214:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 218:	72646100 	rsbvc	r6, r4, #0, 2
 21c:	00737365 	rsbseq	r7, r3, r5, ror #6
 220:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7e5 <string+0xdfffe9a5>
 224:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 228:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 22c:	442f6169 	strtmi	r6, [pc], #-361	; 234 <startup-0x1ffffdcc>
 230:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 234:	73746e65 	cmnvc	r4, #1616	; 0x650
 238:	2f54492f 	svccs	0x0054492f
 23c:	2f504f4d 	svccs	0x00504f4d
 240:	2f504f4d 	svccs	0x00504f4d
 244:	6b616e73 	blvs	185bc18 <startup-0x1e7a43e8>
 248:	73612f65 	cmnvc	r1, #404	; 0x194
 24c:	2e696963 	vnmulcs.f16	s13, s18, s7	; <UNPREDICTABLE>
 250:	73610063 	cmnvc	r1, #99	; 0x63
 254:	5f696963 	svcpl	0x00696963
 258:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 25c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 260:	3a430062 	bcc	10c03f0 <startup-0x1ef3fc10>
 264:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 268:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; a8 <startup-0x1fffff58>
 26c:	61697261 	cmnvs	r9, r1, ror #4
 270:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 274:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 278:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 27c:	4f4d2f54 	svcmi	0x004d2f54
 280:	4f4d2f50 	svcmi	0x004d2f50
 284:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 288:	2f656b61 	svccs	0x00656b61
 28c:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 290:	6b00632e 	blvs	18f50 <startup-0x1ffe70b0>
 294:	65476462 	strbvs	r6, [r7, #-1122]	; 0xfffffb9e
 298:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; d0 <startup-0x1fffff30>
 29c:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
 2a0:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 2a4:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 2a8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2ac:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 1f2 <startup-0x1ffffe0e>	; <UNPREDICTABLE>
 2b0:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 2b4:	2f3a4300 	svccs	0x003a4300
 2b8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2bc:	614d2f73 	hvcvs	54003	; 0xd2f3
 2c0:	2f616972 	svccs	0x00616972
 2c4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 2c8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2cc:	54492f73 	strbpl	r2, [r9], #-3955	; 0xfffff08d
 2d0:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 2d4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 2d8:	616e732f 	cmnvs	lr, pc, lsr #6
 2dc:	642f656b 	strtvs	r6, [pc], #-1387	; 2e4 <startup-0x1ffffd1c>
 2e0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2e4:	6300632e 	movwvs	r6, #814	; 0x32e
 2e8:	006c7274 	rsbeq	r7, ip, r4, ror r2
 2ec:	616c6564 	cmnvs	ip, r4, ror #10
 2f0:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 2f4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 2f8:	616c6564 	cmnvs	ip, r4, ror #10
 2fc:	30355f79 	eorscc	r5, r5, r9, ror pc
 300:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 304:	616c6564 	cmnvs	ip, r4, ror #10
 308:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 30c:	006f7263 	rsbeq	r7, pc, r3, ror #4
 310:	4f454750 	svcmi	0x00454750
 314:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 318:	5f790059 	svcpl	0x00790059
 31c:	726f6f63 	rsbvc	r6, pc, #396	; 0x18c
 320:	72640064 	rsbvc	r0, r4, #100	; 0x64
 324:	6d007761 	stcvs	7, cr7, [r0, #-388]	; 0xfffffe7c
 328:	0065766f 	rsbeq	r7, r5, pc, ror #12
 32c:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 330:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 334:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 338:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 33c:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
 340:	70007872 	andvc	r7, r0, r2, ror r8
 344:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 348:	61726400 	cmnvs	r2, r0, lsl #8
 34c:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 350:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 354:	67617000 	strbvs	r7, [r1, -r0]!
 358:	3a430065 	bcc	10c04f4 <startup-0x1ef3fb0c>
 35c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 360:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 1a0 <startup-0x1ffffe60>
 364:	61697261 	cmnvs	r9, r1, ror #4
 368:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 36c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 370:	492f7374 	stmdbmi	pc!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 374:	4f4d2f54 	svcmi	0x004d2f54
 378:	4f4d2f50 	svcmi	0x004d2f50
 37c:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 380:	2f656b61 	svccs	0x00656b61
 384:	70617267 	rsbvc	r7, r1, r7, ror #4
 388:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 38c:	50740063 	rsbspl	r0, r4, r3, rrx
 390:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 394:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 398:	7300544e 	movwvc	r5, #1102	; 0x44e
 39c:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 3a0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 3a4:	736f7000 	cmnvc	pc, #0
 3a8:	6f700078 	svcvs	0x00700078
 3ac:	67007973 	smlsdxvs	r0, r3, r9, r7
 3b0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3b4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 3b8:	5f646165 	svcpl	0x00646165
 3bc:	61746164 	cmnvs	r4, r4, ror #2
 3c0:	61726700 	cmnvs	r2, r0, lsl #14
 3c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3c8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3cc:	67006574 	smlsdxvs	r0, r4, r5, r6
 3d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3d4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 3d8:	5f6c7274 	svcpl	0x006c7274
 3dc:	5f746962 	svcpl	0x00746962
 3e0:	61656c63 	cmnvs	r5, r3, ror #24
 3e4:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
 3e8:	67007972 	smlsdxvs	r0, r2, r9, r7
 3ec:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3f0:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 3f4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 3f8:	7a696c61 	bvc	1a5b584 <startup-0x1e5a4a7c>
 3fc:	72670065 	rsbvc	r0, r7, #101	; 0x65
 400:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 404:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 408:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 40c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 410:	73007465 	movwvc	r7, #1125	; 0x465
 414:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 418:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 41c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 420:	73007972 	movwvc	r7, #2418	; 0x972
 424:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 428:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 42c:	6f5f7261 	svcvs	0x005f7261
 430:	63656a62 	cmnvs	r5, #401408	; 0x62000
 434:	616d0074 	smcvs	53252	; 0xd004
 438:	76006b73 			; <UNDEFINED> instruction: 0x76006b73
 43c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 440:	61726700 	cmnvs	r2, r0, lsl #14
 444:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 448:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 44c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 454 <startup-0x1ffffbac>
 450:	00617461 	rsbeq	r7, r1, r1, ror #8
 454:	70617267 	rsbvc	r7, r1, r7, ror #4
 458:	5f636968 	svcpl	0x00636968
 45c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 460:	6165725f 	cmnvs	r5, pc, asr r2
 464:	69007964 	stmdbvs	r0, {r2, r5, r6, r8, fp, ip, sp, lr}
 468:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 46c:	624f7400 	subvs	r7, pc, #0, 8
 470:	7267006a 	rsbvc	r0, r7, #106	; 0x6a
 474:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 478:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 47c:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 480:	6f706d75 	svcvs	0x00706d75
 484:	73746e69 	cmnvc	r4, #1680	; 0x690
 488:	635f7800 	cmpvs	pc, #0, 16
 48c:	64726f6f 	ldrbtvs	r6, [r2], #-3951	; 0xfffff091
 490:	61726700 	cmnvs	r2, r0, lsl #14
 494:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 498:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 49c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 4a0:	616d6d6f 	cmnvs	sp, pc, ror #26
 4a4:	5000646e 	andpl	r6, r0, lr, ror #8
 4a8:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 4ac:	67005443 	strvs	r5, [r0, -r3, asr #8]
 4b0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4b4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 4b8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 4bc:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 4c0:	006e6565 	rsbeq	r6, lr, r5, ror #10
 4c4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 4c8:	00707574 	rsbseq	r7, r0, r4, ror r5
 4cc:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa91 <string+0xdfffec51>
 4d0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 4d4:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 4d8:	442f6169 	strtmi	r6, [pc], #-361	; 4e0 <startup-0x1ffffb20>
 4dc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 4e0:	73746e65 	cmnvc	r4, #1616	; 0x650
 4e4:	2f54492f 	svccs	0x0054492f
 4e8:	2f504f4d 	svccs	0x00504f4d
 4ec:	2f504f4d 	svccs	0x00504f4d
 4f0:	6b616e73 	blvs	185bec4 <startup-0x1e7a413c>
 4f4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
 4f8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 4fc:	00632e70 	rsbeq	r2, r3, r0, ror lr
 500:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 504:	6a626f5f 	bvs	189c288 <startup-0x1e763d78>
 508:	00746365 	rsbseq	r6, r4, r5, ror #6
 50c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 510:	6200676e 	andvs	r6, r0, #28835840	; 0x1b80000
 514:	5f6c6c61 	svcpl	0x006c6c61
 518:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 384 <startup-0x1ffffc7c>
 51c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 520:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 524:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 528:	615f7469 	cmpvs	pc, r9, ror #8
 52c:	63007070 	movwvs	r7, #112	; 0x70
 530:	696c6c6f 	stmdbvs	ip!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
 534:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 538:	6c616200 	sfmvs	f6, 2, [r1], #-0
 53c:	6573006c 	ldrbvs	r0, [r3, #-108]!	; 0xffffff94
 540:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 544:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 548:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 54c:	61006465 	tstvs	r0, r5, ror #8
 550:	656c7070 	strbvs	r7, [ip, #-112]!	; 0xffffff90
 554:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 558:	00786465 	rsbseq	r6, r8, r5, ror #8
 55c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 560:	Address 0x00000560 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <string+0xdfffe4ce>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000054 	andcs	r0, r0, r4, asr r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000009c 	mulcs	r0, ip, r0
  5c:	00000030 	andeq	r0, r0, r0, lsr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000cc 	andcs	r0, r0, ip, asr #1
  7c:	00000034 	andeq	r0, r0, r4, lsr r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000100 	andcs	r0, r0, r0, lsl #2
  9c:	0000002a 	andeq	r0, r0, sl, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	2000012a 	andcs	r0, r0, sl, lsr #2
  bc:	0000002a 	andeq	r0, r0, sl, lsr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	00000020 	andeq	r0, r0, r0, lsr #32
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000154 	andcs	r0, r0, r4, asr r1
  dc:	0000004c 	andeq	r0, r0, ip, asr #32
  e0:	400c0e41 	andmi	r0, ip, r1, asr #28
  e4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  e8:	018e4002 	orreq	r4, lr, r2
  ec:	41180e41 	tstmi	r8, r1, asr #28
  f0:	0000070d 	andeq	r0, r0, sp, lsl #14
  f4:	00000020 	andeq	r0, r0, r0, lsr #32
  f8:	00000000 	andeq	r0, r0, r0
  fc:	200001a0 	andcs	r0, r0, r0, lsr #3
 100:	0000004c 	andeq	r0, r0, ip, asr #32
 104:	400c0e41 	andmi	r0, ip, r1, asr #28
 108:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 10c:	018e4002 	orreq	r4, lr, r2
 110:	41180e41 	tstmi	r8, r1, asr #28
 114:	0000070d 	andeq	r0, r0, sp, lsl #14
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001ec 	andcs	r0, r0, ip, ror #3
 124:	0000003c 	andeq	r0, r0, ip, lsr r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	20000228 	andcs	r0, r0, r8, lsr #4
 144:	00000036 	andeq	r0, r0, r6, lsr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	180e4101 	stmdane	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000018 	andeq	r0, r0, r8, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	2000025e 	andcs	r0, r0, lr, asr r2
 164:	0000009a 	muleq	r0, sl, r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 174:	0000000c 	andeq	r0, r0, ip
 178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 17c:	7c020001 	stcvc	0, cr0, [r2], {1}
 180:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000174 	andeq	r0, r0, r4, ror r1
 18c:	200002f8 	strdcs	r0, [r0], -r8
 190:	00000068 	andeq	r0, r0, r8, rrx
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	00000174 	andeq	r0, r0, r4, ror r1
 1b0:	20000360 	andcs	r0, r0, r0, ror #6
 1b4:	00000054 	andeq	r0, r0, r4, asr r0
 1b8:	40080e41 	andmi	r0, r8, r1, asr #28
 1bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c0:	100e4101 	andne	r4, lr, r1, lsl #2
 1c4:	00070d41 	andeq	r0, r7, r1, asr #26
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	00000174 	andeq	r0, r0, r4, ror r1
 1d0:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 1d4:	00000054 	andeq	r0, r0, r4, asr r0
 1d8:	40080e41 	andmi	r0, r8, r1, asr #28
 1dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e0:	100e4101 	andne	r4, lr, r1, lsl #2
 1e4:	00070d41 	andeq	r0, r7, r1, asr #26
 1e8:	0000000c 	andeq	r0, r0, ip
 1ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1f0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000001e8 	andeq	r0, r0, r8, ror #3
 200:	20000408 	andcs	r0, r0, r8, lsl #8
 204:	0000001e 	andeq	r0, r0, lr, lsl r0
 208:	40080e41 	andmi	r0, r8, r1, asr #28
 20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 210:	100e4101 	andne	r4, lr, r1, lsl #2
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	000001e8 	andeq	r0, r0, r8, ror #3
 220:	20000426 	andcs	r0, r0, r6, lsr #8
 224:	0000001e 	andeq	r0, r0, lr, lsl r0
 228:	40080e41 	andmi	r0, r8, r1, asr #28
 22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 230:	100e4101 	andne	r4, lr, r1, lsl #2
 234:	00070d41 	andeq	r0, r7, r1, asr #26
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	000001e8 	andeq	r0, r0, r8, ror #3
 240:	20000444 	andcs	r0, r0, r4, asr #8
 244:	00000054 	andeq	r0, r0, r4, asr r0
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	100e4101 	andne	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	00000018 	andeq	r0, r0, r8, lsl r0
 25c:	000001e8 	andeq	r0, r0, r8, ror #3
 260:	20000498 	mulcs	r0, r8, r4
 264:	0000000a 	andeq	r0, r0, sl
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 274:	0000000c 	andeq	r0, r0, ip
 278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 27c:	7c020001 	stcvc	0, cr0, [r2], {1}
 280:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	00000274 	andeq	r0, r0, r4, ror r2
 28c:	200004a4 	andcs	r0, r0, r4, lsr #9
 290:	0000006c 	andeq	r0, r0, ip, rrx
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	100e4101 	andne	r4, lr, r1, lsl #2
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000274 	andeq	r0, r0, r4, ror r2
 2ac:	20000510 	andcs	r0, r0, r0, lsl r5
 2b0:	00000090 	muleq	r0, r0, r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c0:	00070d41 	andeq	r0, r7, r1, asr #26
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000274 	andeq	r0, r0, r4, ror r2
 2cc:	200005a0 	andcs	r0, r0, r0, lsr #11
 2d0:	00000080 	andeq	r0, r0, r0, lsl #1
 2d4:	40080e41 	andmi	r0, r8, r1, asr #28
 2d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2dc:	100e4101 	andne	r4, lr, r1, lsl #2
 2e0:	00070d41 	andeq	r0, r7, r1, asr #26
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000274 	andeq	r0, r0, r4, ror r2
 2ec:	20000620 	andcs	r0, r0, r0, lsr #12
 2f0:	00000040 	andeq	r0, r0, r0, asr #32
 2f4:	40080e41 	andmi	r0, r8, r1, asr #28
 2f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2fc:	100e4101 	andne	r4, lr, r1, lsl #2
 300:	00070d41 	andeq	r0, r7, r1, asr #26
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	00000274 	andeq	r0, r0, r4, ror r2
 30c:	20000660 	andcs	r0, r0, r0, ror #12
 310:	00000046 	andeq	r0, r0, r6, asr #32
 314:	40080e41 	andmi	r0, r8, r1, asr #28
 318:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 31c:	100e4101 	andne	r4, lr, r1, lsl #2
 320:	00070d41 	andeq	r0, r7, r1, asr #26
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000274 	andeq	r0, r0, r4, ror r2
 32c:	200006a6 	andcs	r0, r0, r6, lsr #13
 330:	0000002a 	andeq	r0, r0, sl, lsr #32
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	00000274 	andeq	r0, r0, r4, ror r2
 34c:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 350:	00000044 	andeq	r0, r0, r4, asr #32
 354:	40080e41 	andmi	r0, r8, r1, asr #28
 358:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 35c:	180e4101 	stmdane	lr, {r0, r8, lr}
 360:	00070d41 	andeq	r0, r7, r1, asr #26
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	00000274 	andeq	r0, r0, r4, ror r2
 36c:	20000714 	andcs	r0, r0, r4, lsl r7
 370:	00000048 	andeq	r0, r0, r8, asr #32
 374:	40080e41 	andmi	r0, r8, r1, asr #28
 378:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 37c:	180e4101 	stmdane	lr, {r0, r8, lr}
 380:	00070d41 	andeq	r0, r7, r1, asr #26
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	00000274 	andeq	r0, r0, r4, ror r2
 38c:	2000075c 	andcs	r0, r0, ip, asr r7
 390:	0000005a 	andeq	r0, r0, sl, asr r0
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	100e4101 	andne	r4, lr, r1, lsl #2
 3a0:	00070d41 	andeq	r0, r7, r1, asr #26
 3a4:	00000018 	andeq	r0, r0, r8, lsl r0
 3a8:	00000274 	andeq	r0, r0, r4, ror r2
 3ac:	200007b6 			; <UNDEFINED> instruction: 0x200007b6
 3b0:	0000005c 	andeq	r0, r0, ip, asr r0
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000274 	andeq	r0, r0, r4, ror r2
 3c8:	20000812 	andcs	r0, r0, r2, lsl r8
 3cc:	00000056 	andeq	r0, r0, r6, asr r0
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	100e4101 	andne	r4, lr, r1, lsl #2
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	00000024 	andeq	r0, r0, r4, lsr #32
 3e4:	00000274 	andeq	r0, r0, r4, ror r2
 3e8:	20000868 	andcs	r0, r0, r8, ror #16
 3ec:	00000194 	muleq	r0, r4, r1
 3f0:	40100e41 	andsmi	r0, r0, r1, asr #28
 3f4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 3f8:	02874003 	addeq	r4, r7, #3
 3fc:	41018e40 	tstmi	r1, r0, asr #28
 400:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 404:	00000007 	andeq	r0, r0, r7
 408:	00000024 	andeq	r0, r0, r4, lsr #32
 40c:	00000274 	andeq	r0, r0, r4, ror r2
 410:	200009fc 	strdcs	r0, [r0], -ip
 414:	00000092 	muleq	r0, r2, r0
 418:	40100e41 	andsmi	r0, r0, r1, asr #28
 41c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 420:	02874003 	addeq	r4, r7, #3
 424:	41018e40 	tstmi	r1, r0, asr #28
 428:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 42c:	00000007 	andeq	r0, r0, r7
 430:	00000024 	andeq	r0, r0, r4, lsr #32
 434:	00000274 	andeq	r0, r0, r4, ror r2
 438:	20000a8e 	andcs	r0, r0, lr, lsl #21
 43c:	00000092 	muleq	r0, r2, r0
 440:	40100e41 	andsmi	r0, r0, r1, asr #28
 444:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 448:	02874003 	addeq	r4, r7, #3
 44c:	41018e40 	tstmi	r1, r0, asr #28
 450:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 454:	00000007 	andeq	r0, r0, r7
 458:	0000000c 	andeq	r0, r0, ip
 45c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 460:	7c020001 	stcvc	0, cr0, [r2], {1}
 464:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 468:	0000000c 	andeq	r0, r0, ip
 46c:	00000458 	andeq	r0, r0, r8, asr r4
 470:	20000000 	andcs	r0, r0, r0
 474:	0000000c 	andeq	r0, r0, ip
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	00000458 	andeq	r0, r0, r8, asr r4
 480:	20000b20 	andcs	r0, r0, r0, lsr #22
 484:	00000020 	andeq	r0, r0, r0, lsr #32
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	180e4101 	stmdane	lr, {r0, r8, lr}
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	0000001c 	andeq	r0, r0, ip, lsl r0
 49c:	00000458 	andeq	r0, r0, r8, asr r4
 4a0:	20000b40 	andcs	r0, r0, r0, asr #22
 4a4:	00000098 	muleq	r0, r8, r0
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	100e4101 	andne	r4, lr, r1, lsl #2
 4b4:	00070d41 	andeq	r0, r7, r1, asr #26
 4b8:	00000018 	andeq	r0, r0, r8, lsl r0
 4bc:	00000458 	andeq	r0, r0, r8, asr r4
 4c0:	20000bd8 	ldrdcs	r0, [r0], -r8
 4c4:	00000038 	andeq	r0, r0, r8, lsr r0
 4c8:	40080e41 	andmi	r0, r8, r1, asr #28
 4cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4d4:	00000020 	andeq	r0, r0, r0, lsr #32
 4d8:	00000458 	andeq	r0, r0, r8, asr r4
 4dc:	20000c10 	andcs	r0, r0, r0, lsl ip
 4e0:	000000fc 	strdeq	r0, [r0], -ip
 4e4:	400c0e41 	andmi	r0, ip, r1, asr #28
 4e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4ec:	018e4002 	orreq	r4, lr, r2
 4f0:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 4f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4fc:	00000458 	andeq	r0, r0, r8, asr r4
 500:	20000d0c 	andcs	r0, r0, ip, lsl #26
 504:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 510:	180e4101 	stmdane	lr, {r0, r8, lr}
 514:	00070d41 	andeq	r0, r7, r1, asr #26

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000b20 	andcs	r0, r0, r0, lsr #22
   4:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
