
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define LCD_DISP_START 0xC0
#define LCD_BUSY 0x80

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fb1c 	bl	20000640 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <graphic_wait_ready>:

typedef unsigned char uint8_t;

static void graphic_wait_ready(void)
{
20000028:	b580      	push	{r7, lr}
2000002a:	b082      	sub	sp, #8
2000002c:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
2000002e:	2040      	movs	r0, #64	; 0x40
20000030:	f000 f936 	bl	200002a0 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
20000034:	4b14      	ldr	r3, [pc, #80]	; (20000088 <graphic_wait_ready+0x60>)
20000036:	4a15      	ldr	r2, [pc, #84]	; (2000008c <graphic_wait_ready+0x64>)
20000038:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
2000003a:	2001      	movs	r0, #1
2000003c:	f000 f930 	bl	200002a0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000040:	2002      	movs	r0, #2
20000042:	f000 f90b 	bl	2000025c <graphic_ctrl_bit_set>
	delay_500ns();
20000046:	f000 f9cf 	bl	200003e8 <delay_500ns>
	
	while(1)
	{
		graphic_ctrl_bit_set(B_E);
2000004a:	2040      	movs	r0, #64	; 0x40
2000004c:	f000 f906 	bl	2000025c <graphic_ctrl_bit_set>
		delay_500ns();
20000050:	f000 f9ca 	bl	200003e8 <delay_500ns>
		c = *GPIO_IDR_HIGH & LCD_BUSY; //LCD_BUSY?????
20000054:	4b0e      	ldr	r3, [pc, #56]	; (20000090 <graphic_wait_ready+0x68>)
20000056:	781b      	ldrb	r3, [r3, #0]
20000058:	b2da      	uxtb	r2, r3
2000005a:	1dfb      	adds	r3, r7, #7
2000005c:	217f      	movs	r1, #127	; 0x7f
2000005e:	438a      	bics	r2, r1
20000060:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000062:	2040      	movs	r0, #64	; 0x40
20000064:	f000 f91c 	bl	200002a0 <graphic_ctrl_bit_clear>
		delay_500ns();
20000068:	f000 f9be 	bl	200003e8 <delay_500ns>
		if(c == 0)
2000006c:	1dfb      	adds	r3, r7, #7
2000006e:	781b      	ldrb	r3, [r3, #0]
20000070:	2b00      	cmp	r3, #0
20000072:	d000      	beq.n	20000076 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20000074:	e7e9      	b.n	2000004a <graphic_wait_ready+0x22>
		{
			break;
20000076:	46c0      	nop			; (mov r8, r8)
		}
	}
	*GPIO_MODER = 0x55555555;
20000078:	4b03      	ldr	r3, [pc, #12]	; (20000088 <graphic_wait_ready+0x60>)
2000007a:	4a06      	ldr	r2, [pc, #24]	; (20000094 <graphic_wait_ready+0x6c>)
2000007c:	601a      	str	r2, [r3, #0]
}
2000007e:	46c0      	nop			; (mov r8, r8)
20000080:	46bd      	mov	sp, r7
20000082:	b002      	add	sp, #8
20000084:	bd80      	pop	{r7, pc}
20000086:	46c0      	nop			; (mov r8, r8)
20000088:	40021000 	andmi	r1, r2, r0
2000008c:	00005555 	andeq	r5, r0, r5, asr r5
20000090:	40021011 	andmi	r1, r2, r1, lsl r0
20000094:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000098 <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
20000098:	b580      	push	{r7, lr}
2000009a:	b084      	sub	sp, #16
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200000a4:	2040      	movs	r0, #64	; 0x40
200000a6:	f000 f8fb 	bl	200002a0 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
200000aa:	4b1c      	ldr	r3, [pc, #112]	; (2000011c <graphic_read+0x84>)
200000ac:	4a1c      	ldr	r2, [pc, #112]	; (20000120 <graphic_read+0x88>)
200000ae:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
200000b0:	2003      	movs	r0, #3
200000b2:	f000 f8d3 	bl	2000025c <graphic_ctrl_bit_set>
	select_controller(controller);
200000b6:	1dfb      	adds	r3, r7, #7
200000b8:	781b      	ldrb	r3, [r3, #0]
200000ba:	0018      	movs	r0, r3
200000bc:	f000 f914 	bl	200002e8 <select_controller>
	delay_500ns();
200000c0:	f000 f992 	bl	200003e8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200000c4:	2040      	movs	r0, #64	; 0x40
200000c6:	f000 f8c9 	bl	2000025c <graphic_ctrl_bit_set>
	delay_500ns();
200000ca:	f000 f98d 	bl	200003e8 <delay_500ns>
	c = *GPIO_IDR_HIGH;
200000ce:	4a15      	ldr	r2, [pc, #84]	; (20000124 <graphic_read+0x8c>)
200000d0:	230f      	movs	r3, #15
200000d2:	18fb      	adds	r3, r7, r3
200000d4:	7812      	ldrb	r2, [r2, #0]
200000d6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200000d8:	2040      	movs	r0, #64	; 0x40
200000da:	f000 f8e1 	bl	200002a0 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
200000de:	4b0f      	ldr	r3, [pc, #60]	; (2000011c <graphic_read+0x84>)
200000e0:	4a11      	ldr	r2, [pc, #68]	; (20000128 <graphic_read+0x90>)
200000e2:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1){
200000e4:	1dfb      	adds	r3, r7, #7
200000e6:	781b      	ldrb	r3, [r3, #0]
200000e8:	2208      	movs	r2, #8
200000ea:	4013      	ands	r3, r2
200000ec:	d004      	beq.n	200000f8 <graphic_read+0x60>
		select_controller(B_CS1);
200000ee:	2008      	movs	r0, #8
200000f0:	f000 f8fa 	bl	200002e8 <select_controller>
		graphic_wait_ready();
200000f4:	f7ff ff98 	bl	20000028 <graphic_wait_ready>
	}
	if(controller & B_CS2)
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	781b      	ldrb	r3, [r3, #0]
200000fc:	2210      	movs	r2, #16
200000fe:	4013      	ands	r3, r2
20000100:	d004      	beq.n	2000010c <graphic_read+0x74>
	{
		select_controller(B_CS2);
20000102:	2010      	movs	r0, #16
20000104:	f000 f8f0 	bl	200002e8 <select_controller>
		graphic_wait_ready();
20000108:	f7ff ff8e 	bl	20000028 <graphic_wait_ready>
	}
	return c;
2000010c:	230f      	movs	r3, #15
2000010e:	18fb      	adds	r3, r7, r3
20000110:	781b      	ldrb	r3, [r3, #0]
}
20000112:	0018      	movs	r0, r3
20000114:	46bd      	mov	sp, r7
20000116:	b004      	add	sp, #16
20000118:	bd80      	pop	{r7, pc}
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	40021000 	andmi	r1, r2, r0
20000120:	00005555 	andeq	r5, r0, r5, asr r5
20000124:	40021011 	andmi	r1, r2, r1, lsl r0
20000128:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000012c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
2000012c:	b580      	push	{r7, lr}
2000012e:	b082      	sub	sp, #8
20000130:	af00      	add	r7, sp, #0
20000132:	0002      	movs	r2, r0
20000134:	1dfb      	adds	r3, r7, #7
20000136:	701a      	strb	r2, [r3, #0]
20000138:	1dbb      	adds	r3, r7, #6
2000013a:	1c0a      	adds	r2, r1, #0
2000013c:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	*GPIO_ODR_HIGH = value;
2000013e:	4a1a      	ldr	r2, [pc, #104]	; (200001a8 <graphic_write+0x7c>)
20000140:	1dfb      	adds	r3, r7, #7
20000142:	781b      	ldrb	r3, [r3, #0]
20000144:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000146:	1dbb      	adds	r3, r7, #6
20000148:	781b      	ldrb	r3, [r3, #0]
2000014a:	0018      	movs	r0, r3
2000014c:	f000 f8cc 	bl	200002e8 <select_controller>
	delay_500ns();
20000150:	f000 f94a 	bl	200003e8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000154:	2040      	movs	r0, #64	; 0x40
20000156:	f000 f881 	bl	2000025c <graphic_ctrl_bit_set>
	delay_500ns();
2000015a:	f000 f945 	bl	200003e8 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000015e:	2040      	movs	r0, #64	; 0x40
20000160:	f000 f89e 	bl	200002a0 <graphic_ctrl_bit_clear>

	
	if(controller & B_CS1){
20000164:	1dbb      	adds	r3, r7, #6
20000166:	781b      	ldrb	r3, [r3, #0]
20000168:	2208      	movs	r2, #8
2000016a:	4013      	ands	r3, r2
2000016c:	d004      	beq.n	20000178 <graphic_write+0x4c>
		select_controller(B_CS1);
2000016e:	2008      	movs	r0, #8
20000170:	f000 f8ba 	bl	200002e8 <select_controller>
		graphic_wait_ready();
20000174:	f7ff ff58 	bl	20000028 <graphic_wait_ready>
	}
	if(controller & B_CS2)
20000178:	1dbb      	adds	r3, r7, #6
2000017a:	781b      	ldrb	r3, [r3, #0]
2000017c:	2210      	movs	r2, #16
2000017e:	4013      	ands	r3, r2
20000180:	d004      	beq.n	2000018c <graphic_write+0x60>
	{
		select_controller(B_CS2);
20000182:	2010      	movs	r0, #16
20000184:	f000 f8b0 	bl	200002e8 <select_controller>
		graphic_wait_ready();
20000188:	f7ff ff4e 	bl	20000028 <graphic_wait_ready>
	}
	*GPIO_ODR_HIGH = 0;
2000018c:	4b06      	ldr	r3, [pc, #24]	; (200001a8 <graphic_write+0x7c>)
2000018e:	2200      	movs	r2, #0
20000190:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000192:	2040      	movs	r0, #64	; 0x40
20000194:	f000 f862 	bl	2000025c <graphic_ctrl_bit_set>
	select_controller(0);
20000198:	2000      	movs	r0, #0
2000019a:	f000 f8a5 	bl	200002e8 <select_controller>
}
2000019e:	46c0      	nop			; (mov r8, r8)
200001a0:	46bd      	mov	sp, r7
200001a2:	b002      	add	sp, #8
200001a4:	bd80      	pop	{r7, pc}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	40021015 	andmi	r1, r2, r5, lsl r0

200001ac <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller)
{
200001ac:	b580      	push	{r7, lr}
200001ae:	b082      	sub	sp, #8
200001b0:	af00      	add	r7, sp, #0
200001b2:	0002      	movs	r2, r0
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	701a      	strb	r2, [r3, #0]
200001b8:	1dbb      	adds	r3, r7, #6
200001ba:	1c0a      	adds	r2, r1, #0
200001bc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200001be:	2040      	movs	r0, #64	; 0x40
200001c0:	f000 f86e 	bl	200002a0 <graphic_ctrl_bit_clear>
	select_controller(controller);
200001c4:	1dbb      	adds	r3, r7, #6
200001c6:	781b      	ldrb	r3, [r3, #0]
200001c8:	0018      	movs	r0, r3
200001ca:	f000 f88d 	bl	200002e8 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200001ce:	2003      	movs	r0, #3
200001d0:	f000 f866 	bl	200002a0 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200001d4:	1dbb      	adds	r3, r7, #6
200001d6:	781a      	ldrb	r2, [r3, #0]
200001d8:	1dfb      	adds	r3, r7, #7
200001da:	781b      	ldrb	r3, [r3, #0]
200001dc:	0011      	movs	r1, r2
200001de:	0018      	movs	r0, r3
200001e0:	f7ff ffa4 	bl	2000012c <graphic_write>
}
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	46bd      	mov	sp, r7
200001e8:	b002      	add	sp, #8
200001ea:	bd80      	pop	{r7, pc}

200001ec <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
200001f8:	1dbb      	adds	r3, r7, #6
200001fa:	1c0a      	adds	r2, r1, #0
200001fc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200001fe:	2040      	movs	r0, #64	; 0x40
20000200:	f000 f84e 	bl	200002a0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000204:	1dbb      	adds	r3, r7, #6
20000206:	781b      	ldrb	r3, [r3, #0]
20000208:	0018      	movs	r0, r3
2000020a:	f000 f86d 	bl	200002e8 <select_controller>
	graphic_ctrl_bit_clear(B_RW);
2000020e:	2002      	movs	r0, #2
20000210:	f000 f846 	bl	200002a0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RS);
20000214:	2001      	movs	r0, #1
20000216:	f000 f821 	bl	2000025c <graphic_ctrl_bit_set>
	graphic_write(data, controller);
2000021a:	1dbb      	adds	r3, r7, #6
2000021c:	781a      	ldrb	r2, [r3, #0]
2000021e:	1dfb      	adds	r3, r7, #7
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	0011      	movs	r1, r2
20000224:	0018      	movs	r0, r3
20000226:	f7ff ff81 	bl	2000012c <graphic_write>
}
2000022a:	46c0      	nop			; (mov r8, r8)
2000022c:	46bd      	mov	sp, r7
2000022e:	b002      	add	sp, #8
20000230:	bd80      	pop	{r7, pc}

20000232 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
20000232:	b580      	push	{r7, lr}
20000234:	b082      	sub	sp, #8
20000236:	af00      	add	r7, sp, #0
20000238:	0002      	movs	r2, r0
2000023a:	1dfb      	adds	r3, r7, #7
2000023c:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000023e:	1dfb      	adds	r3, r7, #7
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	0018      	movs	r0, r3
20000244:	f7ff ff28 	bl	20000098 <graphic_read>
	return graphic_read(controller);
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	0018      	movs	r0, r3
2000024e:	f7ff ff23 	bl	20000098 <graphic_read>
20000252:	0003      	movs	r3, r0
}
20000254:	0018      	movs	r0, r3
20000256:	46bd      	mov	sp, r7
20000258:	b002      	add	sp, #8
2000025a:	bd80      	pop	{r7, pc}

2000025c <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
2000025c:	b580      	push	{r7, lr}
2000025e:	b084      	sub	sp, #16
20000260:	af00      	add	r7, sp, #0
20000262:	0002      	movs	r2, r0
20000264:	1dfb      	adds	r3, r7, #7
20000266:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *GPIO_ODR_LOW;
20000268:	4a0c      	ldr	r2, [pc, #48]	; (2000029c <graphic_ctrl_bit_set+0x40>)
2000026a:	210f      	movs	r1, #15
2000026c:	187b      	adds	r3, r7, r1
2000026e:	7812      	ldrb	r2, [r2, #0]
20000270:	701a      	strb	r2, [r3, #0]
	c |= ( ~B_SELECT & x ); //Nollställer B_Select!
20000272:	1dfb      	adds	r3, r7, #7
20000274:	781b      	ldrb	r3, [r3, #0]
20000276:	b25b      	sxtb	r3, r3
20000278:	2204      	movs	r2, #4
2000027a:	4393      	bics	r3, r2
2000027c:	b25a      	sxtb	r2, r3
2000027e:	187b      	adds	r3, r7, r1
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	b25b      	sxtb	r3, r3
20000284:	4313      	orrs	r3, r2
20000286:	b25a      	sxtb	r2, r3
20000288:	187b      	adds	r3, r7, r1
2000028a:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
2000028c:	4a03      	ldr	r2, [pc, #12]	; (2000029c <graphic_ctrl_bit_set+0x40>)
2000028e:	187b      	adds	r3, r7, r1
20000290:	781b      	ldrb	r3, [r3, #0]
20000292:	7013      	strb	r3, [r2, #0]
}
20000294:	46c0      	nop			; (mov r8, r8)
20000296:	46bd      	mov	sp, r7
20000298:	b004      	add	sp, #16
2000029a:	bd80      	pop	{r7, pc}
2000029c:	40021014 	andmi	r1, r2, r4, lsl r0

200002a0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x)
{
200002a0:	b580      	push	{r7, lr}
200002a2:	b084      	sub	sp, #16
200002a4:	af00      	add	r7, sp, #0
200002a6:	0002      	movs	r2, r0
200002a8:	1dfb      	adds	r3, r7, #7
200002aa:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *GPIO_ODR_LOW;
200002ac:	4a0d      	ldr	r2, [pc, #52]	; (200002e4 <graphic_ctrl_bit_clear+0x44>)
200002ae:	210f      	movs	r1, #15
200002b0:	187b      	adds	r3, r7, r1
200002b2:	7812      	ldrb	r2, [r2, #0]
200002b4:	701a      	strb	r2, [r3, #0]
	c &= (~B_SELECT & ~x); //~ bildar 1-komplement
200002b6:	1dfb      	adds	r3, r7, #7
200002b8:	781b      	ldrb	r3, [r3, #0]
200002ba:	43db      	mvns	r3, r3
200002bc:	b2db      	uxtb	r3, r3
200002be:	187a      	adds	r2, r7, r1
200002c0:	7812      	ldrb	r2, [r2, #0]
200002c2:	4013      	ands	r3, r2
200002c4:	b2da      	uxtb	r2, r3
200002c6:	0008      	movs	r0, r1
200002c8:	187b      	adds	r3, r7, r1
200002ca:	2104      	movs	r1, #4
200002cc:	438a      	bics	r2, r1
200002ce:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
200002d0:	4a04      	ldr	r2, [pc, #16]	; (200002e4 <graphic_ctrl_bit_clear+0x44>)
200002d2:	0001      	movs	r1, r0
200002d4:	187b      	adds	r3, r7, r1
200002d6:	781b      	ldrb	r3, [r3, #0]
200002d8:	7013      	strb	r3, [r2, #0]
}
200002da:	46c0      	nop			; (mov r8, r8)
200002dc:	46bd      	mov	sp, r7
200002de:	b004      	add	sp, #16
200002e0:	bd80      	pop	{r7, pc}
200002e2:	46c0      	nop			; (mov r8, r8)
200002e4:	40021014 	andmi	r1, r2, r4, lsl r0

200002e8 <select_controller>:

void select_controller(uint8_t controller)
{
200002e8:	b580      	push	{r7, lr}
200002ea:	b082      	sub	sp, #8
200002ec:	af00      	add	r7, sp, #0
200002ee:	0002      	movs	r2, r0
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	701a      	strb	r2, [r3, #0]
	switch(controller){
200002f4:	1dfb      	adds	r3, r7, #7
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	2b08      	cmp	r3, #8
200002fa:	d00c      	beq.n	20000316 <select_controller+0x2e>
200002fc:	dc02      	bgt.n	20000304 <select_controller+0x1c>
200002fe:	2b00      	cmp	r3, #0
20000300:	d005      	beq.n	2000030e <select_controller+0x26>
				break;
		case B_CS1|B_CS2:
				graphic_ctrl_bit_set(B_CS1|B_CS2);
				break;
	}
}
20000302:	e01a      	b.n	2000033a <select_controller+0x52>
	switch(controller){
20000304:	2b10      	cmp	r3, #16
20000306:	d00d      	beq.n	20000324 <select_controller+0x3c>
20000308:	2b18      	cmp	r3, #24
2000030a:	d012      	beq.n	20000332 <select_controller+0x4a>
}
2000030c:	e015      	b.n	2000033a <select_controller+0x52>
				graphic_ctrl_bit_clear(B_CS1|B_CS2);
2000030e:	2018      	movs	r0, #24
20000310:	f7ff ffc6 	bl	200002a0 <graphic_ctrl_bit_clear>
				break;
20000314:	e011      	b.n	2000033a <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1);
20000316:	2008      	movs	r0, #8
20000318:	f7ff ffa0 	bl	2000025c <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS2);
2000031c:	2010      	movs	r0, #16
2000031e:	f7ff ffbf 	bl	200002a0 <graphic_ctrl_bit_clear>
				break;
20000322:	e00a      	b.n	2000033a <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS2);
20000324:	2010      	movs	r0, #16
20000326:	f7ff ff99 	bl	2000025c <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS1);
2000032a:	2008      	movs	r0, #8
2000032c:	f7ff ffb8 	bl	200002a0 <graphic_ctrl_bit_clear>
				break;
20000330:	e003      	b.n	2000033a <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1|B_CS2);
20000332:	2018      	movs	r0, #24
20000334:	f7ff ff92 	bl	2000025c <graphic_ctrl_bit_set>
				break;
20000338:	46c0      	nop			; (mov r8, r8)
}
2000033a:	46c0      	nop			; (mov r8, r8)
2000033c:	46bd      	mov	sp, r7
2000033e:	b002      	add	sp, #8
20000340:	bd80      	pop	{r7, pc}

20000342 <delay_milli>:

void delay_milli(int ms)
{
20000342:	b580      	push	{r7, lr}
20000344:	b082      	sub	sp, #8
20000346:	af00      	add	r7, sp, #0
20000348:	6078      	str	r0, [r7, #4]
	while(ms > 0)
2000034a:	e005      	b.n	20000358 <delay_milli+0x16>
	{
	delay_micro(10);
2000034c:	200a      	movs	r0, #10
2000034e:	f000 f80a 	bl	20000366 <delay_micro>
	ms--;
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	3b01      	subs	r3, #1
20000356:	607b      	str	r3, [r7, #4]
	while(ms > 0)
20000358:	687b      	ldr	r3, [r7, #4]
2000035a:	2b00      	cmp	r3, #0
2000035c:	dcf6      	bgt.n	2000034c <delay_milli+0xa>
	}
}
2000035e:	46c0      	nop			; (mov r8, r8)
20000360:	46bd      	mov	sp, r7
20000362:	b002      	add	sp, #8
20000364:	bd80      	pop	{r7, pc}

20000366 <delay_micro>:

void delay_micro(int us)
{
20000366:	b580      	push	{r7, lr}
20000368:	b082      	sub	sp, #8
2000036a:	af00      	add	r7, sp, #0
2000036c:	6078      	str	r0, [r7, #4]
	while(us > 0)
2000036e:	e00a      	b.n	20000386 <delay_micro+0x20>
	{
	delay_250ns();
20000370:	f000 f810 	bl	20000394 <delay_250ns>
	delay_250ns();
20000374:	f000 f80e 	bl	20000394 <delay_250ns>
	delay_250ns();
20000378:	f000 f80c 	bl	20000394 <delay_250ns>
	delay_250ns();
2000037c:	f000 f80a 	bl	20000394 <delay_250ns>
	us--;
20000380:	687b      	ldr	r3, [r7, #4]
20000382:	3b01      	subs	r3, #1
20000384:	607b      	str	r3, [r7, #4]
	while(us > 0)
20000386:	687b      	ldr	r3, [r7, #4]
20000388:	2b00      	cmp	r3, #0
2000038a:	dcf1      	bgt.n	20000370 <delay_micro+0xa>
	}
}
2000038c:	46c0      	nop			; (mov r8, r8)
2000038e:	46bd      	mov	sp, r7
20000390:	b002      	add	sp, #8
20000392:	bd80      	pop	{r7, pc}

20000394 <delay_250ns>:

void delay_250ns(void)
{
20000394:	b580      	push	{r7, lr}
20000396:	b082      	sub	sp, #8
20000398:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000039a:	4b10      	ldr	r3, [pc, #64]	; (200003dc <delay_250ns+0x48>)
2000039c:	2200      	movs	r2, #0
2000039e:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 0x29; //0x2A - 1
200003a0:	4b0f      	ldr	r3, [pc, #60]	; (200003e0 <delay_250ns+0x4c>)
200003a2:	2229      	movs	r2, #41	; 0x29
200003a4:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0x0;
200003a6:	4b0f      	ldr	r3, [pc, #60]	; (200003e4 <delay_250ns+0x50>)
200003a8:	2200      	movs	r2, #0
200003aa:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200003ac:	4b0b      	ldr	r3, [pc, #44]	; (200003dc <delay_250ns+0x48>)
200003ae:	2205      	movs	r2, #5
200003b0:	601a      	str	r2, [r3, #0]
	unsigned int ctrl = *STK_CTRL & 0x10000;
200003b2:	4b0a      	ldr	r3, [pc, #40]	; (200003dc <delay_250ns+0x48>)
200003b4:	681a      	ldr	r2, [r3, #0]
200003b6:	2380      	movs	r3, #128	; 0x80
200003b8:	025b      	lsls	r3, r3, #9
200003ba:	4013      	ands	r3, r2
200003bc:	607b      	str	r3, [r7, #4]
	while((*STK_CTRL & 0x10000) == 0);
200003be:	46c0      	nop			; (mov r8, r8)
200003c0:	4b06      	ldr	r3, [pc, #24]	; (200003dc <delay_250ns+0x48>)
200003c2:	681a      	ldr	r2, [r3, #0]
200003c4:	2380      	movs	r3, #128	; 0x80
200003c6:	025b      	lsls	r3, r3, #9
200003c8:	4013      	ands	r3, r2
200003ca:	d0f9      	beq.n	200003c0 <delay_250ns+0x2c>
	*STK_CTRL= 0;
200003cc:	4b03      	ldr	r3, [pc, #12]	; (200003dc <delay_250ns+0x48>)
200003ce:	2200      	movs	r2, #0
200003d0:	601a      	str	r2, [r3, #0]
	
}
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	46bd      	mov	sp, r7
200003d6:	b002      	add	sp, #8
200003d8:	bd80      	pop	{r7, pc}
200003da:	46c0      	nop			; (mov r8, r8)
200003dc:	e000e010 	and	lr, r0, r0, lsl r0
200003e0:	e000e014 	and	lr, r0, r4, lsl r0
200003e4:	e000e018 	and	lr, r0, r8, lsl r0

200003e8 <delay_500ns>:

void delay_500ns(void)
{
200003e8:	b580      	push	{r7, lr}
200003ea:	af00      	add	r7, sp, #0
	delay_250ns();
200003ec:	f7ff ffd2 	bl	20000394 <delay_250ns>
	delay_250ns();
200003f0:	f7ff ffd0 	bl	20000394 <delay_250ns>
}
200003f4:	46c0      	nop			; (mov r8, r8)
200003f6:	46bd      	mov	sp, r7
200003f8:	bd80      	pop	{r7, pc}

200003fa <graphic_initialize>:

void graphic_initialize(void)
{
200003fa:	b580      	push	{r7, lr}
200003fc:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003fe:	2040      	movs	r0, #64	; 0x40
20000400:	f7ff ff2c 	bl	2000025c <graphic_ctrl_bit_set>
	delay_micro(10);
20000404:	200a      	movs	r0, #10
20000406:	f7ff ffae 	bl	20000366 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
2000040a:	2078      	movs	r0, #120	; 0x78
2000040c:	f7ff ff48 	bl	200002a0 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000410:	201e      	movs	r0, #30
20000412:	f7ff ff96 	bl	20000342 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000416:	2020      	movs	r0, #32
20000418:	f7ff ff20 	bl	2000025c <graphic_ctrl_bit_set>
	delay_milli(100);
2000041c:	2064      	movs	r0, #100	; 0x64
2000041e:	f7ff ff90 	bl	20000342 <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000422:	2118      	movs	r1, #24
20000424:	203e      	movs	r0, #62	; 0x3e
20000426:	f7ff fec1 	bl	200001ac <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000042a:	2118      	movs	r1, #24
2000042c:	203f      	movs	r0, #63	; 0x3f
2000042e:	f7ff febd 	bl	200001ac <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000432:	2118      	movs	r1, #24
20000434:	20c0      	movs	r0, #192	; 0xc0
20000436:	f7ff feb9 	bl	200001ac <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000043a:	2118      	movs	r1, #24
2000043c:	2040      	movs	r0, #64	; 0x40
2000043e:	f7ff feb5 	bl	200001ac <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000442:	2118      	movs	r1, #24
20000444:	20b8      	movs	r0, #184	; 0xb8
20000446:	f7ff feb1 	bl	200001ac <graphic_write_command>
	select_controller(0);
2000044a:	2000      	movs	r0, #0
2000044c:	f7ff ff4c 	bl	200002e8 <select_controller>
}
20000450:	46c0      	nop			; (mov r8, r8)
20000452:	46bd      	mov	sp, r7
20000454:	bd80      	pop	{r7, pc}

20000456 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000456:	b580      	push	{r7, lr}
20000458:	b082      	sub	sp, #8
2000045a:	af00      	add	r7, sp, #0
	for(unsigned int page = 0; page < 8; page++)
2000045c:	2300      	movs	r3, #0
2000045e:	607b      	str	r3, [r7, #4]
20000460:	e01d      	b.n	2000049e <graphic_clear_screen+0x48>
	{
		graphic_write_command(LCD_SET_PAGE|page,B_CS1|B_CS2);
20000462:	687b      	ldr	r3, [r7, #4]
20000464:	b2db      	uxtb	r3, r3
20000466:	2248      	movs	r2, #72	; 0x48
20000468:	4252      	negs	r2, r2
2000046a:	4313      	orrs	r3, r2
2000046c:	b2db      	uxtb	r3, r3
2000046e:	2118      	movs	r1, #24
20000470:	0018      	movs	r0, r3
20000472:	f7ff fe9b 	bl	200001ac <graphic_write_command>
		graphic_write_command(LCD_SET_ADD|0,B_CS1|B_CS2);
20000476:	2118      	movs	r1, #24
20000478:	2040      	movs	r0, #64	; 0x40
2000047a:	f7ff fe97 	bl	200001ac <graphic_write_command>
		for(unsigned int add = 0; add<64;add++)
2000047e:	2300      	movs	r3, #0
20000480:	603b      	str	r3, [r7, #0]
20000482:	e006      	b.n	20000492 <graphic_clear_screen+0x3c>
		{
			graphic_write_data(0, B_CS1|B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2000      	movs	r0, #0
20000488:	f7ff feb0 	bl	200001ec <graphic_write_data>
		for(unsigned int add = 0; add<64;add++)
2000048c:	683b      	ldr	r3, [r7, #0]
2000048e:	3301      	adds	r3, #1
20000490:	603b      	str	r3, [r7, #0]
20000492:	683b      	ldr	r3, [r7, #0]
20000494:	2b3f      	cmp	r3, #63	; 0x3f
20000496:	d9f5      	bls.n	20000484 <graphic_clear_screen+0x2e>
	for(unsigned int page = 0; page < 8; page++)
20000498:	687b      	ldr	r3, [r7, #4]
2000049a:	3301      	adds	r3, #1
2000049c:	607b      	str	r3, [r7, #4]
2000049e:	687b      	ldr	r3, [r7, #4]
200004a0:	2b07      	cmp	r3, #7
200004a2:	d9de      	bls.n	20000462 <graphic_clear_screen+0xc>
		}
	}
}
200004a4:	46c0      	nop			; (mov r8, r8)
200004a6:	46bd      	mov	sp, r7
200004a8:	b002      	add	sp, #8
200004aa:	bd80      	pop	{r7, pc}

200004ac <pixel>:

void pixel(int x, int y, int set)
{
200004ac:	b5b0      	push	{r4, r5, r7, lr}
200004ae:	b088      	sub	sp, #32
200004b0:	af00      	add	r7, sp, #0
200004b2:	60f8      	str	r0, [r7, #12]
200004b4:	60b9      	str	r1, [r7, #8]
200004b6:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200004b8:	68fb      	ldr	r3, [r7, #12]
200004ba:	2b00      	cmp	r3, #0
200004bc:	dc00      	bgt.n	200004c0 <pixel+0x14>
200004be:	e0b6      	b.n	2000062e <pixel+0x182>
200004c0:	68bb      	ldr	r3, [r7, #8]
200004c2:	2b00      	cmp	r3, #0
200004c4:	dc00      	bgt.n	200004c8 <pixel+0x1c>
200004c6:	e0b2      	b.n	2000062e <pixel+0x182>
200004c8:	68fb      	ldr	r3, [r7, #12]
200004ca:	2b80      	cmp	r3, #128	; 0x80
200004cc:	dd00      	ble.n	200004d0 <pixel+0x24>
200004ce:	e0ae      	b.n	2000062e <pixel+0x182>
200004d0:	68bb      	ldr	r3, [r7, #8]
200004d2:	2b40      	cmp	r3, #64	; 0x40
200004d4:	dd00      	ble.n	200004d8 <pixel+0x2c>
200004d6:	e0aa      	b.n	2000062e <pixel+0x182>
	
	index = (y-1)/8;
200004d8:	68bb      	ldr	r3, [r7, #8]
200004da:	3b01      	subs	r3, #1
200004dc:	2b00      	cmp	r3, #0
200004de:	da00      	bge.n	200004e2 <pixel+0x36>
200004e0:	3307      	adds	r3, #7
200004e2:	10db      	asrs	r3, r3, #3
200004e4:	61bb      	str	r3, [r7, #24]
	
	switch((y-1)%8){
200004e6:	68bb      	ldr	r3, [r7, #8]
200004e8:	3b01      	subs	r3, #1
200004ea:	4a53      	ldr	r2, [pc, #332]	; (20000638 <pixel+0x18c>)
200004ec:	4013      	ands	r3, r2
200004ee:	d504      	bpl.n	200004fa <pixel+0x4e>
200004f0:	3b01      	subs	r3, #1
200004f2:	2208      	movs	r2, #8
200004f4:	4252      	negs	r2, r2
200004f6:	4313      	orrs	r3, r2
200004f8:	3301      	adds	r3, #1
200004fa:	2b07      	cmp	r3, #7
200004fc:	d82c      	bhi.n	20000558 <pixel+0xac>
200004fe:	009a      	lsls	r2, r3, #2
20000500:	4b4e      	ldr	r3, [pc, #312]	; (2000063c <pixel+0x190>)
20000502:	18d3      	adds	r3, r2, r3
20000504:	681b      	ldr	r3, [r3, #0]
20000506:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000508:	231f      	movs	r3, #31
2000050a:	18fb      	adds	r3, r7, r3
2000050c:	2201      	movs	r2, #1
2000050e:	701a      	strb	r2, [r3, #0]
20000510:	e022      	b.n	20000558 <pixel+0xac>
		case 1: mask = 2; break;
20000512:	231f      	movs	r3, #31
20000514:	18fb      	adds	r3, r7, r3
20000516:	2202      	movs	r2, #2
20000518:	701a      	strb	r2, [r3, #0]
2000051a:	e01d      	b.n	20000558 <pixel+0xac>
		case 2: mask = 4; break;
2000051c:	231f      	movs	r3, #31
2000051e:	18fb      	adds	r3, r7, r3
20000520:	2204      	movs	r2, #4
20000522:	701a      	strb	r2, [r3, #0]
20000524:	e018      	b.n	20000558 <pixel+0xac>
		case 3: mask = 8; break;
20000526:	231f      	movs	r3, #31
20000528:	18fb      	adds	r3, r7, r3
2000052a:	2208      	movs	r2, #8
2000052c:	701a      	strb	r2, [r3, #0]
2000052e:	e013      	b.n	20000558 <pixel+0xac>
		case 4: mask = 0x10; break;
20000530:	231f      	movs	r3, #31
20000532:	18fb      	adds	r3, r7, r3
20000534:	2210      	movs	r2, #16
20000536:	701a      	strb	r2, [r3, #0]
20000538:	e00e      	b.n	20000558 <pixel+0xac>
		case 5: mask = 0x20; break;
2000053a:	231f      	movs	r3, #31
2000053c:	18fb      	adds	r3, r7, r3
2000053e:	2220      	movs	r2, #32
20000540:	701a      	strb	r2, [r3, #0]
20000542:	e009      	b.n	20000558 <pixel+0xac>
		case 6: mask = 0x40; break;
20000544:	231f      	movs	r3, #31
20000546:	18fb      	adds	r3, r7, r3
20000548:	2240      	movs	r2, #64	; 0x40
2000054a:	701a      	strb	r2, [r3, #0]
2000054c:	e004      	b.n	20000558 <pixel+0xac>
		case 7: mask = 0x80; break;
2000054e:	231f      	movs	r3, #31
20000550:	18fb      	adds	r3, r7, r3
20000552:	2280      	movs	r2, #128	; 0x80
20000554:	701a      	strb	r2, [r3, #0]
20000556:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0){
20000558:	687b      	ldr	r3, [r7, #4]
2000055a:	2b00      	cmp	r3, #0
2000055c:	d105      	bne.n	2000056a <pixel+0xbe>
		mask = ~mask;
2000055e:	221f      	movs	r2, #31
20000560:	18bb      	adds	r3, r7, r2
20000562:	18ba      	adds	r2, r7, r2
20000564:	7812      	ldrb	r2, [r2, #0]
20000566:	43d2      	mvns	r2, r2
20000568:	701a      	strb	r2, [r3, #0]
	}
	if(x>64){
2000056a:	68fb      	ldr	r3, [r7, #12]
2000056c:	2b40      	cmp	r3, #64	; 0x40
2000056e:	dd07      	ble.n	20000580 <pixel+0xd4>
		controller = B_CS2;
20000570:	231e      	movs	r3, #30
20000572:	18fb      	adds	r3, r7, r3
20000574:	2210      	movs	r2, #16
20000576:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000578:	68fb      	ldr	r3, [r7, #12]
2000057a:	3b41      	subs	r3, #65	; 0x41
2000057c:	60fb      	str	r3, [r7, #12]
2000057e:	e006      	b.n	2000058e <pixel+0xe2>
	}else{
		controller = B_CS1;
20000580:	231e      	movs	r3, #30
20000582:	18fb      	adds	r3, r7, r3
20000584:	2208      	movs	r2, #8
20000586:	701a      	strb	r2, [r3, #0]
		x = x-1;
20000588:	68fb      	ldr	r3, [r7, #12]
2000058a:	3b01      	subs	r3, #1
2000058c:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD | x,controller);
2000058e:	68fb      	ldr	r3, [r7, #12]
20000590:	b25b      	sxtb	r3, r3
20000592:	2240      	movs	r2, #64	; 0x40
20000594:	4313      	orrs	r3, r2
20000596:	b25b      	sxtb	r3, r3
20000598:	b2da      	uxtb	r2, r3
2000059a:	251e      	movs	r5, #30
2000059c:	197b      	adds	r3, r7, r5
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	0019      	movs	r1, r3
200005a2:	0010      	movs	r0, r2
200005a4:	f7ff fe02 	bl	200001ac <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE| index, controller);
200005a8:	69bb      	ldr	r3, [r7, #24]
200005aa:	b25b      	sxtb	r3, r3
200005ac:	2248      	movs	r2, #72	; 0x48
200005ae:	4252      	negs	r2, r2
200005b0:	4313      	orrs	r3, r2
200005b2:	b25b      	sxtb	r3, r3
200005b4:	b2da      	uxtb	r2, r3
200005b6:	197b      	adds	r3, r7, r5
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	0019      	movs	r1, r3
200005bc:	0010      	movs	r0, r2
200005be:	f7ff fdf5 	bl	200001ac <graphic_write_command>
	c = graphic_read_data(controller);
200005c2:	2317      	movs	r3, #23
200005c4:	18fc      	adds	r4, r7, r3
200005c6:	197b      	adds	r3, r7, r5
200005c8:	781b      	ldrb	r3, [r3, #0]
200005ca:	0018      	movs	r0, r3
200005cc:	f7ff fe31 	bl	20000232 <graphic_read_data>
200005d0:	0003      	movs	r3, r0
200005d2:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD| x, controller);
200005d4:	68fb      	ldr	r3, [r7, #12]
200005d6:	b25b      	sxtb	r3, r3
200005d8:	2240      	movs	r2, #64	; 0x40
200005da:	4313      	orrs	r3, r2
200005dc:	b25b      	sxtb	r3, r3
200005de:	b2da      	uxtb	r2, r3
200005e0:	197b      	adds	r3, r7, r5
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	0019      	movs	r1, r3
200005e6:	0010      	movs	r0, r2
200005e8:	f7ff fde0 	bl	200001ac <graphic_write_command>
	
	if(set){
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	2b00      	cmp	r3, #0
200005f0:	d009      	beq.n	20000606 <pixel+0x15a>
		mask = mask | c;
200005f2:	221f      	movs	r2, #31
200005f4:	18bb      	adds	r3, r7, r2
200005f6:	18b9      	adds	r1, r7, r2
200005f8:	2217      	movs	r2, #23
200005fa:	18ba      	adds	r2, r7, r2
200005fc:	7809      	ldrb	r1, [r1, #0]
200005fe:	7812      	ldrb	r2, [r2, #0]
20000600:	430a      	orrs	r2, r1
20000602:	701a      	strb	r2, [r3, #0]
20000604:	e008      	b.n	20000618 <pixel+0x16c>
	}else{
		mask = mask & c;
20000606:	221f      	movs	r2, #31
20000608:	18bb      	adds	r3, r7, r2
2000060a:	18ba      	adds	r2, r7, r2
2000060c:	2117      	movs	r1, #23
2000060e:	1879      	adds	r1, r7, r1
20000610:	7812      	ldrb	r2, [r2, #0]
20000612:	7809      	ldrb	r1, [r1, #0]
20000614:	400a      	ands	r2, r1
20000616:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000618:	231e      	movs	r3, #30
2000061a:	18fb      	adds	r3, r7, r3
2000061c:	781a      	ldrb	r2, [r3, #0]
2000061e:	231f      	movs	r3, #31
20000620:	18fb      	adds	r3, r7, r3
20000622:	781b      	ldrb	r3, [r3, #0]
20000624:	0011      	movs	r1, r2
20000626:	0018      	movs	r0, r3
20000628:	f7ff fde0 	bl	200001ec <graphic_write_data>
2000062c:	e000      	b.n	20000630 <pixel+0x184>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
2000062e:	46c0      	nop			; (mov r8, r8)
}
20000630:	46bd      	mov	sp, r7
20000632:	b008      	add	sp, #32
20000634:	bdb0      	pop	{r4, r5, r7, pc}
20000636:	46c0      	nop			; (mov r8, r8)
20000638:	80000007 	andhi	r0, r0, r7
2000063c:	20000708 	andcs	r0, r0, r8, lsl #14

20000640 <main>:

void main(void)
{
20000640:	b580      	push	{r7, lr}
20000642:	b082      	sub	sp, #8
20000644:	af00      	add	r7, sp, #0
	uint8_t i;
	init_app();
20000646:	f7ff fce3 	bl	20000010 <init_app>
	graphic_initialize();
2000064a:	f7ff fed6 	bl	200003fa <graphic_initialize>
	#ifndef SIMULATOR
		graphic_clear_screen();
2000064e:	f7ff ff02 	bl	20000456 <graphic_clear_screen>
	#endif
	
	for(i = 0; i < 128; i++){
20000652:	1dfb      	adds	r3, r7, #7
20000654:	2200      	movs	r2, #0
20000656:	701a      	strb	r2, [r3, #0]
20000658:	e00b      	b.n	20000672 <main+0x32>
		pixel(i,10,1);
2000065a:	1dfb      	adds	r3, r7, #7
2000065c:	781b      	ldrb	r3, [r3, #0]
2000065e:	2201      	movs	r2, #1
20000660:	210a      	movs	r1, #10
20000662:	0018      	movs	r0, r3
20000664:	f7ff ff22 	bl	200004ac <pixel>
	for(i = 0; i < 128; i++){
20000668:	1dfb      	adds	r3, r7, #7
2000066a:	781a      	ldrb	r2, [r3, #0]
2000066c:	1dfb      	adds	r3, r7, #7
2000066e:	3201      	adds	r2, #1
20000670:	701a      	strb	r2, [r3, #0]
20000672:	1dfb      	adds	r3, r7, #7
20000674:	781b      	ldrb	r3, [r3, #0]
20000676:	b25b      	sxtb	r3, r3
20000678:	2b00      	cmp	r3, #0
2000067a:	daee      	bge.n	2000065a <main+0x1a>
	}
	for(i = 0; i<64; i++){
2000067c:	1dfb      	adds	r3, r7, #7
2000067e:	2200      	movs	r2, #0
20000680:	701a      	strb	r2, [r3, #0]
20000682:	e00b      	b.n	2000069c <main+0x5c>
		pixel(10,i,1);
20000684:	1dfb      	adds	r3, r7, #7
20000686:	781b      	ldrb	r3, [r3, #0]
20000688:	2201      	movs	r2, #1
2000068a:	0019      	movs	r1, r3
2000068c:	200a      	movs	r0, #10
2000068e:	f7ff ff0d 	bl	200004ac <pixel>
	for(i = 0; i<64; i++){
20000692:	1dfb      	adds	r3, r7, #7
20000694:	781a      	ldrb	r2, [r3, #0]
20000696:	1dfb      	adds	r3, r7, #7
20000698:	3201      	adds	r2, #1
2000069a:	701a      	strb	r2, [r3, #0]
2000069c:	1dfb      	adds	r3, r7, #7
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	2b3f      	cmp	r3, #63	; 0x3f
200006a2:	d9ef      	bls.n	20000684 <main+0x44>
	}
	delay_milli(500);
200006a4:	23fa      	movs	r3, #250	; 0xfa
200006a6:	005b      	lsls	r3, r3, #1
200006a8:	0018      	movs	r0, r3
200006aa:	f7ff fe4a 	bl	20000342 <delay_milli>
	for(i = 0; i<128; i++){
200006ae:	1dfb      	adds	r3, r7, #7
200006b0:	2200      	movs	r2, #0
200006b2:	701a      	strb	r2, [r3, #0]
200006b4:	e00b      	b.n	200006ce <main+0x8e>
		pixel(i,10,0);
200006b6:	1dfb      	adds	r3, r7, #7
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	2200      	movs	r2, #0
200006bc:	210a      	movs	r1, #10
200006be:	0018      	movs	r0, r3
200006c0:	f7ff fef4 	bl	200004ac <pixel>
	for(i = 0; i<128; i++){
200006c4:	1dfb      	adds	r3, r7, #7
200006c6:	781a      	ldrb	r2, [r3, #0]
200006c8:	1dfb      	adds	r3, r7, #7
200006ca:	3201      	adds	r2, #1
200006cc:	701a      	strb	r2, [r3, #0]
200006ce:	1dfb      	adds	r3, r7, #7
200006d0:	781b      	ldrb	r3, [r3, #0]
200006d2:	b25b      	sxtb	r3, r3
200006d4:	2b00      	cmp	r3, #0
200006d6:	daee      	bge.n	200006b6 <main+0x76>
	}
	for(i = 0; i<64; i++){
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	2200      	movs	r2, #0
200006dc:	701a      	strb	r2, [r3, #0]
200006de:	e00b      	b.n	200006f8 <main+0xb8>
		pixel(10,i,0);
200006e0:	1dfb      	adds	r3, r7, #7
200006e2:	781b      	ldrb	r3, [r3, #0]
200006e4:	2200      	movs	r2, #0
200006e6:	0019      	movs	r1, r3
200006e8:	200a      	movs	r0, #10
200006ea:	f7ff fedf 	bl	200004ac <pixel>
	for(i = 0; i<64; i++){
200006ee:	1dfb      	adds	r3, r7, #7
200006f0:	781a      	ldrb	r2, [r3, #0]
200006f2:	1dfb      	adds	r3, r7, #7
200006f4:	3201      	adds	r2, #1
200006f6:	701a      	strb	r2, [r3, #0]
200006f8:	1dfb      	adds	r3, r7, #7
200006fa:	781b      	ldrb	r3, [r3, #0]
200006fc:	2b3f      	cmp	r3, #63	; 0x3f
200006fe:	d9ef      	bls.n	200006e0 <main+0xa0>
		
		
		/*graphic_write_command(LCD_SET_ADD|10,B_CS1|B_CS2);
		graphic_write_command(LCD_SET_PAGE|1,B_CS1|B_CS2);
		graphic_write_data(0xFF,B_CS1|B_CS2);*/
}
20000700:	46c0      	nop			; (mov r8, r8)
20000702:	46bd      	mov	sp, r7
20000704:	b002      	add	sp, #8
20000706:	bd80      	pop	{r7, pc}
20000708:	20000508 	andcs	r0, r0, r8, lsl #10
2000070c:	20000512 	andcs	r0, r0, r2, lsl r5
20000710:	2000051c 	andcs	r0, r0, ip, lsl r5
20000714:	20000526 	andcs	r0, r0, r6, lsr #10
20000718:	20000530 	andcs	r0, r0, r0, lsr r5
2000071c:	2000053a 	andcs	r0, r0, sl, lsr r5
20000720:	20000544 	andcs	r0, r0, r4, asr #10
20000724:	2000054e 	andcs	r0, r0, lr, asr #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000004d7 	ldrdeq	r0, [r0], -r7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000ea 	andeq	r0, r0, sl, ror #1
  10:	0001e40c 	andeq	lr, r1, ip, lsl #8
  14:	00024a00 	andeq	r4, r2, r0, lsl #20
	...
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	000000c7 	andeq	r0, r0, r7, asr #1
  2c:	00009c03 	andeq	r9, r0, r3, lsl #24
  30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
  34:	02000000 	andeq	r0, r0, #0
  38:	00c50801 	sbceq	r0, r5, r1, lsl #16
  3c:	02020000 	andeq	r0, r2, #0
  40:	00000c05 	andeq	r0, r0, r5, lsl #24
  44:	07020200 	streq	r0, [r2, -r0, lsl #4]
  48:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
  4c:	6a050402 	bvs	14105c <startup-0x1febefa4>
  50:	02000000 	andeq	r0, r0, #0
  54:	01950704 	orrseq	r0, r5, r4, lsl #14
  58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  5c:	00006505 	andeq	r6, r0, r5, lsl #10
  60:	07080200 	streq	r0, [r8, -r0, lsl #4]
  64:	00000190 	muleq	r0, r0, r1
  68:	69050404 	stmdbvs	r5, {r2, sl}
  6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  70:	019a0704 	orrseq	r0, sl, r4, lsl #14
  74:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
  78:	03000000 	movweq	r0, #0
  7c:	00002c18 	andeq	r2, r0, r8, lsl ip
  80:	00220500 	eoreq	r0, r2, r0, lsl #10
  84:	2d010000 	stccs	0, cr0, [r1, #-0]
  88:	00064001 	andeq	r4, r6, r1
  8c:	0000c820 	andeq	ip, r0, r0, lsr #16
  90:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
  94:	06000000 	streq	r0, [r0], -r0
  98:	2f010069 	svccs	0x00010069
  9c:	00007601 	andeq	r7, r0, r1, lsl #12
  a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  a4:	00000500 	andeq	r0, r0, r0, lsl #10
  a8:	01010000 	mrseq	r0, (UNDEF: 1)
  ac:	0004ac01 	andeq	sl, r4, r1, lsl #24
  b0:	00019420 	andeq	r9, r1, r0, lsr #8
  b4:	1f9c0100 	svcne	0x009c0100
  b8:	07000001 	streq	r0, [r0, -r1]
  bc:	01010078 	tsteq	r1, r8, ror r0
  c0:	00006801 	andeq	r6, r0, r1, lsl #16
  c4:	5c910200 	lfmpl	f0, 4, [r1], {0}
  c8:	01007907 	tsteq	r0, r7, lsl #18
  cc:	00680101 	rsbeq	r0, r8, r1, lsl #2
  d0:	91020000 	mrsls	r0, (UNDEF: 2)
  d4:	65730758 	ldrbvs	r0, [r3, #-1880]!	; 0xfffff8a8
  d8:	01010074 	tsteq	r1, r4, ror r0
  dc:	00006801 	andeq	r6, r0, r1, lsl #16
  e0:	54910200 	ldrpl	r0, [r1], #512	; 0x200
  e4:	00024508 	andeq	r4, r2, r8, lsl #10
  e8:	01030100 	mrseq	r0, (UNDEF: 19)
  ec:	00000076 	andeq	r0, r0, r6, ror r0
  f0:	066f9102 	strbteq	r9, [pc], -r2, lsl #2
  f4:	03010063 	movweq	r0, #4195	; 0x1063
  f8:	00007601 	andeq	r7, r0, r1, lsl #12
  fc:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 100:	00007a08 	andeq	r7, r0, r8, lsl #20
 104:	01030100 	mrseq	r0, (UNDEF: 19)
 108:	00000076 	andeq	r0, r0, r6, ror r0
 10c:	086e9102 	stmdaeq	lr!, {r1, r8, ip, pc}^
 110:	00000006 	andeq	r0, r0, r6
 114:	68010401 	stmdavs	r1, {r0, sl}
 118:	02000000 	andeq	r0, r0, #0
 11c:	09006891 	stmdbeq	r0, {r0, r4, r7, fp, sp, lr}
 120:	00000043 	andeq	r0, r0, r3, asr #32
 124:	0456f401 	ldrbeq	pc, [r6], #-1025	; 0xfffffbff	; <UNPREDICTABLE>
 128:	00562000 	subseq	r2, r6, r0
 12c:	9c010000 	stcls	0, cr0, [r1], {-0}
 130:	00000165 	andeq	r0, r0, r5, ror #2
 134:	00045c0a 	andeq	r5, r4, sl, lsl #24
 138:	00004820 	andeq	r4, r0, r0, lsr #16
 13c:	00850b00 	addeq	r0, r5, r0, lsl #22
 140:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
 144:	0000006f 	andeq	r0, r0, pc, rrx
 148:	0a749102 	beq	1d24558 <startup-0x1e2dbaa8>
 14c:	2000047e 	andcs	r0, r0, lr, ror r4
 150:	0000001a 	andeq	r0, r0, sl, lsl r0
 154:	6464610c 	strbtvs	r6, [r4], #-268	; 0xfffffef4
 158:	6ffa0100 	svcvs	0x00fa0100
 15c:	02000000 	andeq	r0, r0, #0
 160:	00007091 	muleq	r0, r1, r0
 164:	027d0d00 	rsbseq	r0, sp, #0, 26
 168:	e4010000 	str	r0, [r1], #-0
 16c:	200003fa 	strdcs	r0, [r0], -sl
 170:	0000005c 	andeq	r0, r0, ip, asr r0
 174:	a70d9c01 	strge	r9, [sp, -r1, lsl #24]
 178:	01000001 	tsteq	r0, r1
 17c:	0003e8de 	ldrdeq	lr, [r3], -lr	; <UNPREDICTABLE>
 180:	00001220 	andeq	r1, r0, r0, lsr #4
 184:	0e9c0100 	fmleqe	f0, f4, f0
 188:	00000239 	andeq	r0, r0, r9, lsr r2
 18c:	0394d201 	orrseq	sp, r4, #268435456	; 0x10000000
 190:	00542000 	subseq	r2, r4, r0
 194:	9c010000 	stcls	0, cr0, [r1], {-0}
 198:	000001ab 	andeq	r0, r0, fp, lsr #3
 19c:	0002210b 	andeq	r2, r2, fp, lsl #2
 1a0:	6fd80100 	svcvs	0x00d80100
 1a4:	02000000 	andeq	r0, r0, #0
 1a8:	09007491 	stmdbeq	r0, {r0, r4, r7, sl, ip, sp, lr}
 1ac:	00000016 	andeq	r0, r0, r6, lsl r0
 1b0:	0366c601 	cmneq	r6, #1048576	; 0x100000
 1b4:	002e2000 	eoreq	r2, lr, r0
 1b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1bc:	000001e5 	andeq	r0, r0, r5, ror #3
 1c0:	0073750f 	rsbseq	r7, r3, pc, lsl #10
 1c4:	0068c601 	rsbeq	ip, r8, r1, lsl #12
 1c8:	91020000 	mrsls	r0, (UNDEF: 2)
 1cc:	03700a74 	cmneq	r0, #116, 20	; 0x74000
 1d0:	00162000 	andseq	r2, r6, r0
 1d4:	39100000 	ldmdbcc	r0, {}	; <UNPREDICTABLE>
 1d8:	01000002 	tsteq	r0, r2
 1dc:	000068ca 	andeq	r6, r0, sl, asr #17
 1e0:	00001100 	andeq	r1, r0, r0, lsl #2
 1e4:	00b90900 	adcseq	r0, r9, r0, lsl #18
 1e8:	bd010000 	stclt	0, cr0, [r1, #-0]
 1ec:	20000342 	andcs	r0, r0, r2, asr #6
 1f0:	00000024 	andeq	r0, r0, r4, lsr #32
 1f4:	021f9c01 	andseq	r9, pc, #256	; 0x100
 1f8:	6d0f0000 	stcvs	0, cr0, [pc, #-0]	; 200 <startup-0x1ffffe00>
 1fc:	bd010073 	stclt	0, cr0, [r1, #-460]	; 0xfffffe34
 200:	00000068 	andeq	r0, r0, r8, rrx
 204:	0a749102 	beq	1d24614 <startup-0x1e2db9ec>
 208:	2000034c 	andcs	r0, r0, ip, asr #6
 20c:	0000000c 	andeq	r0, r0, ip
 210:	00001610 	andeq	r1, r0, r0, lsl r6
 214:	68c10100 	stmiavs	r1, {r8}^
 218:	11000000 	mrsne	r0, (UNDEF: 0)
 21c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 220:	00000073 	andeq	r0, r0, r3, ror r0
 224:	02e8a901 	rsceq	sl, r8, #16384	; 0x4000
 228:	005a2000 	subseq	r2, sl, r0
 22c:	9c010000 	stcls	0, cr0, [r1], {-0}
 230:	00000243 	andeq	r0, r0, r3, asr #4
 234:	00007a12 	andeq	r7, r0, r2, lsl sl
 238:	76a90100 	strtvc	r0, [r9], r0, lsl #2
 23c:	02000000 	andeq	r0, r0, #0
 240:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 244:	000000d3 	ldrdeq	r0, [r0], -r3
 248:	02a0a101 	adceq	sl, r0, #1073741824	; 0x40000000
 24c:	00482000 	subeq	r2, r8, r0
 250:	9c010000 	stcls	0, cr0, [r1], {-0}
 254:	00000271 	andeq	r0, r0, r1, ror r2
 258:	0100780f 	tsteq	r0, pc, lsl #16
 25c:	000037a1 	andeq	r3, r0, r1, lsr #15
 260:	6f910200 	svcvs	0x00910200
 264:	0100630c 	tsteq	r0, ip, lsl #6
 268:	000037a3 	andeq	r3, r0, r3, lsr #15
 26c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 270:	01cf0e00 	biceq	r0, pc, r0, lsl #28
 274:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 278:	2000025c 	andcs	r0, r0, ip, asr r2
 27c:	00000044 	andeq	r0, r0, r4, asr #32
 280:	029f9c01 	addseq	r9, pc, #256	; 0x100
 284:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
 288:	76990100 	ldrvc	r0, [r9], r0, lsl #2
 28c:	02000000 	andeq	r0, r0, #0
 290:	630c6f91 	movwvs	r6, #53137	; 0xcf91
 294:	379b0100 	ldrcc	r0, [fp, r0, lsl #2]
 298:	02000000 	andeq	r0, r0, #0
 29c:	13007791 	movwne	r7, #1937	; 0x791
 2a0:	0000008a 	andeq	r0, r0, sl, lsl #1
 2a4:	00769301 	rsbseq	r9, r6, r1, lsl #6
 2a8:	02320000 	eorseq	r0, r2, #0
 2ac:	002a2000 	eoreq	r2, sl, r0
 2b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2b4:	000002c7 	andeq	r0, r0, r7, asr #5
 2b8:	00007a12 	andeq	r7, r0, r2, lsl sl
 2bc:	76930100 	ldrvc	r0, [r3], r0, lsl #2
 2c0:	02000000 	andeq	r0, r0, #0
 2c4:	09007791 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 2c8:	000000a6 	andeq	r0, r0, r6, lsr #1
 2cc:	01ec8a01 	mvneq	r8, r1, lsl #20
 2d0:	00462000 	subeq	r2, r6, r0
 2d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2d8:	00000328 	andeq	r0, r0, r8, lsr #6
 2dc:	00009712 	andeq	r9, r0, r2, lsl r7
 2e0:	768a0100 	strvc	r0, [sl], r0, lsl #2
 2e4:	02000000 	andeq	r0, r0, #0
 2e8:	7a127791 	bvc	49e134 <startup-0x1fb61ecc>
 2ec:	01000000 	mrseq	r0, (UNDEF: 0)
 2f0:	0000768a 	andeq	r7, r0, sl, lsl #13
 2f4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 2f8:	0000d314 	andeq	sp, r0, r4, lsl r3
 2fc:	683a0100 	ldmdavs	sl!, {r8}
 300:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 304:	11000003 	tstne	r0, r3
 308:	00731400 	rsbseq	r1, r3, r0, lsl #8
 30c:	55010000 	strpl	r0, [r1, #-0]
 310:	00000068 	andeq	r0, r0, r8, rrx
 314:	0000031a 	andeq	r0, r0, sl, lsl r3
 318:	cf100011 	svcgt	0x00100011
 31c:	01000001 	tsteq	r0, r1
 320:	0000683d 	andeq	r6, r0, sp, lsr r8
 324:	00001100 	andeq	r1, r0, r0, lsl #2
 328:	00002709 	andeq	r2, r0, r9, lsl #14
 32c:	ac820100 	stfges	f0, [r2], {0}
 330:	40200001 	eormi	r0, r0, r1
 334:	01000000 	mrseq	r0, (UNDEF: 0)
 338:	0003789c 	muleq	r3, ip, r8
 33c:	00351200 	eorseq	r1, r5, r0, lsl #4
 340:	82010000 	andhi	r0, r1, #0
 344:	00000076 	andeq	r0, r0, r6, ror r0
 348:	12779102 	rsbsne	r9, r7, #-2147483648	; 0x80000000
 34c:	0000007a 	andeq	r0, r0, sl, ror r0
 350:	00768201 	rsbseq	r8, r6, r1, lsl #4
 354:	91020000 	mrsls	r0, (UNDEF: 2)
 358:	00d31476 	sbcseq	r1, r3, r6, ror r4
 35c:	3a010000 	bcc	40364 <startup-0x1ffbfc9c>
 360:	00000068 	andeq	r0, r0, r8, rrx
 364:	0000036a 	andeq	r0, r0, sl, ror #6
 368:	73100011 	tstvc	r0, #17
 36c:	01000000 	mrseq	r0, (UNDEF: 0)
 370:	00006855 	andeq	r6, r0, r5, asr r8
 374:	00001100 	andeq	r1, r0, r0, lsl #2
 378:	00018209 	andeq	r8, r1, r9, lsl #4
 37c:	2c690100 	stfcse	f0, [r9], #-0
 380:	80200001 	eorhi	r0, r0, r1
 384:	01000000 	mrseq	r0, (UNDEF: 0)
 388:	0003f39c 	muleq	r3, ip, r3
 38c:	003d1200 	eorseq	r1, sp, r0, lsl #4
 390:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
 394:	00000076 	andeq	r0, r0, r6, ror r0
 398:	12779102 	rsbsne	r9, r7, #-2147483648	; 0x80000000
 39c:	0000007a 	andeq	r0, r0, sl, ror r0
 3a0:	00766901 	rsbseq	r6, r6, r1, lsl #18
 3a4:	91020000 	mrsls	r0, (UNDEF: 2)
 3a8:	00631576 	rsbeq	r1, r3, r6, ror r5
 3ac:	00766b01 	rsbseq	r6, r6, r1, lsl #22
 3b0:	73140000 	tstvc	r4, #0
 3b4:	01000000 	mrseq	r0, (UNDEF: 0)
 3b8:	00006855 	andeq	r6, r0, r5, asr r8
 3bc:	0003c300 	andeq	ip, r3, r0, lsl #6
 3c0:	14001100 	strne	r1, [r0], #-256	; 0xffffff00
 3c4:	000001a7 	andeq	r0, r0, r7, lsr #3
 3c8:	00683e01 	rsbeq	r3, r8, r1, lsl #28
 3cc:	03d40000 	bicseq	r0, r4, #0
 3d0:	00110000 	andseq	r0, r1, r0
 3d4:	0001cf14 	andeq	ip, r1, r4, lsl pc
 3d8:	683d0100 	ldmdavs	sp!, {r8}
 3dc:	e5000000 	str	r0, [r0, #-0]
 3e0:	11000003 	tstne	r0, r3
 3e4:	00d31000 	sbcseq	r1, r3, r0
 3e8:	3a010000 	bcc	403f0 <startup-0x1ffbfc10>
 3ec:	00000068 	andeq	r0, r0, r8, rrx
 3f0:	16000011 			; <UNDEFINED> instruction: 0x16000011
 3f4:	00000058 	andeq	r0, r0, r8, asr r0
 3f8:	00764f01 	rsbseq	r4, r6, r1, lsl #30
 3fc:	00980000 	addseq	r0, r8, r0
 400:	00942000 	addseq	r2, r4, r0
 404:	9c010000 	stcls	0, cr0, [r1], {-0}
 408:	00000467 	andeq	r0, r0, r7, ror #8
 40c:	00007a12 	andeq	r7, r0, r2, lsl sl
 410:	764f0100 	strbvc	r0, [pc], -r0, lsl #2
 414:	02000000 	andeq	r0, r0, #0
 418:	630c6f91 	movwvs	r6, #53137	; 0xcf91
 41c:	76510100 	ldrbvc	r0, [r1], -r0, lsl #2
 420:	02000000 	andeq	r0, r0, #0
 424:	d3147791 	tstle	r4, #38010880	; 0x2440000
 428:	01000000 	mrseq	r0, (UNDEF: 0)
 42c:	0000683a 	andeq	r6, r0, sl, lsr r8
 430:	00043700 	andeq	r3, r4, r0, lsl #14
 434:	14001100 	strne	r1, [r0], #-256	; 0xffffff00
 438:	000001cf 	andeq	r0, r0, pc, asr #3
 43c:	00683d01 	rsbeq	r3, r8, r1, lsl #26
 440:	04480000 	strbeq	r0, [r8], #-0
 444:	00110000 	andseq	r0, r1, r0
 448:	00007314 	andeq	r7, r0, r4, lsl r3
 44c:	68550100 	ldmdavs	r5, {r8}^
 450:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
 454:	11000004 	tstne	r0, r4
 458:	01a71000 			; <UNDEFINED> instruction: 0x01a71000
 45c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 460:	00000068 	andeq	r0, r0, r8, rrx
 464:	17000011 	smladne	r0, r1, r0, r0
 468:	00000226 	andeq	r0, r0, r6, lsr #4
 46c:	00283701 	eoreq	r3, r8, r1, lsl #14
 470:	00702000 	rsbseq	r2, r0, r0
 474:	9c010000 	stcls	0, cr0, [r1], {-0}
 478:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 47c:	0100630c 	tsteq	r0, ip, lsl #6
 480:	00007639 	andeq	r7, r0, r9, lsr r6
 484:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 488:	0000d314 	andeq	sp, r0, r4, lsl r3
 48c:	683a0100 	ldmdavs	sl!, {r8}
 490:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
 494:	11000004 	tstne	r0, r4
 498:	01cf1400 	biceq	r1, pc, r0, lsl #8
 49c:	3d010000 	stccc	0, cr0, [r1, #-0]
 4a0:	00000068 	andeq	r0, r0, r8, rrx
 4a4:	000004aa 	andeq	r0, r0, sl, lsr #9
 4a8:	a7100011 			; <UNDEFINED> instruction: 0xa7100011
 4ac:	01000001 	tsteq	r0, r1
 4b0:	0000683e 	andeq	r6, r0, lr, lsr r8
 4b4:	00001100 	andeq	r1, r0, r0, lsl #2
 4b8:	0001c618 	andeq	ip, r1, r8, lsl r6
 4bc:	10300100 	eorsne	r0, r0, r0, lsl #2
 4c0:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 4c4:	01000000 	mrseq	r0, (UNDEF: 0)
 4c8:	0290189c 	addseq	r1, r0, #156, 16	; 0x9c0000
 4cc:	26010000 	strcs	r0, [r1], -r0
 4d0:	20000000 	andcs	r0, r0, r0
 4d4:	0000000c 	andeq	r0, r0, ip
 4d8:	Address 0x000004d8 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
  38:	03193f01 	tsteq	r9, #1, 30
  3c:	3b0b3a0e 	blcc	2ce87c <startup-0x1fd31784>
  40:	11192705 	tstne	r9, r5, lsl #14
  44:	40061201 	andmi	r1, r6, r1, lsl #4
  48:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  4c:	00001301 	andeq	r1, r0, r1, lsl #6
  50:	03003406 	movweq	r3, #1030	; 0x406
  54:	3b0b3a08 	blcc	2ce87c <startup-0x1fd31784>
  58:	02134905 	andseq	r4, r3, #81920	; 0x14000
  5c:	07000018 	smladeq	r0, r8, r0, r0
  60:	08030005 	stmdaeq	r3, {r0, r2}
  64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  6c:	34080000 	strcc	r0, [r8], #-0
  70:	3a0e0300 	bcc	380c78 <startup-0x1fc7f388>
  74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	00180213 	andseq	r0, r8, r3, lsl r2
  7c:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
  80:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  84:	0b3b0b3a 	bleq	ec2d74 <startup-0x1f13d28c>
  88:	01111927 	tsteq	r1, r7, lsr #18
  8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  90:	01194296 			; <UNDEFINED> instruction: 0x01194296
  94:	0a000013 	beq	e8 <startup-0x1fffff18>
  98:	0111010b 	tsteq	r1, fp, lsl #2
  9c:	00000612 	andeq	r0, r0, r2, lsl r6
  a0:	0300340b 	movweq	r3, #1035	; 0x40b
  a4:	3b0b3a0e 	blcc	2ce8e4 <startup-0x1fd3171c>
  a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  ac:	0c000018 	stceq	0, cr0, [r0], {24}
  b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
  b4:	0b3b0b3a 	bleq	ec2da4 <startup-0x1f13d25c>
  b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  bc:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
  c0:	03193f00 	tsteq	r9, #0, 30
  c4:	3b0b3a0e 	blcc	2ce904 <startup-0x1fd316fc>
  c8:	1119270b 	tstne	r9, fp, lsl #14
  cc:	40061201 	andmi	r1, r6, r1, lsl #4
  d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  d4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  d8:	03193f01 	tsteq	r9, #1, 30
  dc:	3b0b3a0e 	blcc	2ce91c <startup-0x1fd316e4>
  e0:	1119270b 	tstne	r9, fp, lsl #14
  e4:	40061201 	andmi	r1, r6, r1, lsl #4
  e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  ec:	00001301 	andeq	r1, r0, r1, lsl #6
  f0:	0300050f 	movweq	r0, #1295	; 0x50f
  f4:	3b0b3a08 	blcc	2ce91c <startup-0x1fd316e4>
  f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  fc:	10000018 	andne	r0, r0, r8, lsl r0
 100:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 104:	0b3a0e03 	bleq	e83918 <startup-0x1f17c6e8>
 108:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 10c:	0000193c 	andeq	r1, r0, ip, lsr r9
 110:	00001811 	andeq	r1, r0, r1, lsl r8
 114:	00051200 	andeq	r1, r5, r0, lsl #4
 118:	0b3a0e03 	bleq	e8392c <startup-0x1f17c6d4>
 11c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 120:	00001802 	andeq	r1, r0, r2, lsl #16
 124:	3f012e13 	svccc	0x00012e13
 128:	3a0e0319 	bcc	380d94 <startup-0x1fc7f26c>
 12c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 130:	11134919 	tstne	r3, r9, lsl r9
 134:	40061201 	andmi	r1, r6, r1, lsl #4
 138:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 13c:	00001301 	andeq	r1, r0, r1, lsl #6
 140:	3f012e14 	svccc	0x00012e14
 144:	3a0e0319 	bcc	380db0 <startup-0x1fc7f250>
 148:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 14c:	01193c13 	tsteq	r9, r3, lsl ip
 150:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 154:	08030034 	stmdaeq	r3, {r2, r4, r5}
 158:	0b3b0b3a 	bleq	ec2e48 <startup-0x1f13d1b8>
 15c:	00001349 	andeq	r1, r0, r9, asr #6
 160:	03012e16 	movweq	r2, #7702	; 0x1e16
 164:	3b0b3a0e 	blcc	2ce9a4 <startup-0x1fd3165c>
 168:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 16c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 170:	96184006 	ldrls	r4, [r8], -r6
 174:	13011942 	movwne	r1, #6466	; 0x1942
 178:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 17c:	3a0e0301 	bcc	380d88 <startup-0x1fc7f278>
 180:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 184:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 188:	96184006 	ldrls	r4, [r8], -r6
 18c:	13011942 	movwne	r1, #6466	; 0x1942
 190:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 194:	03193f00 	tsteq	r9, #0, 30
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	1119270b 	tstne	r9, fp, lsl #14
 1a0:	40061201 	andmi	r1, r6, r1, lsl #4
 1a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1a8:	Address 0x000001a8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000006f8 	strdeq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000708 	andcs	r0, r0, r8, lsl #14
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000258 	andeq	r0, r0, r8, asr r2
   4:	00ee0002 	rsceq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
  28:	6f442f61 	svcvs	0x00442f61
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; ffffff18 <main+0xdffff8d8>
  38:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; ffffff04 <main+0xdffff8c4>
  3c:	672f504f 	strvs	r5, [pc, -pc, asr #32]!
  40:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  44:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  48:	616c7073 	smcvs	50947	; 0xc703
  4c:	3a630079 	bcc	18c0238 <startup-0x1e73fdc8>
  50:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  54:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  58:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  5c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  60:	6f6f745c 	svcvs	0x006f745c
  64:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  68:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  6c:	615c6d72 	cmpvs	ip, r2, ror sp
  70:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  74:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  78:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  7c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  80:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  84:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
  88:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
  8c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  90:	61657363 	cmnvs	r5, r3, ror #6
  94:	635c7070 	cmpvs	ip, #112	; 0x70
  98:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  9c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  a0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffed8 <main+0xdffff898>
  a4:	63675c73 	cmnvs	r7, #29440	; 0x7300
  a8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  ac:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  b0:	6f6e2d6d 	svcvs	0x006e2d6d
  b4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  b8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  c0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  c4:	00737973 	rsbseq	r7, r3, r3, ror r9
  c8:	61747300 	cmnvs	r4, r0, lsl #6
  cc:	70757472 	rsbsvc	r7, r5, r2, ror r4
  d0:	0100632e 	tsteq	r0, lr, lsr #6
  d4:	645f0000 	ldrbvs	r0, [pc], #-0	; dc <startup-0x1fffff24>
  d8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
  dc:	745f746c 	ldrbvc	r7, [pc], #-1132	; e4 <startup-0x1fffff1c>
  e0:	73657079 	cmnvc	r5, #121	; 0x79
  e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  e8:	735f0000 	cmpvc	pc, #0
  ec:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
  f0:	00682e74 	rsbeq	r2, r8, r4, ror lr
  f4:	00000003 	andeq	r0, r0, r3
  f8:	00020500 	andeq	r0, r2, r0, lsl #10
  fc:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 100:	5e130126 	mufplsp	f0, f3, f6
 104:	01000302 	tsteq	r0, r2, lsl #6
 108:	02050001 	andeq	r0, r5, #1
 10c:	20000010 	andcs	r0, r0, r0, lsl r0
 110:	2f013003 	svccs	0x00013003
 114:	3d3e793d 			; <UNDEFINED> instruction: 0x3d3e793d
 118:	323d3d3d 	eorscc	r3, sp, #3904	; 0xf40
 11c:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 120:	2327452f 			; <UNDEFINED> instruction: 0x2327452f
 124:	3d68cb3d 	fstmdbxcc	r8!, {d28-d57}	;@ Deprecated
 128:	2f593d3d 	svccs	0x00593d3d
 12c:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 130:	303d593e 	eorscc	r5, sp, lr, lsr r9
 134:	3d303d5a 	ldccc	13, cr3, [r0, #-360]!	; 0xfffffe98
 138:	594b92cb 	stmdbpl	fp, {r0, r1, r3, r6, r7, r9, ip, pc}^
 13c:	3f2f3d2f 	svccc	0x002f3d2f
 140:	5a303d59 	bpl	c0f6ac <startup-0x1f3f0954>
 144:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 148:	3d91773d 	ldccc	7, cr7, [r1, #244]	; 0xf4
 14c:	4d833d59 	stcmi	13, cr3, [r3, #356]	; 0x164
 150:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 154:	674d833d 	smlaldxvs	r8, sp, sp, r3
 158:	684d6759 	stmdavs	sp, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
 15c:	694bc959 	stmdbvs	fp, {r0, r3, r4, r6, r8, fp, lr, pc}^
 160:	59c95968 	stmibpl	r9, {r3, r5, r6, r8, fp, ip, lr}^
 164:	10036777 	andne	r6, r3, r7, ror r7
 168:	20700374 	rsbscs	r0, r0, r4, ror r3
 16c:	034a1003 	movteq	r1, #40963	; 0xa003
 170:	223d2072 	eorscs	r2, sp, #114	; 0x72
 174:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 178:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 17c:	3d224b4d 	fstmdbxcc	r2!, {d4-d41}	;@ Deprecated
 180:	4b4d4139 	blmi	135066c <startup-0x1ecaf994>
 184:	2f2f2f22 	svccs	0x002f2f22
 188:	3c7a032f 	ldclcc	3, cr0, [sl], #-188	; 0xffffff44
 18c:	3d3d4d44 	ldccc	13, cr4, [sp, #-272]!	; 0xfffffef0
 190:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
 194:	01040200 	mrseq	r0, R12_usr
 198:	67062006 	strvs	r2, [r6, -r6]
 19c:	2f2faf3e 	svccs	0x002faf3e
 1a0:	3d2f3f2f 	stccc	15, cr3, [pc, #-188]!	; ec <startup-0x1fffff14>
 1a4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 1a8:	4b4b4b3d 	blmi	12d2ea4 <startup-0x1ed2d15c>
 1ac:	3f3d4b4b 	svccc	0x003d4b4b
 1b0:	4b9f3e3d 	blmi	fe7cfaac <main+0xde7cf46c>
 1b4:	03040200 	movweq	r0, #16896	; 0x4200
 1b8:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 1bc:	02004803 	andeq	r4, r0, #196608	; 0x30000
 1c0:	3c060104 	stfccs	f0, [r6], {4}
 1c4:	02040200 	andeq	r0, r4, #0, 4
 1c8:	02003806 	andeq	r3, r0, #393216	; 0x60000
 1cc:	3c060104 	stfccs	f0, [r6], {4}
 1d0:	3c090306 	stccc	3, cr0, [r9], {6}
 1d4:	02006a4d 	andeq	r6, r0, #315392	; 0x4d000
 1d8:	4a060104 	bmi	1805f0 <startup-0x1fe7fa10>
 1dc:	02040200 	andeq	r0, r4, #0, 4
 1e0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 1e4:	4c064a03 			; <UNDEFINED> instruction: 0x4c064a03
 1e8:	59130876 	ldmdbpl	r3, {r1, r2, r4, r5, r6, fp}
 1ec:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 1f0:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 1f4:	4c4b3d68 	mcrrmi	13, 6, r3, fp, cr8
 1f8:	c9c93f4b 	stmibgt	r9, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}^
 1fc:	a03dbc91 	mlasge	sp, r1, ip, fp
 200:	ac5c0392 	mrrcge	3, 9, r0, ip, cr2
 204:	85202503 	strhi	r2, [r0, #-1283]!	; 0xfffffafd
 208:	31302f3e 	teqcc	r0, lr, lsr pc
 20c:	03040200 	movweq	r0, #16896	; 0x4200
 210:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 214:	02007303 	andeq	r7, r0, #201326592	; 0xc000000
 218:	58060104 	stmdapl	r6, {r2, r8}
 21c:	02005b06 	andeq	r5, r0, #6144	; 0x1800
 220:	004b0304 	subeq	r0, fp, r4, lsl #6
 224:	73030402 	movwvc	r0, #13314	; 0x3402
 228:	01040200 	mrseq	r0, R12_usr
 22c:	4d065806 	stcmi	8, cr5, [r6, #-24]	; 0xffffffe8
 230:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 234:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 238:	00730304 	rsbseq	r0, r3, r4, lsl #6
 23c:	06010402 	streq	r0, [r1], -r2, lsl #8
 240:	005b0658 	subseq	r0, fp, r8, asr r6
 244:	4b030402 	blmi	c1254 <startup-0x1ff3edac>
 248:	03040200 	movweq	r0, #16896	; 0x4200
 24c:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
 250:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 254:	024a0903 	subeq	r0, sl, #49152	; 0xc000
 258:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
   4:	6e69006c 	cdpvs	0, 6, cr0, cr9, cr12, {3}
   8:	00786564 	rsbseq	r6, r8, r4, ror #10
   c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  10:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
  14:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
  18:	5f79616c 	svcpl	0x0079616c
  1c:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
  20:	616d006f 	cmnvs	sp, pc, rrx
  24:	67006e69 	strvs	r6, [r0, -r9, ror #28]
  28:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  2c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  30:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  34:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffec0 <main+0xdffff880>
  38:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  3c:	6c617600 	stclvs	6, cr7, [r1], #-0
  40:	67006575 	smlsdxvs	r0, r5, r5, r6
  44:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  48:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
  4c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  50:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
  54:	006e6565 	rsbeq	r6, lr, r5, ror #10
  58:	70617267 	rsbvc	r7, r1, r7, ror #4
  5c:	5f636968 	svcpl	0x00636968
  60:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  64:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  68:	6f6c2067 	svcvs	0x006c2067
  6c:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
  70:	7300746e 	movwvc	r7, #1134	; 0x46e
  74:	63656c65 	cmnvs	r5, #25856	; 0x6500
  78:	6f635f74 	svcvs	0x00635f74
  7c:	6f72746e 	svcvs	0x0072746e
  80:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  84:	67617000 	strbvs	r7, [r1, -r0]!
  88:	72670065 	rsbvc	r0, r7, #101	; 0x65
  8c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  90:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  94:	645f6461 	ldrbvs	r6, [pc], #-1121	; 9c <startup-0x1fffff64>
  98:	00617461 	rsbeq	r7, r1, r1, ror #8
  9c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  a0:	5f38746e 	svcpl	0x0038746e
  a4:	72670074 	rsbvc	r0, r7, #116	; 0x74
  a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  ac:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  b0:	5f657469 	svcpl	0x00657469
  b4:	61746164 	cmnvs	r4, r4, ror #2
  b8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  bc:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 2 <startup-0x1ffffffe>	; <UNPREDICTABLE>
  c0:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
  c4:	736e7500 	cmnvc	lr, #0, 10
  c8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  cc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  d0:	67007261 	strvs	r7, [r0, -r1, ror #4]
  d4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  d8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
  dc:	5f6c7274 	svcpl	0x006c7274
  e0:	5f746962 	svcpl	0x00746962
  e4:	61656c63 	cmnvs	r5, r3, ror #24
  e8:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
  ec:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
  f0:	2e372039 	mrccs	0, 1, r2, cr7, cr9, {1}
  f4:	20312e32 	eorscs	r2, r1, r2, lsr lr
  f8:	37313032 			; <UNDEFINED> instruction: 0x37313032
  fc:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
 100:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 104:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 108:	5b202965 	blpl	80a6a4 <startup-0x1f7f595c>
 10c:	2f4d5241 	svccs	0x004d5241
 110:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
 114:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
 118:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
 11c:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 120:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
 124:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 128:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 12c:	30323535 	eorscc	r3, r2, r5, lsr r5
 130:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
 134:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 138:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 13c:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 140:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 144:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 148:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
 14c:	616f6c66 	cmnvs	pc, r6, ror #24
 150:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 154:	6f733d69 	svcvs	0x00733d69
 158:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 15c:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 160:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 164:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 168:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 16c:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 170:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 174:	304f2d20 	subcc	r2, pc, r0, lsr #26
 178:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 17c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 180:	72670039 	rsbvc	r0, r7, #57	; 0x39
 184:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 188:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 18c:	00657469 	rsbeq	r7, r5, r9, ror #8
 190:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 194:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 198:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 19c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 1a0:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 1a4:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 1a8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1ac:	3030355f 	eorscc	r3, r0, pc, asr r5
 1b0:	7300736e 	movwvc	r7, #878	; 0x36e
 1b4:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 1b8:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 1bc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 1c0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 1c4:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
 1c8:	615f7469 	cmpvs	pc, r9, ror #8
 1cc:	67007070 	smlsdxvs	r0, r0, r0, r7
 1d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1d4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 1d8:	5f6c7274 	svcpl	0x006c7274
 1dc:	5f746962 	svcpl	0x00746962
 1e0:	00746573 	rsbseq	r6, r4, r3, ror r5
 1e4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7a9 <main+0xdffff169>
 1e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1ec:	72614d2f 	rsbvc	r4, r1, #3008	; 0xbc0
 1f0:	442f6169 	strtmi	r6, [pc], #-361	; 1f8 <startup-0x1ffffe08>
 1f4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1f8:	73746e65 	cmnvc	r4, #1616	; 0x650
 1fc:	2f54492f 	svccs	0x0054492f
 200:	2f504f4d 	svccs	0x00504f4d
 204:	2f504f4d 	svccs	0x00504f4d
 208:	70617267 	rsbvc	r7, r1, r7, ror #4
 20c:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 210:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 214:	732f7961 			; <UNDEFINED> instruction: 0x732f7961
 218:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 21c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 220:	72746300 	rsbsvc	r6, r4, #0, 6
 224:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 228:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 22c:	61775f63 	cmnvs	r7, r3, ror #30
 230:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 234:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 238:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 23c:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 240:	736e3035 	cmnvc	lr, #53	; 0x35
 244:	73616d00 	cmnvc	r1, #0, 26
 248:	3a43006b 	bcc	10c03fc <startup-0x1ef3fc04>
 24c:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 250:	4d5c7372 	ldclmi	3, cr7, [ip, #-456]	; 0xfffffe38
 254:	61697261 	cmnvs	r9, r1, ror #4
 258:	636f445c 	cmnvs	pc, #92, 8	; 0x5c000000
 25c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 260:	495c7374 	ldmdbmi	ip, {r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 264:	4f4d5c54 	svcmi	0x004d5c54
 268:	4f4d5c50 	svcmi	0x004d5c50
 26c:	72675c50 	rsbvc	r5, r7, #80, 24	; 0x5000
 270:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 274:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 278:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 27c:	61726700 	cmnvs	r2, r0, lsl #14
 280:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 284:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 288:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 28c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 290:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 294:	00707574 	rsbseq	r7, r0, r4, ror r5

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffecce>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000070 	andeq	r0, r0, r0, ror r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000098 	mulcs	r0, r8, r0
  68:	00000094 	muleq	r0, r4, r0
  6c:	40080e41 	andmi	r0, r8, r1, asr #28
  70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  74:	180e4101 	stmdane	lr, {r0, r8, lr}
  78:	00070d41 	andeq	r0, r7, r1, asr #26
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	2000012c 	andcs	r0, r0, ip, lsr #2
  88:	00000080 	andeq	r0, r0, r0, lsl #1
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	100e4101 	andne	r4, lr, r1, lsl #2
  98:	00070d41 	andeq	r0, r7, r1, asr #26
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200001ac 	andcs	r0, r0, ip, lsr #3
  a8:	00000040 	andeq	r0, r0, r0, asr #32
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200001ec 	andcs	r0, r0, ip, ror #3
  c8:	00000046 	andeq	r0, r0, r6, asr #32
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000232 	andcs	r0, r0, r2, lsr r2
  e8:	0000002a 	andeq	r0, r0, sl, lsr #32
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	2000025c 	andcs	r0, r0, ip, asr r2
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	180e4101 	stmdane	lr, {r0, r8, lr}
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	200002a0 	andcs	r0, r0, r0, lsr #5
 128:	00000048 	andeq	r0, r0, r8, asr #32
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	180e4101 	stmdane	lr, {r0, r8, lr}
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	200002e8 	andcs	r0, r0, r8, ror #5
 148:	0000005a 	andeq	r0, r0, sl, asr r0
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	20000342 	andcs	r0, r0, r2, asr #6
 168:	00000024 	andeq	r0, r0, r4, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	20000366 	andcs	r0, r0, r6, ror #6
 188:	0000002e 	andeq	r0, r0, lr, lsr #32
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000394 	mulcs	r0, r4, r3
 1a8:	00000054 	andeq	r0, r0, r4, asr r0
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200003e8 	andcs	r0, r0, r8, ror #7
 1c8:	00000012 	andeq	r0, r0, r2, lsl r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	200003fa 	strdcs	r0, [r0], -sl
 1e4:	0000005c 	andeq	r0, r0, ip, asr r0
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	20000456 	andcs	r0, r0, r6, asr r4
 200:	00000056 	andeq	r0, r0, r6, asr r0
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	00000024 	andeq	r0, r0, r4, lsr #32
 218:	00000000 	andeq	r0, r0, r0
 21c:	200004ac 	andcs	r0, r0, ip, lsr #9
 220:	00000194 	muleq	r0, r4, r1
 224:	40100e41 	andsmi	r0, r0, r1, asr #28
 228:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 22c:	02874003 	addeq	r4, r7, #3
 230:	41018e40 	tstmi	r1, r0, asr #28
 234:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 238:	00000007 	andeq	r0, r0, r7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	20000640 	andcs	r0, r0, r0, asr #12
 248:	000000c8 	andeq	r0, r0, r8, asr #1
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 254:	100e4101 	andne	r4, lr, r1, lsl #2
 258:	00070d41 	andeq	r0, r7, r1, asr #26
