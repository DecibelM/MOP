
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define LCD_DISP_START 0xC0
#define LCD_BUSY 0x80

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fbd6 	bl	200007b4 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_wait_ready>:
	void(*move)(struct tObj*);
	void(*set_speed)(struct tObj*,int,int);
}OBJECT, *POBJECT;

static void graphic_wait_ready(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000016:	2040      	movs	r0, #64	; 0x40
20000018:	f000 f936 	bl	20000288 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
2000001c:	4b14      	ldr	r3, [pc, #80]	; (20000070 <graphic_wait_ready+0x60>)
2000001e:	4a15      	ldr	r2, [pc, #84]	; (20000074 <graphic_wait_ready+0x64>)
20000020:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000022:	2001      	movs	r0, #1
20000024:	f000 f930 	bl	20000288 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000028:	2002      	movs	r0, #2
2000002a:	f000 f90b 	bl	20000244 <graphic_ctrl_bit_set>
	delay_500ns();
2000002e:	f000 f99f 	bl	20000370 <delay_500ns>
	
	while(1)
	{
		graphic_ctrl_bit_set(B_E);
20000032:	2040      	movs	r0, #64	; 0x40
20000034:	f000 f906 	bl	20000244 <graphic_ctrl_bit_set>
		delay_500ns();
20000038:	f000 f99a 	bl	20000370 <delay_500ns>
		c = *GPIO_IDR_HIGH & LCD_BUSY; //LCD_BUSY?????
2000003c:	4b0e      	ldr	r3, [pc, #56]	; (20000078 <graphic_wait_ready+0x68>)
2000003e:	781b      	ldrb	r3, [r3, #0]
20000040:	b2da      	uxtb	r2, r3
20000042:	1dfb      	adds	r3, r7, #7
20000044:	217f      	movs	r1, #127	; 0x7f
20000046:	438a      	bics	r2, r1
20000048:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000004a:	2040      	movs	r0, #64	; 0x40
2000004c:	f000 f91c 	bl	20000288 <graphic_ctrl_bit_clear>
		delay_500ns();
20000050:	f000 f98e 	bl	20000370 <delay_500ns>
		if(c == 0)
20000054:	1dfb      	adds	r3, r7, #7
20000056:	781b      	ldrb	r3, [r3, #0]
20000058:	2b00      	cmp	r3, #0
2000005a:	d000      	beq.n	2000005e <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000005c:	e7e9      	b.n	20000032 <graphic_wait_ready+0x22>
		{
			break;
2000005e:	46c0      	nop			; (mov r8, r8)
		}
	}
	*GPIO_MODER = 0x55555555;
20000060:	4b03      	ldr	r3, [pc, #12]	; (20000070 <graphic_wait_ready+0x60>)
20000062:	4a06      	ldr	r2, [pc, #24]	; (2000007c <graphic_wait_ready+0x6c>)
20000064:	601a      	str	r2, [r3, #0]
}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	46bd      	mov	sp, r7
2000006a:	b002      	add	sp, #8
2000006c:	bd80      	pop	{r7, pc}
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	40021000 	andmi	r1, r2, r0
20000074:	00005555 	andeq	r5, r0, r5, asr r5
20000078:	40021011 	andmi	r1, r2, r1, lsl r0
2000007c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000080 <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
20000080:	b580      	push	{r7, lr}
20000082:	b084      	sub	sp, #16
20000084:	af00      	add	r7, sp, #0
20000086:	0002      	movs	r2, r0
20000088:	1dfb      	adds	r3, r7, #7
2000008a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
2000008c:	2040      	movs	r0, #64	; 0x40
2000008e:	f000 f8fb 	bl	20000288 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
20000092:	4b1c      	ldr	r3, [pc, #112]	; (20000104 <graphic_read+0x84>)
20000094:	4a1c      	ldr	r2, [pc, #112]	; (20000108 <graphic_read+0x88>)
20000096:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
20000098:	2003      	movs	r0, #3
2000009a:	f000 f8d3 	bl	20000244 <graphic_ctrl_bit_set>
	select_controller(controller);
2000009e:	1dfb      	adds	r3, r7, #7
200000a0:	781b      	ldrb	r3, [r3, #0]
200000a2:	0018      	movs	r0, r3
200000a4:	f000 f914 	bl	200002d0 <select_controller>
	delay_500ns();
200000a8:	f000 f962 	bl	20000370 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200000ac:	2040      	movs	r0, #64	; 0x40
200000ae:	f000 f8c9 	bl	20000244 <graphic_ctrl_bit_set>
	delay_500ns();
200000b2:	f000 f95d 	bl	20000370 <delay_500ns>
	c = *GPIO_IDR_HIGH;
200000b6:	4a15      	ldr	r2, [pc, #84]	; (2000010c <graphic_read+0x8c>)
200000b8:	230f      	movs	r3, #15
200000ba:	18fb      	adds	r3, r7, r3
200000bc:	7812      	ldrb	r2, [r2, #0]
200000be:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200000c0:	2040      	movs	r0, #64	; 0x40
200000c2:	f000 f8e1 	bl	20000288 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
200000c6:	4b0f      	ldr	r3, [pc, #60]	; (20000104 <graphic_read+0x84>)
200000c8:	4a11      	ldr	r2, [pc, #68]	; (20000110 <graphic_read+0x90>)
200000ca:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1){
200000cc:	1dfb      	adds	r3, r7, #7
200000ce:	781b      	ldrb	r3, [r3, #0]
200000d0:	2208      	movs	r2, #8
200000d2:	4013      	ands	r3, r2
200000d4:	d004      	beq.n	200000e0 <graphic_read+0x60>
		select_controller(B_CS1);
200000d6:	2008      	movs	r0, #8
200000d8:	f000 f8fa 	bl	200002d0 <select_controller>
		graphic_wait_ready();
200000dc:	f7ff ff98 	bl	20000010 <graphic_wait_ready>
	}
	if(controller & B_CS2)
200000e0:	1dfb      	adds	r3, r7, #7
200000e2:	781b      	ldrb	r3, [r3, #0]
200000e4:	2210      	movs	r2, #16
200000e6:	4013      	ands	r3, r2
200000e8:	d004      	beq.n	200000f4 <graphic_read+0x74>
	{
		select_controller(B_CS2);
200000ea:	2010      	movs	r0, #16
200000ec:	f000 f8f0 	bl	200002d0 <select_controller>
		graphic_wait_ready();
200000f0:	f7ff ff8e 	bl	20000010 <graphic_wait_ready>
	}
	return c;
200000f4:	230f      	movs	r3, #15
200000f6:	18fb      	adds	r3, r7, r3
200000f8:	781b      	ldrb	r3, [r3, #0]
}
200000fa:	0018      	movs	r0, r3
200000fc:	46bd      	mov	sp, r7
200000fe:	b004      	add	sp, #16
20000100:	bd80      	pop	{r7, pc}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	40021000 	andmi	r1, r2, r0
20000108:	00005555 	andeq	r5, r0, r5, asr r5
2000010c:	40021011 	andmi	r1, r2, r1, lsl r0
20000110:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000114 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
20000114:	b580      	push	{r7, lr}
20000116:	b082      	sub	sp, #8
20000118:	af00      	add	r7, sp, #0
2000011a:	0002      	movs	r2, r0
2000011c:	1dfb      	adds	r3, r7, #7
2000011e:	701a      	strb	r2, [r3, #0]
20000120:	1dbb      	adds	r3, r7, #6
20000122:	1c0a      	adds	r2, r1, #0
20000124:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	*GPIO_ODR_HIGH = value;
20000126:	4a1a      	ldr	r2, [pc, #104]	; (20000190 <graphic_write+0x7c>)
20000128:	1dfb      	adds	r3, r7, #7
2000012a:	781b      	ldrb	r3, [r3, #0]
2000012c:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
2000012e:	1dbb      	adds	r3, r7, #6
20000130:	781b      	ldrb	r3, [r3, #0]
20000132:	0018      	movs	r0, r3
20000134:	f000 f8cc 	bl	200002d0 <select_controller>
	delay_500ns();
20000138:	f000 f91a 	bl	20000370 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000013c:	2040      	movs	r0, #64	; 0x40
2000013e:	f000 f881 	bl	20000244 <graphic_ctrl_bit_set>
	delay_500ns();
20000142:	f000 f915 	bl	20000370 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000146:	2040      	movs	r0, #64	; 0x40
20000148:	f000 f89e 	bl	20000288 <graphic_ctrl_bit_clear>

	
	if(controller & B_CS1){
2000014c:	1dbb      	adds	r3, r7, #6
2000014e:	781b      	ldrb	r3, [r3, #0]
20000150:	2208      	movs	r2, #8
20000152:	4013      	ands	r3, r2
20000154:	d004      	beq.n	20000160 <graphic_write+0x4c>
		select_controller(B_CS1);
20000156:	2008      	movs	r0, #8
20000158:	f000 f8ba 	bl	200002d0 <select_controller>
		graphic_wait_ready();
2000015c:	f7ff ff58 	bl	20000010 <graphic_wait_ready>
	}
	if(controller & B_CS2)
20000160:	1dbb      	adds	r3, r7, #6
20000162:	781b      	ldrb	r3, [r3, #0]
20000164:	2210      	movs	r2, #16
20000166:	4013      	ands	r3, r2
20000168:	d004      	beq.n	20000174 <graphic_write+0x60>
	{
		select_controller(B_CS2);
2000016a:	2010      	movs	r0, #16
2000016c:	f000 f8b0 	bl	200002d0 <select_controller>
		graphic_wait_ready();
20000170:	f7ff ff4e 	bl	20000010 <graphic_wait_ready>
	}
	*GPIO_ODR_HIGH = 0;
20000174:	4b06      	ldr	r3, [pc, #24]	; (20000190 <graphic_write+0x7c>)
20000176:	2200      	movs	r2, #0
20000178:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000017a:	2040      	movs	r0, #64	; 0x40
2000017c:	f000 f862 	bl	20000244 <graphic_ctrl_bit_set>
	select_controller(0);
20000180:	2000      	movs	r0, #0
20000182:	f000 f8a5 	bl	200002d0 <select_controller>
}
20000186:	46c0      	nop			; (mov r8, r8)
20000188:	46bd      	mov	sp, r7
2000018a:	b002      	add	sp, #8
2000018c:	bd80      	pop	{r7, pc}
2000018e:	46c0      	nop			; (mov r8, r8)
20000190:	40021015 	andmi	r1, r2, r5, lsl r0

20000194 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller)
{
20000194:	b580      	push	{r7, lr}
20000196:	b082      	sub	sp, #8
20000198:	af00      	add	r7, sp, #0
2000019a:	0002      	movs	r2, r0
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	701a      	strb	r2, [r3, #0]
200001a0:	1dbb      	adds	r3, r7, #6
200001a2:	1c0a      	adds	r2, r1, #0
200001a4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200001a6:	2040      	movs	r0, #64	; 0x40
200001a8:	f000 f86e 	bl	20000288 <graphic_ctrl_bit_clear>
	select_controller(controller);
200001ac:	1dbb      	adds	r3, r7, #6
200001ae:	781b      	ldrb	r3, [r3, #0]
200001b0:	0018      	movs	r0, r3
200001b2:	f000 f88d 	bl	200002d0 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200001b6:	2003      	movs	r0, #3
200001b8:	f000 f866 	bl	20000288 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200001bc:	1dbb      	adds	r3, r7, #6
200001be:	781a      	ldrb	r2, [r3, #0]
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	781b      	ldrb	r3, [r3, #0]
200001c4:	0011      	movs	r1, r2
200001c6:	0018      	movs	r0, r3
200001c8:	f7ff ffa4 	bl	20000114 <graphic_write>
}
200001cc:	46c0      	nop			; (mov r8, r8)
200001ce:	46bd      	mov	sp, r7
200001d0:	b002      	add	sp, #8
200001d2:	bd80      	pop	{r7, pc}

200001d4 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
200001d4:	b580      	push	{r7, lr}
200001d6:	b082      	sub	sp, #8
200001d8:	af00      	add	r7, sp, #0
200001da:	0002      	movs	r2, r0
200001dc:	1dfb      	adds	r3, r7, #7
200001de:	701a      	strb	r2, [r3, #0]
200001e0:	1dbb      	adds	r3, r7, #6
200001e2:	1c0a      	adds	r2, r1, #0
200001e4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200001e6:	2040      	movs	r0, #64	; 0x40
200001e8:	f000 f84e 	bl	20000288 <graphic_ctrl_bit_clear>
	select_controller(controller);
200001ec:	1dbb      	adds	r3, r7, #6
200001ee:	781b      	ldrb	r3, [r3, #0]
200001f0:	0018      	movs	r0, r3
200001f2:	f000 f86d 	bl	200002d0 <select_controller>
	graphic_ctrl_bit_clear(B_RW);
200001f6:	2002      	movs	r0, #2
200001f8:	f000 f846 	bl	20000288 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RS);
200001fc:	2001      	movs	r0, #1
200001fe:	f000 f821 	bl	20000244 <graphic_ctrl_bit_set>
	graphic_write(data, controller);
20000202:	1dbb      	adds	r3, r7, #6
20000204:	781a      	ldrb	r2, [r3, #0]
20000206:	1dfb      	adds	r3, r7, #7
20000208:	781b      	ldrb	r3, [r3, #0]
2000020a:	0011      	movs	r1, r2
2000020c:	0018      	movs	r0, r3
2000020e:	f7ff ff81 	bl	20000114 <graphic_write>
}
20000212:	46c0      	nop			; (mov r8, r8)
20000214:	46bd      	mov	sp, r7
20000216:	b002      	add	sp, #8
20000218:	bd80      	pop	{r7, pc}

2000021a <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
2000021a:	b580      	push	{r7, lr}
2000021c:	b082      	sub	sp, #8
2000021e:	af00      	add	r7, sp, #0
20000220:	0002      	movs	r2, r0
20000222:	1dfb      	adds	r3, r7, #7
20000224:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000226:	1dfb      	adds	r3, r7, #7
20000228:	781b      	ldrb	r3, [r3, #0]
2000022a:	0018      	movs	r0, r3
2000022c:	f7ff ff28 	bl	20000080 <graphic_read>
	return graphic_read(controller);
20000230:	1dfb      	adds	r3, r7, #7
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	0018      	movs	r0, r3
20000236:	f7ff ff23 	bl	20000080 <graphic_read>
2000023a:	0003      	movs	r3, r0
}
2000023c:	0018      	movs	r0, r3
2000023e:	46bd      	mov	sp, r7
20000240:	b002      	add	sp, #8
20000242:	bd80      	pop	{r7, pc}

20000244 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
20000244:	b580      	push	{r7, lr}
20000246:	b084      	sub	sp, #16
20000248:	af00      	add	r7, sp, #0
2000024a:	0002      	movs	r2, r0
2000024c:	1dfb      	adds	r3, r7, #7
2000024e:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *GPIO_ODR_LOW;
20000250:	4a0c      	ldr	r2, [pc, #48]	; (20000284 <graphic_ctrl_bit_set+0x40>)
20000252:	210f      	movs	r1, #15
20000254:	187b      	adds	r3, r7, r1
20000256:	7812      	ldrb	r2, [r2, #0]
20000258:	701a      	strb	r2, [r3, #0]
	c |= ( ~B_SELECT & x ); //Nollställer B_Select!
2000025a:	1dfb      	adds	r3, r7, #7
2000025c:	781b      	ldrb	r3, [r3, #0]
2000025e:	b25b      	sxtb	r3, r3
20000260:	2204      	movs	r2, #4
20000262:	4393      	bics	r3, r2
20000264:	b25a      	sxtb	r2, r3
20000266:	187b      	adds	r3, r7, r1
20000268:	781b      	ldrb	r3, [r3, #0]
2000026a:	b25b      	sxtb	r3, r3
2000026c:	4313      	orrs	r3, r2
2000026e:	b25a      	sxtb	r2, r3
20000270:	187b      	adds	r3, r7, r1
20000272:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
20000274:	4a03      	ldr	r2, [pc, #12]	; (20000284 <graphic_ctrl_bit_set+0x40>)
20000276:	187b      	adds	r3, r7, r1
20000278:	781b      	ldrb	r3, [r3, #0]
2000027a:	7013      	strb	r3, [r2, #0]
}
2000027c:	46c0      	nop			; (mov r8, r8)
2000027e:	46bd      	mov	sp, r7
20000280:	b004      	add	sp, #16
20000282:	bd80      	pop	{r7, pc}
20000284:	40021014 	andmi	r1, r2, r4, lsl r0

20000288 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x)
{
20000288:	b580      	push	{r7, lr}
2000028a:	b084      	sub	sp, #16
2000028c:	af00      	add	r7, sp, #0
2000028e:	0002      	movs	r2, r0
20000290:	1dfb      	adds	r3, r7, #7
20000292:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *GPIO_ODR_LOW;
20000294:	4a0d      	ldr	r2, [pc, #52]	; (200002cc <graphic_ctrl_bit_clear+0x44>)
20000296:	210f      	movs	r1, #15
20000298:	187b      	adds	r3, r7, r1
2000029a:	7812      	ldrb	r2, [r2, #0]
2000029c:	701a      	strb	r2, [r3, #0]
	c &= (~B_SELECT & ~x); //~ bildar 1-komplement
2000029e:	1dfb      	adds	r3, r7, #7
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	43db      	mvns	r3, r3
200002a4:	b2db      	uxtb	r3, r3
200002a6:	187a      	adds	r2, r7, r1
200002a8:	7812      	ldrb	r2, [r2, #0]
200002aa:	4013      	ands	r3, r2
200002ac:	b2da      	uxtb	r2, r3
200002ae:	0008      	movs	r0, r1
200002b0:	187b      	adds	r3, r7, r1
200002b2:	2104      	movs	r1, #4
200002b4:	438a      	bics	r2, r1
200002b6:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
200002b8:	4a04      	ldr	r2, [pc, #16]	; (200002cc <graphic_ctrl_bit_clear+0x44>)
200002ba:	0001      	movs	r1, r0
200002bc:	187b      	adds	r3, r7, r1
200002be:	781b      	ldrb	r3, [r3, #0]
200002c0:	7013      	strb	r3, [r2, #0]
}
200002c2:	46c0      	nop			; (mov r8, r8)
200002c4:	46bd      	mov	sp, r7
200002c6:	b004      	add	sp, #16
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	40021014 	andmi	r1, r2, r4, lsl r0

200002d0 <select_controller>:

void select_controller(uint8_t controller)
{
200002d0:	b580      	push	{r7, lr}
200002d2:	b082      	sub	sp, #8
200002d4:	af00      	add	r7, sp, #0
200002d6:	0002      	movs	r2, r0
200002d8:	1dfb      	adds	r3, r7, #7
200002da:	701a      	strb	r2, [r3, #0]
	switch(controller){
200002dc:	1dfb      	adds	r3, r7, #7
200002de:	781b      	ldrb	r3, [r3, #0]
200002e0:	2b08      	cmp	r3, #8
200002e2:	d00c      	beq.n	200002fe <select_controller+0x2e>
200002e4:	dc02      	bgt.n	200002ec <select_controller+0x1c>
200002e6:	2b00      	cmp	r3, #0
200002e8:	d005      	beq.n	200002f6 <select_controller+0x26>
				break;
		case B_CS1|B_CS2:
				graphic_ctrl_bit_set(B_CS1|B_CS2);
				break;
	}
}
200002ea:	e01a      	b.n	20000322 <select_controller+0x52>
	switch(controller){
200002ec:	2b10      	cmp	r3, #16
200002ee:	d00d      	beq.n	2000030c <select_controller+0x3c>
200002f0:	2b18      	cmp	r3, #24
200002f2:	d012      	beq.n	2000031a <select_controller+0x4a>
}
200002f4:	e015      	b.n	20000322 <select_controller+0x52>
				graphic_ctrl_bit_clear(B_CS1|B_CS2);
200002f6:	2018      	movs	r0, #24
200002f8:	f7ff ffc6 	bl	20000288 <graphic_ctrl_bit_clear>
				break;
200002fc:	e011      	b.n	20000322 <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1);
200002fe:	2008      	movs	r0, #8
20000300:	f7ff ffa0 	bl	20000244 <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS2);
20000304:	2010      	movs	r0, #16
20000306:	f7ff ffbf 	bl	20000288 <graphic_ctrl_bit_clear>
				break;
2000030a:	e00a      	b.n	20000322 <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS2);
2000030c:	2010      	movs	r0, #16
2000030e:	f7ff ff99 	bl	20000244 <graphic_ctrl_bit_set>
				graphic_ctrl_bit_clear(B_CS1);
20000312:	2008      	movs	r0, #8
20000314:	f7ff ffb8 	bl	20000288 <graphic_ctrl_bit_clear>
				break;
20000318:	e003      	b.n	20000322 <select_controller+0x52>
				graphic_ctrl_bit_set(B_CS1|B_CS2);
2000031a:	2018      	movs	r0, #24
2000031c:	f7ff ff92 	bl	20000244 <graphic_ctrl_bit_set>
				break;
20000320:	46c0      	nop			; (mov r8, r8)
}
20000322:	46c0      	nop			; (mov r8, r8)
20000324:	46bd      	mov	sp, r7
20000326:	b002      	add	sp, #8
20000328:	bd80      	pop	{r7, pc}

2000032a <delay_milli>:

void delay_milli(int ms)
{
2000032a:	b580      	push	{r7, lr}
2000032c:	b082      	sub	sp, #8
2000032e:	af00      	add	r7, sp, #0
20000330:	6078      	str	r0, [r7, #4]
	while(ms > 0)
20000332:	e002      	b.n	2000033a <delay_milli+0x10>
	{
	#ifndef SIMULATOR
	delay_micro(1000);
	#endif
	ms--;
20000334:	687b      	ldr	r3, [r7, #4]
20000336:	3b01      	subs	r3, #1
20000338:	607b      	str	r3, [r7, #4]
	while(ms > 0)
2000033a:	687b      	ldr	r3, [r7, #4]
2000033c:	2b00      	cmp	r3, #0
2000033e:	dcf9      	bgt.n	20000334 <delay_milli+0xa>
	}
}
20000340:	46c0      	nop			; (mov r8, r8)
20000342:	46bd      	mov	sp, r7
20000344:	b002      	add	sp, #8
20000346:	bd80      	pop	{r7, pc}

20000348 <delay_micro>:

void delay_micro(int us)
{
20000348:	b580      	push	{r7, lr}
2000034a:	b082      	sub	sp, #8
2000034c:	af00      	add	r7, sp, #0
2000034e:	6078      	str	r0, [r7, #4]
	while(us > 0)
20000350:	e002      	b.n	20000358 <delay_micro+0x10>
	delay_250ns();
	delay_250ns();
	delay_250ns();
	delay_250ns();
	#endif
	us--;
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	3b01      	subs	r3, #1
20000356:	607b      	str	r3, [r7, #4]
	while(us > 0)
20000358:	687b      	ldr	r3, [r7, #4]
2000035a:	2b00      	cmp	r3, #0
2000035c:	dcf9      	bgt.n	20000352 <delay_micro+0xa>
	}
}
2000035e:	46c0      	nop			; (mov r8, r8)
20000360:	46bd      	mov	sp, r7
20000362:	b002      	add	sp, #8
20000364:	bd80      	pop	{r7, pc}

20000366 <delay_250ns>:

void delay_250ns(void)
{
20000366:	b580      	push	{r7, lr}
20000368:	af00      	add	r7, sp, #0
	unsigned int ctrl = *STK_CTRL & 0x10000;
	while((*STK_CTRL & 0x10000) == 0);
	*STK_CTRL= 0;
	#endif
	
}
2000036a:	46c0      	nop			; (mov r8, r8)
2000036c:	46bd      	mov	sp, r7
2000036e:	bd80      	pop	{r7, pc}

20000370 <delay_500ns>:

void delay_500ns(void)
{
20000370:	b580      	push	{r7, lr}
20000372:	af00      	add	r7, sp, #0
	#ifndef SIMULATOR
	delay_250ns();
	delay_250ns();
	#endif
}
20000374:	46c0      	nop			; (mov r8, r8)
20000376:	46bd      	mov	sp, r7
20000378:	bd80      	pop	{r7, pc}

2000037a <graphic_initialize>:

void graphic_initialize(void)
{
2000037a:	b580      	push	{r7, lr}
2000037c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000037e:	2040      	movs	r0, #64	; 0x40
20000380:	f7ff ff60 	bl	20000244 <graphic_ctrl_bit_set>
	delay_micro(10);
20000384:	200a      	movs	r0, #10
20000386:	f7ff ffdf 	bl	20000348 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
2000038a:	2078      	movs	r0, #120	; 0x78
2000038c:	f7ff ff7c 	bl	20000288 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000390:	201e      	movs	r0, #30
20000392:	f7ff ffca 	bl	2000032a <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000396:	2020      	movs	r0, #32
20000398:	f7ff ff54 	bl	20000244 <graphic_ctrl_bit_set>
	delay_milli(100);
2000039c:	2064      	movs	r0, #100	; 0x64
2000039e:	f7ff ffc4 	bl	2000032a <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200003a2:	2118      	movs	r1, #24
200003a4:	203e      	movs	r0, #62	; 0x3e
200003a6:	f7ff fef5 	bl	20000194 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
200003aa:	2118      	movs	r1, #24
200003ac:	203f      	movs	r0, #63	; 0x3f
200003ae:	f7ff fef1 	bl	20000194 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200003b2:	2118      	movs	r1, #24
200003b4:	20c0      	movs	r0, #192	; 0xc0
200003b6:	f7ff feed 	bl	20000194 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200003ba:	2118      	movs	r1, #24
200003bc:	2040      	movs	r0, #64	; 0x40
200003be:	f7ff fee9 	bl	20000194 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200003c2:	2118      	movs	r1, #24
200003c4:	20b8      	movs	r0, #184	; 0xb8
200003c6:	f7ff fee5 	bl	20000194 <graphic_write_command>
	select_controller(0);
200003ca:	2000      	movs	r0, #0
200003cc:	f7ff ff80 	bl	200002d0 <select_controller>
}
200003d0:	46c0      	nop			; (mov r8, r8)
200003d2:	46bd      	mov	sp, r7
200003d4:	bd80      	pop	{r7, pc}

200003d6 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
200003d6:	b580      	push	{r7, lr}
200003d8:	b082      	sub	sp, #8
200003da:	af00      	add	r7, sp, #0
	for(unsigned int page = 0; page < 8; page++)
200003dc:	2300      	movs	r3, #0
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e01d      	b.n	2000041e <graphic_clear_screen+0x48>
	{
		graphic_write_command(LCD_SET_PAGE|page,B_CS1|B_CS2);
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	b2db      	uxtb	r3, r3
200003e6:	2248      	movs	r2, #72	; 0x48
200003e8:	4252      	negs	r2, r2
200003ea:	4313      	orrs	r3, r2
200003ec:	b2db      	uxtb	r3, r3
200003ee:	2118      	movs	r1, #24
200003f0:	0018      	movs	r0, r3
200003f2:	f7ff fecf 	bl	20000194 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD|0,B_CS1|B_CS2);
200003f6:	2118      	movs	r1, #24
200003f8:	2040      	movs	r0, #64	; 0x40
200003fa:	f7ff fecb 	bl	20000194 <graphic_write_command>
		for(unsigned int add = 0; add<64;add++)
200003fe:	2300      	movs	r3, #0
20000400:	603b      	str	r3, [r7, #0]
20000402:	e006      	b.n	20000412 <graphic_clear_screen+0x3c>
		{
			graphic_write_data(0, B_CS1|B_CS2);
20000404:	2118      	movs	r1, #24
20000406:	2000      	movs	r0, #0
20000408:	f7ff fee4 	bl	200001d4 <graphic_write_data>
		for(unsigned int add = 0; add<64;add++)
2000040c:	683b      	ldr	r3, [r7, #0]
2000040e:	3301      	adds	r3, #1
20000410:	603b      	str	r3, [r7, #0]
20000412:	683b      	ldr	r3, [r7, #0]
20000414:	2b3f      	cmp	r3, #63	; 0x3f
20000416:	d9f5      	bls.n	20000404 <graphic_clear_screen+0x2e>
	for(unsigned int page = 0; page < 8; page++)
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	3301      	adds	r3, #1
2000041c:	607b      	str	r3, [r7, #4]
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	2b07      	cmp	r3, #7
20000422:	d9de      	bls.n	200003e2 <graphic_clear_screen+0xc>
		}
	}
}
20000424:	46c0      	nop			; (mov r8, r8)
20000426:	46bd      	mov	sp, r7
20000428:	b002      	add	sp, #8
2000042a:	bd80      	pop	{r7, pc}

2000042c <pixel>:

void pixel(int x, int y, int set)
{
2000042c:	b5b0      	push	{r4, r5, r7, lr}
2000042e:	b088      	sub	sp, #32
20000430:	af00      	add	r7, sp, #0
20000432:	60f8      	str	r0, [r7, #12]
20000434:	60b9      	str	r1, [r7, #8]
20000436:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000438:	68fb      	ldr	r3, [r7, #12]
2000043a:	2b00      	cmp	r3, #0
2000043c:	dc00      	bgt.n	20000440 <pixel+0x14>
2000043e:	e0b6      	b.n	200005ae <pixel+0x182>
20000440:	68bb      	ldr	r3, [r7, #8]
20000442:	2b00      	cmp	r3, #0
20000444:	dc00      	bgt.n	20000448 <pixel+0x1c>
20000446:	e0b2      	b.n	200005ae <pixel+0x182>
20000448:	68fb      	ldr	r3, [r7, #12]
2000044a:	2b80      	cmp	r3, #128	; 0x80
2000044c:	dd00      	ble.n	20000450 <pixel+0x24>
2000044e:	e0ae      	b.n	200005ae <pixel+0x182>
20000450:	68bb      	ldr	r3, [r7, #8]
20000452:	2b40      	cmp	r3, #64	; 0x40
20000454:	dd00      	ble.n	20000458 <pixel+0x2c>
20000456:	e0aa      	b.n	200005ae <pixel+0x182>
	
	index = (y-1)/8;
20000458:	68bb      	ldr	r3, [r7, #8]
2000045a:	3b01      	subs	r3, #1
2000045c:	2b00      	cmp	r3, #0
2000045e:	da00      	bge.n	20000462 <pixel+0x36>
20000460:	3307      	adds	r3, #7
20000462:	10db      	asrs	r3, r3, #3
20000464:	61bb      	str	r3, [r7, #24]
	
	switch((y-1)%8){
20000466:	68bb      	ldr	r3, [r7, #8]
20000468:	3b01      	subs	r3, #1
2000046a:	4a53      	ldr	r2, [pc, #332]	; (200005b8 <pixel+0x18c>)
2000046c:	4013      	ands	r3, r2
2000046e:	d504      	bpl.n	2000047a <pixel+0x4e>
20000470:	3b01      	subs	r3, #1
20000472:	2208      	movs	r2, #8
20000474:	4252      	negs	r2, r2
20000476:	4313      	orrs	r3, r2
20000478:	3301      	adds	r3, #1
2000047a:	2b07      	cmp	r3, #7
2000047c:	d82c      	bhi.n	200004d8 <pixel+0xac>
2000047e:	009a      	lsls	r2, r3, #2
20000480:	4b4e      	ldr	r3, [pc, #312]	; (200005bc <pixel+0x190>)
20000482:	18d3      	adds	r3, r2, r3
20000484:	681b      	ldr	r3, [r3, #0]
20000486:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000488:	231f      	movs	r3, #31
2000048a:	18fb      	adds	r3, r7, r3
2000048c:	2201      	movs	r2, #1
2000048e:	701a      	strb	r2, [r3, #0]
20000490:	e022      	b.n	200004d8 <pixel+0xac>
		case 1: mask = 2; break;
20000492:	231f      	movs	r3, #31
20000494:	18fb      	adds	r3, r7, r3
20000496:	2202      	movs	r2, #2
20000498:	701a      	strb	r2, [r3, #0]
2000049a:	e01d      	b.n	200004d8 <pixel+0xac>
		case 2: mask = 4; break;
2000049c:	231f      	movs	r3, #31
2000049e:	18fb      	adds	r3, r7, r3
200004a0:	2204      	movs	r2, #4
200004a2:	701a      	strb	r2, [r3, #0]
200004a4:	e018      	b.n	200004d8 <pixel+0xac>
		case 3: mask = 8; break;
200004a6:	231f      	movs	r3, #31
200004a8:	18fb      	adds	r3, r7, r3
200004aa:	2208      	movs	r2, #8
200004ac:	701a      	strb	r2, [r3, #0]
200004ae:	e013      	b.n	200004d8 <pixel+0xac>
		case 4: mask = 0x10; break;
200004b0:	231f      	movs	r3, #31
200004b2:	18fb      	adds	r3, r7, r3
200004b4:	2210      	movs	r2, #16
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	e00e      	b.n	200004d8 <pixel+0xac>
		case 5: mask = 0x20; break;
200004ba:	231f      	movs	r3, #31
200004bc:	18fb      	adds	r3, r7, r3
200004be:	2220      	movs	r2, #32
200004c0:	701a      	strb	r2, [r3, #0]
200004c2:	e009      	b.n	200004d8 <pixel+0xac>
		case 6: mask = 0x40; break;
200004c4:	231f      	movs	r3, #31
200004c6:	18fb      	adds	r3, r7, r3
200004c8:	2240      	movs	r2, #64	; 0x40
200004ca:	701a      	strb	r2, [r3, #0]
200004cc:	e004      	b.n	200004d8 <pixel+0xac>
		case 7: mask = 0x80; break;
200004ce:	231f      	movs	r3, #31
200004d0:	18fb      	adds	r3, r7, r3
200004d2:	2280      	movs	r2, #128	; 0x80
200004d4:	701a      	strb	r2, [r3, #0]
200004d6:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0){
200004d8:	687b      	ldr	r3, [r7, #4]
200004da:	2b00      	cmp	r3, #0
200004dc:	d105      	bne.n	200004ea <pixel+0xbe>
		mask = ~mask;
200004de:	221f      	movs	r2, #31
200004e0:	18bb      	adds	r3, r7, r2
200004e2:	18ba      	adds	r2, r7, r2
200004e4:	7812      	ldrb	r2, [r2, #0]
200004e6:	43d2      	mvns	r2, r2
200004e8:	701a      	strb	r2, [r3, #0]
	}
	if(x>64){
200004ea:	68fb      	ldr	r3, [r7, #12]
200004ec:	2b40      	cmp	r3, #64	; 0x40
200004ee:	dd07      	ble.n	20000500 <pixel+0xd4>
		controller = B_CS2;
200004f0:	231e      	movs	r3, #30
200004f2:	18fb      	adds	r3, r7, r3
200004f4:	2210      	movs	r2, #16
200004f6:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200004f8:	68fb      	ldr	r3, [r7, #12]
200004fa:	3b41      	subs	r3, #65	; 0x41
200004fc:	60fb      	str	r3, [r7, #12]
200004fe:	e006      	b.n	2000050e <pixel+0xe2>
	}else{
		controller = B_CS1;
20000500:	231e      	movs	r3, #30
20000502:	18fb      	adds	r3, r7, r3
20000504:	2208      	movs	r2, #8
20000506:	701a      	strb	r2, [r3, #0]
		x = x-1;
20000508:	68fb      	ldr	r3, [r7, #12]
2000050a:	3b01      	subs	r3, #1
2000050c:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD | x,controller);
2000050e:	68fb      	ldr	r3, [r7, #12]
20000510:	b25b      	sxtb	r3, r3
20000512:	2240      	movs	r2, #64	; 0x40
20000514:	4313      	orrs	r3, r2
20000516:	b25b      	sxtb	r3, r3
20000518:	b2da      	uxtb	r2, r3
2000051a:	251e      	movs	r5, #30
2000051c:	197b      	adds	r3, r7, r5
2000051e:	781b      	ldrb	r3, [r3, #0]
20000520:	0019      	movs	r1, r3
20000522:	0010      	movs	r0, r2
20000524:	f7ff fe36 	bl	20000194 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE| index, controller);
20000528:	69bb      	ldr	r3, [r7, #24]
2000052a:	b25b      	sxtb	r3, r3
2000052c:	2248      	movs	r2, #72	; 0x48
2000052e:	4252      	negs	r2, r2
20000530:	4313      	orrs	r3, r2
20000532:	b25b      	sxtb	r3, r3
20000534:	b2da      	uxtb	r2, r3
20000536:	197b      	adds	r3, r7, r5
20000538:	781b      	ldrb	r3, [r3, #0]
2000053a:	0019      	movs	r1, r3
2000053c:	0010      	movs	r0, r2
2000053e:	f7ff fe29 	bl	20000194 <graphic_write_command>
	c = graphic_read_data(controller);
20000542:	2317      	movs	r3, #23
20000544:	18fc      	adds	r4, r7, r3
20000546:	197b      	adds	r3, r7, r5
20000548:	781b      	ldrb	r3, [r3, #0]
2000054a:	0018      	movs	r0, r3
2000054c:	f7ff fe65 	bl	2000021a <graphic_read_data>
20000550:	0003      	movs	r3, r0
20000552:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD| x, controller);
20000554:	68fb      	ldr	r3, [r7, #12]
20000556:	b25b      	sxtb	r3, r3
20000558:	2240      	movs	r2, #64	; 0x40
2000055a:	4313      	orrs	r3, r2
2000055c:	b25b      	sxtb	r3, r3
2000055e:	b2da      	uxtb	r2, r3
20000560:	197b      	adds	r3, r7, r5
20000562:	781b      	ldrb	r3, [r3, #0]
20000564:	0019      	movs	r1, r3
20000566:	0010      	movs	r0, r2
20000568:	f7ff fe14 	bl	20000194 <graphic_write_command>
	
	if(set){
2000056c:	687b      	ldr	r3, [r7, #4]
2000056e:	2b00      	cmp	r3, #0
20000570:	d009      	beq.n	20000586 <pixel+0x15a>
		mask = mask | c;
20000572:	221f      	movs	r2, #31
20000574:	18bb      	adds	r3, r7, r2
20000576:	18b9      	adds	r1, r7, r2
20000578:	2217      	movs	r2, #23
2000057a:	18ba      	adds	r2, r7, r2
2000057c:	7809      	ldrb	r1, [r1, #0]
2000057e:	7812      	ldrb	r2, [r2, #0]
20000580:	430a      	orrs	r2, r1
20000582:	701a      	strb	r2, [r3, #0]
20000584:	e008      	b.n	20000598 <pixel+0x16c>
	}else{
		mask = mask & c;
20000586:	221f      	movs	r2, #31
20000588:	18bb      	adds	r3, r7, r2
2000058a:	18ba      	adds	r2, r7, r2
2000058c:	2117      	movs	r1, #23
2000058e:	1879      	adds	r1, r7, r1
20000590:	7812      	ldrb	r2, [r2, #0]
20000592:	7809      	ldrb	r1, [r1, #0]
20000594:	400a      	ands	r2, r1
20000596:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000598:	231e      	movs	r3, #30
2000059a:	18fb      	adds	r3, r7, r3
2000059c:	781a      	ldrb	r2, [r3, #0]
2000059e:	231f      	movs	r3, #31
200005a0:	18fb      	adds	r3, r7, r3
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	0011      	movs	r1, r2
200005a6:	0018      	movs	r0, r3
200005a8:	f7ff fe14 	bl	200001d4 <graphic_write_data>
200005ac:	e000      	b.n	200005b0 <pixel+0x184>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200005ae:	46c0      	nop			; (mov r8, r8)
}
200005b0:	46bd      	mov	sp, r7
200005b2:	b008      	add	sp, #32
200005b4:	bdb0      	pop	{r4, r5, r7, pc}
200005b6:	46c0      	nop			; (mov r8, r8)
200005b8:	80000007 	andhi	r0, r0, r7
200005bc:	20000840 	andcs	r0, r0, r0, asr #16

200005c0 <draw_object>:

void draw_object(POBJECT obj)
{
200005c0:	b5b0      	push	{r4, r5, r7, lr}
200005c2:	b084      	sub	sp, #16
200005c4:	af00      	add	r7, sp, #0
200005c6:	6078      	str	r0, [r7, #4]
	uint8_t p;
	uint8_t n = obj->geo->numpoints;
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	681b      	ldr	r3, [r3, #0]
200005cc:	681a      	ldr	r2, [r3, #0]
200005ce:	230e      	movs	r3, #14
200005d0:	18fb      	adds	r3, r7, r3
200005d2:	701a      	strb	r2, [r3, #0]
	uint8_t x_coord;
	uint8_t y_coord;
	
	POINT s;
	for(p = 0; p<n; p++){
200005d4:	230f      	movs	r3, #15
200005d6:	18fb      	adds	r3, r7, r3
200005d8:	2200      	movs	r2, #0
200005da:	701a      	strb	r2, [r3, #0]
200005dc:	e02d      	b.n	2000063a <draw_object+0x7a>
		//s = obj -> geo -> px[p];
		x_coord  = obj->posx + obj->geo->px[p].x;
200005de:	687b      	ldr	r3, [r7, #4]
200005e0:	68db      	ldr	r3, [r3, #12]
200005e2:	b2d9      	uxtb	r1, r3
200005e4:	687b      	ldr	r3, [r7, #4]
200005e6:	681a      	ldr	r2, [r3, #0]
200005e8:	240f      	movs	r4, #15
200005ea:	193b      	adds	r3, r7, r4
200005ec:	781b      	ldrb	r3, [r3, #0]
200005ee:	3304      	adds	r3, #4
200005f0:	005b      	lsls	r3, r3, #1
200005f2:	18d3      	adds	r3, r2, r3
200005f4:	3304      	adds	r3, #4
200005f6:	781a      	ldrb	r2, [r3, #0]
200005f8:	200d      	movs	r0, #13
200005fa:	183b      	adds	r3, r7, r0
200005fc:	188a      	adds	r2, r1, r2
200005fe:	701a      	strb	r2, [r3, #0]
		y_coord = obj->posy + obj->geo->px[p].y;
20000600:	687b      	ldr	r3, [r7, #4]
20000602:	691b      	ldr	r3, [r3, #16]
20000604:	b2d9      	uxtb	r1, r3
20000606:	687b      	ldr	r3, [r7, #4]
20000608:	681a      	ldr	r2, [r3, #0]
2000060a:	193b      	adds	r3, r7, r4
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	3304      	adds	r3, #4
20000610:	005b      	lsls	r3, r3, #1
20000612:	18d3      	adds	r3, r2, r3
20000614:	3305      	adds	r3, #5
20000616:	781a      	ldrb	r2, [r3, #0]
20000618:	250c      	movs	r5, #12
2000061a:	197b      	adds	r3, r7, r5
2000061c:	188a      	adds	r2, r1, r2
2000061e:	701a      	strb	r2, [r3, #0]
		//point = obj->geo->px;
		//pixel(s.x, s.y,1);
		pixel(x_coord,y_coord,1);
20000620:	183b      	adds	r3, r7, r0
20000622:	7818      	ldrb	r0, [r3, #0]
20000624:	197b      	adds	r3, r7, r5
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	2201      	movs	r2, #1
2000062a:	0019      	movs	r1, r3
2000062c:	f7ff fefe 	bl	2000042c <pixel>
	for(p = 0; p<n; p++){
20000630:	193b      	adds	r3, r7, r4
20000632:	781a      	ldrb	r2, [r3, #0]
20000634:	193b      	adds	r3, r7, r4
20000636:	3201      	adds	r2, #1
20000638:	701a      	strb	r2, [r3, #0]
2000063a:	230f      	movs	r3, #15
2000063c:	18fa      	adds	r2, r7, r3
2000063e:	230e      	movs	r3, #14
20000640:	18fb      	adds	r3, r7, r3
20000642:	7812      	ldrb	r2, [r2, #0]
20000644:	781b      	ldrb	r3, [r3, #0]
20000646:	429a      	cmp	r2, r3
20000648:	d3c9      	bcc.n	200005de <draw_object+0x1e>
	}
}
2000064a:	46c0      	nop			; (mov r8, r8)
2000064c:	46bd      	mov	sp, r7
2000064e:	b004      	add	sp, #16
20000650:	bdb0      	pop	{r4, r5, r7, pc}

20000652 <clear_object>:

void clear_object(POBJECT obj)
{
20000652:	b5b0      	push	{r4, r5, r7, lr}
20000654:	b084      	sub	sp, #16
20000656:	af00      	add	r7, sp, #0
20000658:	6078      	str	r0, [r7, #4]
	uint8_t p;
	uint8_t n = obj->geo->numpoints;
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	681b      	ldr	r3, [r3, #0]
2000065e:	681a      	ldr	r2, [r3, #0]
20000660:	230e      	movs	r3, #14
20000662:	18fb      	adds	r3, r7, r3
20000664:	701a      	strb	r2, [r3, #0]
	uint8_t x_coord;
	uint8_t y_coord;
	for(p = 0; p<n; p++){
20000666:	230f      	movs	r3, #15
20000668:	18fb      	adds	r3, r7, r3
2000066a:	2200      	movs	r2, #0
2000066c:	701a      	strb	r2, [r3, #0]
2000066e:	e02d      	b.n	200006cc <clear_object+0x7a>
		x_coord  = obj->posx + obj->geo->px[p].x;
20000670:	687b      	ldr	r3, [r7, #4]
20000672:	68db      	ldr	r3, [r3, #12]
20000674:	b2d9      	uxtb	r1, r3
20000676:	687b      	ldr	r3, [r7, #4]
20000678:	681a      	ldr	r2, [r3, #0]
2000067a:	240f      	movs	r4, #15
2000067c:	193b      	adds	r3, r7, r4
2000067e:	781b      	ldrb	r3, [r3, #0]
20000680:	3304      	adds	r3, #4
20000682:	005b      	lsls	r3, r3, #1
20000684:	18d3      	adds	r3, r2, r3
20000686:	3304      	adds	r3, #4
20000688:	781a      	ldrb	r2, [r3, #0]
2000068a:	200d      	movs	r0, #13
2000068c:	183b      	adds	r3, r7, r0
2000068e:	188a      	adds	r2, r1, r2
20000690:	701a      	strb	r2, [r3, #0]
		y_coord = obj->posy + obj->geo->px[p].y;
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	691b      	ldr	r3, [r3, #16]
20000696:	b2d9      	uxtb	r1, r3
20000698:	687b      	ldr	r3, [r7, #4]
2000069a:	681a      	ldr	r2, [r3, #0]
2000069c:	193b      	adds	r3, r7, r4
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	3304      	adds	r3, #4
200006a2:	005b      	lsls	r3, r3, #1
200006a4:	18d3      	adds	r3, r2, r3
200006a6:	3305      	adds	r3, #5
200006a8:	781a      	ldrb	r2, [r3, #0]
200006aa:	250c      	movs	r5, #12
200006ac:	197b      	adds	r3, r7, r5
200006ae:	188a      	adds	r2, r1, r2
200006b0:	701a      	strb	r2, [r3, #0]
		pixel(x_coord,y_coord,0);
200006b2:	183b      	adds	r3, r7, r0
200006b4:	7818      	ldrb	r0, [r3, #0]
200006b6:	197b      	adds	r3, r7, r5
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	2200      	movs	r2, #0
200006bc:	0019      	movs	r1, r3
200006be:	f7ff feb5 	bl	2000042c <pixel>
	for(p = 0; p<n; p++){
200006c2:	193b      	adds	r3, r7, r4
200006c4:	781a      	ldrb	r2, [r3, #0]
200006c6:	193b      	adds	r3, r7, r4
200006c8:	3201      	adds	r2, #1
200006ca:	701a      	strb	r2, [r3, #0]
200006cc:	230f      	movs	r3, #15
200006ce:	18fa      	adds	r2, r7, r3
200006d0:	230e      	movs	r3, #14
200006d2:	18fb      	adds	r3, r7, r3
200006d4:	7812      	ldrb	r2, [r2, #0]
200006d6:	781b      	ldrb	r3, [r3, #0]
200006d8:	429a      	cmp	r2, r3
200006da:	d3c9      	bcc.n	20000670 <clear_object+0x1e>
	}
}
200006dc:	46c0      	nop			; (mov r8, r8)
200006de:	46bd      	mov	sp, r7
200006e0:	b004      	add	sp, #16
200006e2:	bdb0      	pop	{r4, r5, r7, pc}

200006e4 <set_object_speed>:

void set_object_speed(POBJECT o, int speedx, int speedy){
200006e4:	b580      	push	{r7, lr}
200006e6:	b084      	sub	sp, #16
200006e8:	af00      	add	r7, sp, #0
200006ea:	60f8      	str	r0, [r7, #12]
200006ec:	60b9      	str	r1, [r7, #8]
200006ee:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
200006f0:	68fb      	ldr	r3, [r7, #12]
200006f2:	68ba      	ldr	r2, [r7, #8]
200006f4:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
200006f6:	68fb      	ldr	r3, [r7, #12]
200006f8:	687a      	ldr	r2, [r7, #4]
200006fa:	609a      	str	r2, [r3, #8]
}
200006fc:	46c0      	nop			; (mov r8, r8)
200006fe:	46bd      	mov	sp, r7
20000700:	b004      	add	sp, #16
20000702:	bd80      	pop	{r7, pc}

20000704 <move_object>:

void move_object(POBJECT o){
20000704:	b580      	push	{r7, lr}
20000706:	b082      	sub	sp, #8
20000708:	af00      	add	r7, sp, #0
2000070a:	6078      	str	r0, [r7, #4]
	clear_object(o);
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	0018      	movs	r0, r3
20000710:	f7ff ff9f 	bl	20000652 <clear_object>
	o->posx += o->dirx;
20000714:	687b      	ldr	r3, [r7, #4]
20000716:	68da      	ldr	r2, [r3, #12]
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	685b      	ldr	r3, [r3, #4]
2000071c:	18d2      	adds	r2, r2, r3
2000071e:	687b      	ldr	r3, [r7, #4]
20000720:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	691a      	ldr	r2, [r3, #16]
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	689b      	ldr	r3, [r3, #8]
2000072a:	18d2      	adds	r2, r2, r3
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	611a      	str	r2, [r3, #16]
	
	if(o->posx < 1){
20000730:	687b      	ldr	r3, [r7, #4]
20000732:	68db      	ldr	r3, [r3, #12]
20000734:	2b00      	cmp	r3, #0
20000736:	dc04      	bgt.n	20000742 <move_object+0x3e>
		o->dirx = -o->dirx;
20000738:	687b      	ldr	r3, [r7, #4]
2000073a:	685b      	ldr	r3, [r3, #4]
2000073c:	425a      	negs	r2, r3
2000073e:	687b      	ldr	r3, [r7, #4]
20000740:	605a      	str	r2, [r3, #4]
	}
	if(o->posx > 128 - o->geo->sizex){
20000742:	687b      	ldr	r3, [r7, #4]
20000744:	68da      	ldr	r2, [r3, #12]
20000746:	687b      	ldr	r3, [r7, #4]
20000748:	681b      	ldr	r3, [r3, #0]
2000074a:	685b      	ldr	r3, [r3, #4]
2000074c:	2180      	movs	r1, #128	; 0x80
2000074e:	1acb      	subs	r3, r1, r3
20000750:	429a      	cmp	r2, r3
20000752:	dd04      	ble.n	2000075e <move_object+0x5a>
		o->dirx = -o->dirx;
20000754:	687b      	ldr	r3, [r7, #4]
20000756:	685b      	ldr	r3, [r3, #4]
20000758:	425a      	negs	r2, r3
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	605a      	str	r2, [r3, #4]
	}
	if(o->posy < 1){
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	691b      	ldr	r3, [r3, #16]
20000762:	2b00      	cmp	r3, #0
20000764:	dc04      	bgt.n	20000770 <move_object+0x6c>
		o->diry = -o->diry;
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	689b      	ldr	r3, [r3, #8]
2000076a:	425a      	negs	r2, r3
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	609a      	str	r2, [r3, #8]
	}
	if(o->posy > 64 - o->geo->sizey){
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	691a      	ldr	r2, [r3, #16]
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	681b      	ldr	r3, [r3, #0]
20000778:	689b      	ldr	r3, [r3, #8]
2000077a:	2140      	movs	r1, #64	; 0x40
2000077c:	1acb      	subs	r3, r1, r3
2000077e:	429a      	cmp	r2, r3
20000780:	dd04      	ble.n	2000078c <move_object+0x88>
		o->diry = -o->diry;
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	689b      	ldr	r3, [r3, #8]
20000786:	425a      	negs	r2, r3
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	609a      	str	r2, [r3, #8]
	}
	draw_object(o);
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	0018      	movs	r0, r3
20000790:	f7ff ff16 	bl	200005c0 <draw_object>
}
20000794:	46c0      	nop			; (mov r8, r8)
20000796:	46bd      	mov	sp, r7
20000798:	b002      	add	sp, #8
2000079a:	bd80      	pop	{r7, pc}

2000079c <init_app>:
clear_object,
move_object,
set_object_speed};

void init_app(void)
{
2000079c:	b580      	push	{r7, lr}
2000079e:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55555555;
200007a0:	4b02      	ldr	r3, [pc, #8]	; (200007ac <init_app+0x10>)
200007a2:	4a03      	ldr	r2, [pc, #12]	; (200007b0 <init_app+0x14>)
200007a4:	601a      	str	r2, [r3, #0]
}
200007a6:	46c0      	nop			; (mov r8, r8)
200007a8:	46bd      	mov	sp, r7
200007aa:	bd80      	pop	{r7, pc}
200007ac:	40021000 	andmi	r1, r2, r0
200007b0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007b4 <main>:

void main(void)
{
200007b4:	b580      	push	{r7, lr}
200007b6:	b082      	sub	sp, #8
200007b8:	af00      	add	r7, sp, #0
	//uint8_t i;

	POBJECT p = &ball;
200007ba:	4b0a      	ldr	r3, [pc, #40]	; (200007e4 <main+0x30>)
200007bc:	607b      	str	r3, [r7, #4]
	init_app();
200007be:	f7ff ffed 	bl	2000079c <init_app>
	graphic_initialize();
200007c2:	f7ff fdda 	bl	2000037a <graphic_initialize>
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	
	p->set_speed(p,4,1);
200007c6:	687b      	ldr	r3, [r7, #4]
200007c8:	6a1b      	ldr	r3, [r3, #32]
200007ca:	6878      	ldr	r0, [r7, #4]
200007cc:	2201      	movs	r2, #1
200007ce:	2104      	movs	r1, #4
200007d0:	4798      	blx	r3
	while(1)
	{
		p->move(p);
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	69db      	ldr	r3, [r3, #28]
200007d6:	687a      	ldr	r2, [r7, #4]
200007d8:	0010      	movs	r0, r2
200007da:	4798      	blx	r3
		delay_milli(40);
200007dc:	2028      	movs	r0, #40	; 0x28
200007de:	f7ff fda4 	bl	2000032a <delay_milli>
		p->move(p);
200007e2:	e7f6      	b.n	200007d2 <main+0x1e>
200007e4:	2000081c 	andcs	r0, r0, ip, lsl r8

200007e8 <ball_geometry>:
200007e8:	0000000c 	andeq	r0, r0, ip
200007ec:	00000004 	andeq	r0, r0, r4
200007f0:	00000004 	andeq	r0, r0, r4
200007f4:	02000100 	andeq	r0, r0, #0, 2
200007f8:	01010001 	tsteq	r1, r1
200007fc:	03010201 	movweq	r0, #4609	; 0x1201
20000800:	01020002 	tsteq	r2, r2
20000804:	03020202 	movweq	r0, #8706	; 0x2202
20000808:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

2000081c <ball>:
2000081c:	200007e8 	andcs	r0, r0, r8, ror #15
	...
20000828:	00000001 	andeq	r0, r0, r1
2000082c:	00000001 	andeq	r0, r0, r1
20000830:	200005c1 	andcs	r0, r0, r1, asr #11
20000834:	20000653 	andcs	r0, r0, r3, asr r6
20000838:	20000705 	andcs	r0, r0, r5, lsl #14
2000083c:	200006e5 	andcs	r0, r0, r5, ror #13
20000840:	20000488 	andcs	r0, r0, r8, lsl #9
20000844:	20000492 	mulcs	r0, r2, r4
20000848:	2000049c 	mulcs	r0, ip, r4
2000084c:	200004a6 	andcs	r0, r0, r6, lsr #9
20000850:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
20000854:	200004ba 			; <UNDEFINED> instruction: 0x200004ba
20000858:	200004c4 	andcs	r0, r0, r4, asr #9
2000085c:	200004ce 	andcs	r0, r0, lr, asr #9

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000743 	andeq	r0, r0, r3, asr #14
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001ad 	andeq	r0, r0, sp, lsr #3
  10:	0001250c 	andeq	r2, r1, ip, lsl #10
  14:	0000bd00 	andeq	fp, r0, r0, lsl #26
	...
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	0000018a 	andeq	r0, r0, sl, lsl #3
  2c:	0000fc03 	andeq	pc, r0, r3, lsl #24
  30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
  34:	02000000 	andeq	r0, r0, #0
  38:	01880801 	orreq	r0, r8, r1, lsl #16
  3c:	02020000 	andeq	r0, r2, #0
  40:	00001105 	andeq	r1, r0, r5, lsl #2
  44:	07020200 	streq	r0, [r2, -r0, lsl #4]
  48:	000002a1 	andeq	r0, r0, r1, lsr #5
  4c:	93050402 	movwls	r0, #21506	; 0x5402
  50:	02000000 	andeq	r0, r0, #0
  54:	025f0704 	subseq	r0, pc, #4, 14	; 0x100000
  58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  5c:	00008e05 	andeq	r8, r0, r5, lsl #28
  60:	07080200 	streq	r0, [r8, -r0, lsl #4]
  64:	0000025a 	andeq	r0, r0, sl, asr r2
  68:	69050404 	stmdbvs	r5, {r2, sl}
  6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  70:	02640704 	rsbeq	r0, r4, #4, 14	; 0x100000
  74:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
  78:	03000000 	movweq	r0, #0
  7c:	00002c18 	andeq	r2, r0, r8, lsl ip
  80:	02530500 	subseq	r0, r3, #0, 10
  84:	01020000 	mrseq	r0, (UNDEF: 2)
  88:	0000a232 	andeq	sl, r0, r2, lsr r2
  8c:	00780600 	rsbseq	r0, r8, r0, lsl #12
  90:	00373401 	eorseq	r3, r7, r1, lsl #8
  94:	06000000 	streq	r0, [r0], -r0
  98:	35010079 	strcc	r0, [r1, #-121]	; 0xffffff87
  9c:	00000037 	andeq	r0, r0, r7, lsr r0
  a0:	83030001 	movwhi	r0, #12289	; 0x3001
  a4:	01000000 	mrseq	r0, (UNDEF: 0)
  a8:	00008136 	andeq	r8, r0, r6, lsr r1
  ac:	00200500 	eoreq	r0, r0, r0, lsl #10
  b0:	01340000 	teqeq	r4, r0
  b4:	0000e93a 	andeq	lr, r0, sl, lsr r9
  b8:	017e0700 	cmneq	lr, r0, lsl #14
  bc:	3c010000 	stccc	0, cr0, [r1], {-0}
  c0:	00000068 	andeq	r0, r0, r8, rrx
  c4:	01060700 	tsteq	r6, r0, lsl #14
  c8:	3d010000 	stccc	0, cr0, [r1, #-0]
  cc:	00000068 	andeq	r0, r0, r8, rrx
  d0:	010c0704 	tsteq	ip, r4, lsl #14
  d4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
  d8:	00000068 	andeq	r0, r0, r8, rrx
  dc:	78700608 	ldmdavc	r0!, {r3, r9, sl}^
  e0:	e93f0100 	ldmdb	pc!, {r8}	; <UNPREDICTABLE>
  e4:	0c000000 	stceq	0, cr0, [r0], {-0}
  e8:	00a20800 	adceq	r0, r2, r0, lsl #16
  ec:	00f90000 	rscseq	r0, r9, r0
  f0:	6f090000 	svcvs	0x00090000
  f4:	13000000 	movwne	r0, #0
  f8:	00520300 	subseq	r0, r2, r0, lsl #6
  fc:	40010000 	andmi	r0, r1, r0
 100:	000000ad 	andeq	r0, r0, sp, lsr #1
 104:	00005103 	andeq	r5, r0, r3, lsl #2
 108:	0f400100 	svceq	0x00400100
 10c:	0a000001 	beq	118 <startup-0x1ffffee8>
 110:	0000ad04 	andeq	sl, r0, r4, lsl #26
 114:	02d20500 	sbcseq	r0, r2, #0, 10
 118:	01240000 			; <UNDEFINED> instruction: 0x01240000
 11c:	00018e42 	andeq	r8, r1, r2, asr #28
 120:	65670600 	strbvs	r0, [r7, #-1536]!	; 0xfffffa00
 124:	4301006f 	movwmi	r0, #4207	; 0x106f
 128:	00000104 	andeq	r0, r0, r4, lsl #2
 12c:	009c0700 	addseq	r0, ip, r0, lsl #14
 130:	44010000 	strmi	r0, [r1], #-0
 134:	00000068 	andeq	r0, r0, r8, rrx
 138:	00a10704 	adceq	r0, r1, r4, lsl #14
 13c:	44010000 	strmi	r0, [r1], #-0
 140:	00000068 	andeq	r0, r0, r8, rrx
 144:	00000708 	andeq	r0, r0, r8, lsl #14
 148:	45010000 	strmi	r0, [r1, #-0]
 14c:	00000068 	andeq	r0, r0, r8, rrx
 150:	0089070c 	addeq	r0, r9, ip, lsl #14
 154:	45010000 	strmi	r0, [r1, #-0]
 158:	00000068 	andeq	r0, r0, r8, rrx
 15c:	02d70710 	sbcseq	r0, r7, #16, 14	; 0x400000
 160:	46010000 	strmi	r0, [r1], -r0
 164:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
 168:	01a70714 			; <UNDEFINED> instruction: 0x01a70714
 16c:	47010000 	strmi	r0, [r1, -r0]
 170:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
 174:	03490718 	movteq	r0, #38680	; 0x9718
 178:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 17c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
 180:	02dc071c 	sbcseq	r0, ip, #28, 14	; 0x700000
 184:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
 188:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 18c:	990b0020 	stmdbls	fp, {r5}
 190:	0c000001 	stceq	0, cr0, [r0], {1}
 194:	00000199 	muleq	r0, r9, r1
 198:	15040a00 	strne	r0, [r4, #-2560]	; 0xfffff600
 19c:	0a000001 	beq	1a8 <startup-0x1ffffe58>
 1a0:	00018e04 	andeq	r8, r1, r4, lsl #28
 1a4:	01ba0b00 			; <UNDEFINED> instruction: 0x01ba0b00
 1a8:	990c0000 	stmdbls	ip, {}	; <UNPREDICTABLE>
 1ac:	0c000001 	stceq	0, cr0, [r0], {1}
 1b0:	00000068 	andeq	r0, r0, r8, rrx
 1b4:	0000680c 	andeq	r6, r0, ip, lsl #16
 1b8:	040a0000 	streq	r0, [sl], #-0
 1bc:	000001a5 	andeq	r0, r0, r5, lsr #3
 1c0:	00033603 	andeq	r3, r3, r3, lsl #12
 1c4:	154a0100 	strbne	r0, [sl, #-256]	; 0xffffff00
 1c8:	03000001 	movweq	r0, #1
 1cc:	00000335 	andeq	r0, r0, r5, lsr r3
 1d0:	01994a01 	orrseq	r4, r9, r1, lsl #20
 1d4:	060d0000 	streq	r0, [sp], -r0
 1d8:	01000003 	tsteq	r0, r3
 1dc:	00f90182 	rscseq	r0, r9, r2, lsl #3
 1e0:	03050000 	movweq	r0, #20480	; 0x5000
 1e4:	200007e8 	andcs	r0, r0, r8, ror #15
 1e8:	00001b0e 	andeq	r1, r0, lr, lsl #22
 1ec:	01870100 	orreq	r0, r7, r0, lsl #2
 1f0:	000001c0 	andeq	r0, r0, r0, asr #3
 1f4:	081c0305 	ldmdaeq	ip, {r0, r2, r8, r9}
 1f8:	360f2000 	strcc	r2, [pc], -r0
 1fc:	01000000 	mrseq	r0, (UNDEF: 0)
 200:	07b40195 			; <UNDEFINED> instruction: 0x07b40195
 204:	00342000 	eorseq	r2, r4, r0
 208:	9c010000 	stcls	0, cr0, [r1], {-0}
 20c:	0000021e 	andeq	r0, r0, lr, lsl r2
 210:	01007010 	tsteq	r0, r0, lsl r0
 214:	01cb0199 			; <UNDEFINED> instruction: 0x01cb0199
 218:	91020000 	mrsls	r0, (UNDEF: 2)
 21c:	b4110074 	ldrlt	r0, [r1], #-116	; 0xffffff8c
 220:	01000002 	tsteq	r0, r2
 224:	079c0190 			; <UNDEFINED> instruction: 0x079c0190
 228:	00182000 	andseq	r2, r8, r0
 22c:	9c010000 	stcls	0, cr0, [r1], {-0}
 230:	00033d0f 	andeq	r3, r3, pc, lsl #26
 234:	016e0100 	cmneq	lr, r0, lsl #2
 238:	20000704 	andcs	r0, r0, r4, lsl #14
 23c:	00000098 	muleq	r0, r8, r0
 240:	02549c01 	subseq	r9, r4, #256	; 0x100
 244:	6f120000 	svcvs	0x00120000
 248:	016e0100 	cmneq	lr, r0, lsl #2
 24c:	000001cb 	andeq	r0, r0, fp, asr #3
 250:	00749102 	rsbseq	r9, r4, r2, lsl #2
 254:	00027113 	andeq	r7, r2, r3, lsl r1
 258:	01690100 	cmneq	r9, r0, lsl #2
 25c:	200006e4 	andcs	r0, r0, r4, ror #13
 260:	00000020 	andeq	r0, r0, r0, lsr #32
 264:	02969c01 	addseq	r9, r6, #256	; 0x100
 268:	6f120000 	svcvs	0x00120000
 26c:	01690100 	cmneq	r9, r0, lsl #2
 270:	000001cb 	andeq	r0, r0, fp, asr #3
 274:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
 278:	00000168 	andeq	r0, r0, r8, ror #2
 27c:	68016901 	stmdavs	r1, {r0, r8, fp, sp, lr}
 280:	02000000 	andeq	r0, r0, #0
 284:	6f147091 	svcvs	0x00147091
 288:	01000001 	tsteq	r0, r1
 28c:	00680169 	rsbeq	r0, r8, r9, ror #2
 290:	91020000 	mrsls	r0, (UNDEF: 2)
 294:	f90f006c 			; <UNDEFINED> instruction: 0xf90f006c
 298:	01000002 	tsteq	r0, r2
 29c:	0652015c 			; <UNDEFINED> instruction: 0x0652015c
 2a0:	00922000 	addseq	r2, r2, r0
 2a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a8:	000002f4 	strdeq	r0, [r0], -r4
 2ac:	6a626f12 	bvs	189befc <startup-0x1e764104>
 2b0:	015c0100 	cmpeq	ip, r0, lsl #2
 2b4:	000001cb 	andeq	r0, r0, fp, asr #3
 2b8:	10649102 	rsbne	r9, r4, r2, lsl #2
 2bc:	5e010070 	mcrpl	0, 0, r0, cr1, cr0, {3}
 2c0:	00007601 	andeq	r7, r0, r1, lsl #12
 2c4:	6f910200 	svcvs	0x00910200
 2c8:	01006e10 	tsteq	r0, r0, lsl lr
 2cc:	0076015f 	rsbseq	r0, r6, pc, asr r1
 2d0:	91020000 	mrsls	r0, (UNDEF: 2)
 2d4:	032d0e6e 			; <UNDEFINED> instruction: 0x032d0e6e
 2d8:	60010000 	andvs	r0, r1, r0
 2dc:	00007601 	andeq	r7, r0, r1, lsl #12
 2e0:	6d910200 	lfmvs	f0, 4, [r1]
 2e4:	0001760e 	andeq	r7, r1, lr, lsl #12
 2e8:	01610100 	cmneq	r1, r0, lsl #2
 2ec:	00000076 	andeq	r0, r0, r6, ror r0
 2f0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 2f4:	00034e0f 	andeq	r4, r3, pc, lsl #28
 2f8:	014a0100 	mrseq	r0, (UNDEF: 90)
 2fc:	200005c0 	andcs	r0, r0, r0, asr #11
 300:	00000092 	muleq	r0, r2, r0
 304:	035f9c01 	cmpeq	pc, #256	; 0x100
 308:	6f120000 	svcvs	0x00120000
 30c:	01006a62 	tsteq	r0, r2, ror #20
 310:	01cb014a 	biceq	r0, fp, sl, asr #2
 314:	91020000 	mrsls	r0, (UNDEF: 2)
 318:	00701064 	rsbseq	r1, r0, r4, rrx
 31c:	76014c01 	strvc	r4, [r1], -r1, lsl #24
 320:	02000000 	andeq	r0, r0, #0
 324:	6e106f91 	mrcvs	15, 0, r6, cr0, cr1, {4}
 328:	014d0100 	mrseq	r0, (UNDEF: 93)
 32c:	00000076 	andeq	r0, r0, r6, ror r0
 330:	0e6e9102 	lgneqe	f1, f2
 334:	0000032d 	andeq	r0, r0, sp, lsr #6
 338:	76014e01 	strvc	r4, [r1], -r1, lsl #28
 33c:	02000000 	andeq	r0, r0, #0
 340:	760e6d91 			; <UNDEFINED> instruction: 0x760e6d91
 344:	01000001 	tsteq	r0, r1
 348:	0076014f 	rsbseq	r0, r6, pc, asr #2
 34c:	91020000 	mrsls	r0, (UNDEF: 2)
 350:	0073106c 	rsbseq	r1, r3, ip, rrx
 354:	a2015101 	andge	r5, r1, #1073741824	; 0x40000000
 358:	02000000 	andeq	r0, r0, #0
 35c:	0f006891 	svceq	0x00006891
 360:	00000005 	andeq	r0, r0, r5
 364:	2c011e01 	stccs	14, cr1, [r1], {1}
 368:	94200004 	strtls	r0, [r0], #-4
 36c:	01000001 	tsteq	r0, r1
 370:	0003d99c 	muleq	r3, ip, r9
 374:	00781200 	rsbseq	r1, r8, r0, lsl #4
 378:	68011e01 	stmdavs	r1, {r0, r9, sl, fp, ip}
 37c:	02000000 	andeq	r0, r0, #0
 380:	79125c91 	ldmdbvc	r2, {r0, r4, r7, sl, fp, ip, lr}
 384:	011e0100 	tsteq	lr, r0, lsl #2
 388:	00000068 	andeq	r0, r0, r8, rrx
 38c:	12589102 	subsne	r9, r8, #-2147483648	; 0x80000000
 390:	00746573 	rsbseq	r6, r4, r3, ror r5
 394:	68011e01 	stmdavs	r1, {r0, r9, sl, fp, ip}
 398:	02000000 	andeq	r0, r0, #0
 39c:	200e5491 	mulcs	lr, r1, r4
 3a0:	01000003 	tsteq	r0, r3
 3a4:	00760120 	rsbseq	r0, r6, r0, lsr #2
 3a8:	91020000 	mrsls	r0, (UNDEF: 2)
 3ac:	0063106f 	rsbeq	r1, r3, pc, rrx
 3b0:	76012001 	strvc	r2, [r1], -r1
 3b4:	02000000 	andeq	r0, r0, #0
 3b8:	ad0e6791 	stcge	7, cr6, [lr, #-580]	; 0xfffffdbc
 3bc:	01000000 	mrseq	r0, (UNDEF: 0)
 3c0:	00760120 	rsbseq	r0, r6, r0, lsr #2
 3c4:	91020000 	mrsls	r0, (UNDEF: 2)
 3c8:	000b0e6e 	andeq	r0, fp, lr, ror #28
 3cc:	21010000 	mrscs	r0, (UNDEF: 1)
 3d0:	00006801 	andeq	r6, r0, r1, lsl #16
 3d4:	68910200 	ldmvs	r1, {r9}
 3d8:	00610f00 	rsbeq	r0, r1, r0, lsl #30
 3dc:	11010000 	mrsne	r0, (UNDEF: 1)
 3e0:	0003d601 	andeq	sp, r3, r1, lsl #12
 3e4:	00005620 	andeq	r5, r0, r0, lsr #12
 3e8:	229c0100 	addscs	r0, ip, #0, 2
 3ec:	15000004 	strne	r0, [r0, #-4]
 3f0:	200003dc 	ldrdcs	r0, [r0], -ip
 3f4:	00000048 	andeq	r0, r0, r8, asr #32
 3f8:	0000b80e 	andeq	fp, r0, lr, lsl #16
 3fc:	01130100 	tsteq	r3, r0, lsl #2
 400:	0000006f 	andeq	r0, r0, pc, rrx
 404:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
 408:	200003fe 	strdcs	r0, [r0], -lr
 40c:	0000001a 	andeq	r0, r0, sl, lsl r0
 410:	64646110 	strbtvs	r6, [r4], #-272	; 0xfffffef0
 414:	01170100 	tsteq	r7, r0, lsl #2
 418:	0000006f 	andeq	r0, r0, pc, rrx
 41c:	00709102 	rsbseq	r9, r0, r2, lsl #2
 420:	82160000 	andshi	r0, r6, #0
 424:	01000002 	tsteq	r0, r2
 428:	037a0101 	cmneq	sl, #1073741824	; 0x40000000
 42c:	005c2000 	subseq	r2, ip, r0
 430:	9c010000 	stcls	0, cr0, [r1], {-0}
 434:	00029517 	andeq	r9, r2, r7, lsl r5
 438:	70f90100 	rscsvc	r0, r9, r0, lsl #2
 43c:	0a200003 	beq	800450 <startup-0x1f7ffbb0>
 440:	01000000 	mrseq	r0, (UNDEF: 0)
 444:	0314179c 	tsteq	r4, #156, 14	; 0x2700000
 448:	eb010000 	bl	40450 <startup-0x1ffbfbb0>
 44c:	20000366 	andcs	r0, r0, r6, ror #6
 450:	0000000a 	andeq	r0, r0, sl
 454:	2a189c01 	bcs	627460 <startup-0x1f9d8ba0>
 458:	01000000 	mrseq	r0, (UNDEF: 0)
 45c:	000348dd 	ldrdeq	r4, [r3], -sp
 460:	00001e20 	andeq	r1, r0, r0, lsr #28
 464:	799c0100 	ldmibvc	ip, {r8}
 468:	19000004 	stmdbne	r0, {r2}
 46c:	01007375 	tsteq	r0, r5, ror r3
 470:	000068dd 	ldrdeq	r6, [r0], -sp
 474:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 478:	015c1800 	cmpeq	ip, r0, lsl #16
 47c:	d2010000 	andle	r0, r1, #0
 480:	2000032a 	andcs	r0, r0, sl, lsr #6
 484:	0000001e 	andeq	r0, r0, lr, lsl r0
 488:	049c9c01 	ldreq	r9, [ip], #3073	; 0xc01
 48c:	6d190000 	ldcvs	0, cr0, [r9, #-0]
 490:	d2010073 	andle	r0, r1, #115	; 0x73
 494:	00000068 	andeq	r0, r0, r8, rrx
 498:	00749102 	rsbseq	r9, r4, r2, lsl #2
 49c:	0000a61a 	andeq	sl, r0, sl, lsl r6
 4a0:	d0be0100 	adcsle	r0, lr, r0, lsl #2
 4a4:	5a200002 	bpl	8004b4 <startup-0x1f7ffb4c>
 4a8:	01000000 	mrseq	r0, (UNDEF: 0)
 4ac:	0004c09c 	muleq	r4, ip, r0
 4b0:	00ad1b00 	adceq	r1, sp, r0, lsl #22
 4b4:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
 4b8:	00000076 	andeq	r0, r0, r6, ror r0
 4bc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 4c0:	00019618 	andeq	r9, r1, r8, lsl r6
 4c4:	88b60100 	ldmhi	r6!, {r8}
 4c8:	48200002 	stmdami	r0!, {r1}
 4cc:	01000000 	mrseq	r0, (UNDEF: 0)
 4d0:	0004ee9c 	muleq	r4, ip, lr
 4d4:	00781900 	rsbseq	r1, r8, r0, lsl #18
 4d8:	0037b601 	eorseq	fp, r7, r1, lsl #12
 4dc:	91020000 	mrsls	r0, (UNDEF: 2)
 4e0:	00631c6f 	rsbeq	r1, r3, pc, ror #24
 4e4:	0037b801 	eorseq	fp, r7, r1, lsl #16
 4e8:	91020000 	mrsls	r0, (UNDEF: 2)
 4ec:	bd180077 	ldclt	0, cr0, [r8, #-476]	; 0xfffffe24
 4f0:	01000002 	tsteq	r0, r2
 4f4:	000244ae 	andeq	r4, r2, lr, lsr #9
 4f8:	00004420 	andeq	r4, r0, r0, lsr #8
 4fc:	1c9c0100 	ldfnes	f0, [ip], {0}
 500:	19000005 	stmdbne	r0, {r0, r2}
 504:	ae010078 	mcrge	0, 0, r0, cr1, cr8, {3}
 508:	00000076 	andeq	r0, r0, r6, ror r0
 50c:	1c6f9102 	stfnep	f1, [pc], #-8	; 50c <startup-0x1ffffaf4>
 510:	b0010063 	andlt	r0, r1, r3, rrx
 514:	00000037 	andeq	r0, r0, r7, lsr r0
 518:	00779102 	rsbseq	r9, r7, r2, lsl #2
 51c:	0000ea1d 	andeq	lr, r0, sp, lsl sl
 520:	76a80100 	strtvc	r0, [r8], r0, lsl #2
 524:	1a000000 	bne	52c <startup-0x1ffffad4>
 528:	2a200002 	bcs	800538 <startup-0x1f7ffac8>
 52c:	01000000 	mrseq	r0, (UNDEF: 0)
 530:	0005449c 	muleq	r5, ip, r4
 534:	00ad1b00 	adceq	r1, sp, r0, lsl #22
 538:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
 53c:	00000076 	andeq	r0, r0, r6, ror r0
 540:	00779102 	rsbseq	r9, r7, r2, lsl #2
 544:	0001121a 	andeq	r1, r1, sl, lsl r2
 548:	d49f0100 	ldrle	r0, [pc], #256	; 550 <startup-0x1ffffab0>
 54c:	46200001 	strtmi	r0, [r0], -r1
 550:	01000000 	mrseq	r0, (UNDEF: 0)
 554:	0005a59c 	muleq	r5, ip, r5
 558:	00f71b00 	rscseq	r1, r7, r0, lsl #22
 55c:	9f010000 	svcls	0x00010000
 560:	00000076 	andeq	r0, r0, r6, ror r0
 564:	1b779102 	blne	1de4974 <startup-0x1e21b68c>
 568:	000000ad 	andeq	r0, r0, sp, lsr #1
 56c:	00769f01 	rsbseq	r9, r6, r1, lsl #30
 570:	91020000 	mrsls	r0, (UNDEF: 2)
 574:	01961e76 	orrseq	r1, r6, r6, ror lr
 578:	4f010000 	svcmi	0x00010000
 57c:	00000068 	andeq	r0, r0, r8, rrx
 580:	00000586 	andeq	r0, r0, r6, lsl #11
 584:	a61e001f 			; <UNDEFINED> instruction: 0xa61e001f
 588:	01000000 	mrseq	r0, (UNDEF: 0)
 58c:	0000686a 	andeq	r6, r0, sl, ror #16
 590:	00059700 	andeq	r9, r5, r0, lsl #14
 594:	20001f00 	andcs	r1, r0, r0, lsl #30
 598:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
 59c:	00685201 	rsbeq	r5, r8, r1, lsl #4
 5a0:	001f0000 	andseq	r0, pc, r0
 5a4:	003b1a00 	eorseq	r1, fp, r0, lsl #20
 5a8:	97010000 	strls	r0, [r1, -r0]
 5ac:	20000194 	mulcs	r0, r4, r1
 5b0:	00000040 	andeq	r0, r0, r0, asr #32
 5b4:	05f59c01 	ldrbeq	r9, [r5, #3073]!	; 0xc01
 5b8:	491b0000 	ldmdbmi	fp, {}	; <UNPREDICTABLE>
 5bc:	01000000 	mrseq	r0, (UNDEF: 0)
 5c0:	00007697 	muleq	r0, r7, r6
 5c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5c8:	0000ad1b 	andeq	sl, r0, fp, lsl sp
 5cc:	76970100 	ldrvc	r0, [r7], r0, lsl #2
 5d0:	02000000 	andeq	r0, r0, #0
 5d4:	961e7691 			; <UNDEFINED> instruction: 0x961e7691
 5d8:	01000001 	tsteq	r0, r1
 5dc:	0000684f 	andeq	r6, r0, pc, asr #16
 5e0:	0005e700 	andeq	lr, r5, r0, lsl #14
 5e4:	20001f00 	andcs	r1, r0, r0, lsl #30
 5e8:	000000a6 	andeq	r0, r0, r6, lsr #1
 5ec:	00686a01 	rsbeq	r6, r8, r1, lsl #20
 5f0:	001f0000 	andseq	r0, pc, r0
 5f4:	02451a00 	subeq	r1, r5, #0, 20
 5f8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
 5fc:	20000114 	andcs	r0, r0, r4, lsl r1
 600:	00000080 	andeq	r0, r0, r0, lsl #1
 604:	06709c01 	ldrbteq	r9, [r0], -r1, lsl #24
 608:	5b1b0000 	blpl	6c0610 <startup-0x1f93f9f0>
 60c:	01000000 	mrseq	r0, (UNDEF: 0)
 610:	0000767e 	andeq	r7, r0, lr, ror r6
 614:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 618:	0000ad1b 	andeq	sl, r0, fp, lsl sp
 61c:	767e0100 	ldrbtvc	r0, [lr], -r0, lsl #2
 620:	02000000 	andeq	r0, r0, #0
 624:	63217691 			; <UNDEFINED> instruction: 0x63217691
 628:	76800100 	strvc	r0, [r0], r0, lsl #2
 62c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 630:	000000a6 	andeq	r0, r0, r6, lsr #1
 634:	00686a01 	rsbeq	r6, r8, r1, lsl #20
 638:	06400000 	strbeq	r0, [r0], -r0
 63c:	001f0000 	andseq	r0, pc, r0
 640:	0002951e 	andeq	r9, r2, lr, lsl r5
 644:	68530100 	ldmdavs	r3, {r8}^
 648:	51000000 	mrspl	r0, (UNDEF: 0)
 64c:	1f000006 	svcne	0x00000006
 650:	02bd1e00 	adcseq	r1, sp, #0, 28
 654:	52010000 	andpl	r0, r1, #0
 658:	00000068 	andeq	r0, r0, r8, rrx
 65c:	00000662 	andeq	r0, r0, r2, ror #12
 660:	9620001f 			; <UNDEFINED> instruction: 0x9620001f
 664:	01000001 	tsteq	r0, r1
 668:	0000684f 	andeq	r6, r0, pc, asr #16
 66c:	00001f00 	andeq	r1, r0, r0, lsl #30
 670:	00007622 	andeq	r7, r0, r2, lsr #12
 674:	76640100 	strbtvc	r0, [r4], -r0, lsl #2
 678:	80000000 	andhi	r0, r0, r0
 67c:	94200000 	strtls	r0, [r0], #-0
 680:	01000000 	mrseq	r0, (UNDEF: 0)
 684:	0006e49c 	muleq	r6, ip, r4
 688:	00ad1b00 	adceq	r1, sp, r0, lsl #22
 68c:	64010000 	strvs	r0, [r1], #-0
 690:	00000076 	andeq	r0, r0, r6, ror r0
 694:	1c6f9102 	stfnep	f1, [pc], #-8	; 694 <startup-0x1ffff96c>
 698:	66010063 	strvs	r0, [r1], -r3, rrx
 69c:	00000076 	andeq	r0, r0, r6, ror r0
 6a0:	1e779102 	expnes	f1, f2
 6a4:	00000196 	muleq	r0, r6, r1
 6a8:	00684f01 	rsbeq	r4, r8, r1, lsl #30
 6ac:	06b40000 	ldrteq	r0, [r4], r0
 6b0:	001f0000 	andseq	r0, pc, r0
 6b4:	0002bd1e 	andeq	fp, r2, lr, lsl sp
 6b8:	68520100 	ldmdavs	r2, {r8}^
 6bc:	c5000000 	strgt	r0, [r0, #-0]
 6c0:	1f000006 	svcne	0x00000006
 6c4:	00a61e00 	adceq	r1, r6, r0, lsl #28
 6c8:	6a010000 	bvs	406d0 <startup-0x1ffbf930>
 6cc:	00000068 	andeq	r0, r0, r8, rrx
 6d0:	000006d6 	ldrdeq	r0, [r0], -r6
 6d4:	9520001f 	strls	r0, [r0, #-31]!	; 0xffffffe1
 6d8:	01000002 	tsteq	r0, r2
 6dc:	00006853 	andeq	r6, r0, r3, asr r8
 6e0:	00001f00 	andeq	r1, r0, r0, lsl #30
 6e4:	0002e623 	andeq	lr, r2, r3, lsr #12
 6e8:	104c0100 	subne	r0, ip, r0, lsl #2
 6ec:	70200000 	eorvc	r0, r0, r0
 6f0:	01000000 	mrseq	r0, (UNDEF: 0)
 6f4:	0007359c 	muleq	r7, ip, r5
 6f8:	00631c00 	rsbeq	r1, r3, r0, lsl #24
 6fc:	00764e01 	rsbseq	r4, r6, r1, lsl #28
 700:	91020000 	mrsls	r0, (UNDEF: 2)
 704:	01961e77 	orrseq	r1, r6, r7, ror lr
 708:	4f010000 	svcmi	0x00010000
 70c:	00000068 	andeq	r0, r0, r8, rrx
 710:	00000716 	andeq	r0, r0, r6, lsl r7
 714:	bd1e001f 	ldclt	0, cr0, [lr, #-124]	; 0xffffff84
 718:	01000002 	tsteq	r0, r2
 71c:	00006852 	andeq	r6, r0, r2, asr r8
 720:	00072700 	andeq	r2, r7, r0, lsl #14
 724:	20001f00 	andcs	r1, r0, r0, lsl #30
 728:	00000295 	muleq	r0, r5, r2
 72c:	00685301 	rsbeq	r5, r8, r1, lsl #6
 730:	001f0000 	andseq	r0, pc, r0
 734:	03251700 			; <UNDEFINED> instruction: 0x03251700
 738:	26010000 	strcs	r0, [r1], -r0
 73c:	20000000 	andcs	r0, r0, r0
 740:	0000000c 	andeq	r0, r0, ip
 744:	Address 0x00000744 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	13050000 	movwne	r0, #20480	; 0x5000
  38:	0b0e0301 	bleq	380c44 <startup-0x1fc7f3bc>
  3c:	3b0b3a0b 	blcc	2ce870 <startup-0x1fd31790>
  40:	0013010b 	andseq	r0, r3, fp, lsl #2
  44:	000d0600 	andeq	r0, sp, r0, lsl #12
  48:	0b3a0803 	bleq	e8205c <startup-0x1f17dfa4>
  4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  50:	00000b38 	andeq	r0, r0, r8, lsr fp
  54:	03000d07 	movweq	r0, #3335	; 0xd07
  58:	3b0b3a0e 	blcc	2ce898 <startup-0x1fd31768>
  5c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  60:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	000f0a00 	andeq	r0, pc, r0, lsl #20
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	150b0000 	strne	r0, [fp, #-0]
  80:	01192701 	tsteq	r9, r1, lsl #14
  84:	0c000013 	stceq	0, cr0, [r0], {19}
  88:	13490005 	movtne	r0, #36869	; 0x9005
  8c:	340d0000 	strcc	r0, [sp], #-0
  90:	3a0e0300 	bcc	380c98 <startup-0x1fc7f368>
  94:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  9c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  ac:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	11192705 	tstne	r9, r5, lsl #14
  bc:	40061201 	andmi	r1, r6, r1, lsl #4
  c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03003410 	movweq	r3, #1040	; 0x410
  cc:	3b0b3a08 	blcc	2ce8f4 <startup-0x1fd3170c>
  d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
  d4:	11000018 	tstne	r0, r8, lsl r0
  d8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  dc:	0b3a0e03 	bleq	e838f0 <startup-0x1f17c710>
  e0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  ec:	12000019 	andne	r0, r0, #25
  f0:	08030005 	stmdaeq	r3, {r0, r2}
  f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  fc:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 100:	03193f01 	tsteq	r9, #1, 30
 104:	3b0b3a0e 	blcc	2ce944 <startup-0x1fd316bc>
 108:	11192705 	tstne	r9, r5, lsl #14
 10c:	40061201 	andmi	r1, r6, r1, lsl #4
 110:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 114:	00001301 	andeq	r1, r0, r1, lsl #6
 118:	03000514 	movweq	r0, #1300	; 0x514
 11c:	3b0b3a0e 	blcc	2ce95c <startup-0x1fd316a4>
 120:	02134905 	andseq	r4, r3, #81920	; 0x14000
 124:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 128:	0111010b 	tsteq	r1, fp, lsl #2
 12c:	00000612 	andeq	r0, r0, r2, lsl r6
 130:	3f002e16 	svccc	0x00002e16
 134:	3a0e0319 	bcc	380da0 <startup-0x1fc7f260>
 138:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 13c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 140:	96184006 	ldrls	r4, [r8], -r6
 144:	00001942 	andeq	r1, r0, r2, asr #18
 148:	3f002e17 	svccc	0x00002e17
 14c:	3a0e0319 	bcc	380db8 <startup-0x1fc7f248>
 150:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 154:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 158:	97184006 	ldrls	r4, [r8, -r6]
 15c:	00001942 	andeq	r1, r0, r2, asr #18
 160:	3f012e18 	svccc	0x00012e18
 164:	3a0e0319 	bcc	380dd0 <startup-0x1fc7f230>
 168:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 16c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 170:	97184006 	ldrls	r4, [r8, -r6]
 174:	13011942 	movwne	r1, #6466	; 0x1942
 178:	05190000 	ldreq	r0, [r9, #-0]
 17c:	3a080300 	bcc	200d84 <startup-0x1fdff27c>
 180:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 184:	00180213 	andseq	r0, r8, r3, lsl r2
 188:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 18c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 190:	0b3b0b3a 	bleq	ec2e80 <startup-0x1f13d180>
 194:	01111927 	tsteq	r1, r7, lsr #18
 198:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 19c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1a0:	1b000013 	blne	1f4 <startup-0x1ffffe0c>
 1a4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1a8:	0b3b0b3a 	bleq	ec2e98 <startup-0x1f13d168>
 1ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1b0:	341c0000 	ldrcc	r0, [ip], #-0
 1b4:	3a080300 	bcc	200dbc <startup-0x1fdff244>
 1b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1bc:	00180213 	andseq	r0, r8, r3, lsl r2
 1c0:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 1c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1c8:	0b3b0b3a 	bleq	ec2eb8 <startup-0x1f13d148>
 1cc:	13491927 	movtne	r1, #39207	; 0x9927
 1d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1d8:	00130119 	andseq	r0, r3, r9, lsl r1
 1dc:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 1e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
 1e8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 1ec:	00001301 	andeq	r1, r0, r1, lsl #6
 1f0:	0000181f 	andeq	r1, r0, pc, lsl r8
 1f4:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 1f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1fc:	0b3b0b3a 	bleq	ec2eec <startup-0x1f13d114>
 200:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 204:	34210000 	strtcc	r0, [r1], #-0
 208:	3a080300 	bcc	200e10 <startup-0x1fdff1f0>
 20c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 210:	22000013 	andcs	r0, r0, #19
 214:	0e03012e 	adfeqsp	f0, f3, #0.5
 218:	0b3b0b3a 	bleq	ec2f08 <startup-0x1f13d0f8>
 21c:	13491927 	movtne	r1, #39207	; 0x9927
 220:	06120111 			; <UNDEFINED> instruction: 0x06120111
 224:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 228:	00130119 	andseq	r0, r3, r9, lsl r1
 22c:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 230:	0b3a0e03 	bleq	e83a44 <startup-0x1f17c5bc>
 234:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 238:	06120111 			; <UNDEFINED> instruction: 0x06120111
 23c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 240:	00130119 	andseq	r0, r3, r9, lsl r1
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007d8 	ldrdeq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007e8 	andcs	r0, r0, r8, ror #15
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000025c 	andeq	r0, r0, ip, asr r2
   4:	00e80002 	rsceq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6972614d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, sp, lr}^
  28:	6f442f61 	svcvs	0x00442f61
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	4d2f5449 	cfstrsmi	mvf5, [pc, #-292]!	; ffffff18 <ball+0xdffff6fc>
  38:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; ffffff04 <ball+0xdffff6e8>
  3c:	612f504f 			; <UNDEFINED> instruction: 0x612f504f
  40:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  44:	00676e6f 	rsbeq	r6, r7, pc, ror #28
  48:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  4c:	70616573 	rsbvc	r6, r1, r3, ror r5
  50:	6f635c70 	svcvs	0x00635c70
  54:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  58:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  5c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  60:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  64:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  68:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  6c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  70:	61652d65 	cmnvs	r5, r5, ror #26
  74:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  78:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  7c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
  80:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
  84:	6300656e 	movwvs	r6, #1390	; 0x56e
  88:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  8c:	70706165 	rsbsvc	r6, r0, r5, ror #2
  90:	646f635c 	strbtvs	r6, [pc], #-860	; 98 <startup-0x1fffff68>
  94:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  98:	6f745c65 	svcvs	0x00745c65
  9c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  a0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
  a4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
  a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
  b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  b4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
  b8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  bc:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
  c0:	73000073 	movwvc	r0, #115	; 0x73
  c4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  c8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  cc:	00000100 	andeq	r0, r0, r0, lsl #2
  d0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
  d4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
  d8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
  dc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
  e0:	00000200 	andeq	r0, r0, r0, lsl #4
  e4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
  e8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
  ec:	00030068 	andeq	r0, r3, r8, rrx
  f0:	05000000 	streq	r0, [r0, #-0]
  f4:	00000002 	andeq	r0, r0, r2
  f8:	01260320 			; <UNDEFINED> instruction: 0x01260320
  fc:	03025e13 	movweq	r5, #11795	; 0x2e13
 100:	00010100 	andeq	r0, r1, r0, lsl #2
 104:	00100205 	andseq	r0, r0, r5, lsl #4
 108:	cc032000 	stcgt	0, cr2, [r3], {-0}
 10c:	3d3e0100 	ldfccs	f0, [lr, #-0]
 110:	323d3d3d 	eorscc	r3, sp, #3904	; 0xf40
 114:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 118:	2327452f 			; <UNDEFINED> instruction: 0x2327452f
 11c:	3d68cb3d 	fstmdbxcc	r8!, {d28-d57}	;@ Deprecated
 120:	2f593d3d 	svccs	0x00593d3d
 124:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 128:	303d593e 	eorscc	r5, sp, lr, lsr r9
 12c:	3d303d5a 	ldccc	13, cr3, [r0, #-360]!	; 0xfffffe98
 130:	594b92cb 	stmdbpl	fp, {r0, r1, r3, r6, r7, r9, ip, pc}^
 134:	3f2f3d2f 	svccc	0x002f3d2f
 138:	5a303d59 	bpl	c0f6a4 <startup-0x1f3f095c>
 13c:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 140:	3d91773d 	ldccc	7, cr7, [r1, #244]	; 0xf4
 144:	4d833d59 	stcmi	13, cr3, [r3, #356]	; 0x164
 148:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 14c:	674d833d 	smlaldxvs	r8, sp, sp, r3
 150:	684d6759 	stmdavs	sp, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
 154:	694bc959 	stmdbvs	fp, {r0, r3, r4, r6, r8, fp, lr, pc}^
 158:	59c95968 	stmibpl	r9, {r3, r5, r6, r8, fp, ip, lr}^
 15c:	10036777 	andne	r6, r3, r7, ror r7
 160:	20700374 	rsbscs	r0, r0, r4, ror r3
 164:	034a1003 	movteq	r1, #40963	; 0xa003
 168:	223d2072 	eorscs	r2, sp, #114	; 0x72
 16c:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 170:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 174:	37254b4d 	strcc	r4, [r5, -sp, asr #22]!
 178:	284b4d43 	stmdacs	fp, {r0, r1, r6, r8, sl, fp, lr}^
 17c:	033c7803 	teqeq	ip, #196608	; 0x30000
 180:	034d3c0a 	movteq	r3, #56330	; 0xdc0a
 184:	333f2e0b 	teqcc	pc, #11, 28	; 0xb0
 188:	3d3d2f3f 	ldccc	15, cr2, [sp, #-252]!	; 0xffffff04
 18c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 190:	4b4b4b4b 	blmi	12d2ec4 <startup-0x1ed2d13c>
 194:	3d3f3d4b 	ldccc	13, cr3, [pc, #-300]!	; 70 <startup-0x1fffff90>
 198:	004b9f3e 	subeq	r9, fp, lr, lsr pc
 19c:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 1a0:	03040200 	movweq	r0, #16896	; 0x4200
 1a4:	04020048 	streq	r0, [r2], #-72	; 0xffffffb8
 1a8:	003c0601 	eorseq	r0, ip, r1, lsl #12
 1ac:	06020402 	streq	r0, [r2], -r2, lsl #8
 1b0:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
 1b4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1b8:	4d3c0903 			; <UNDEFINED> instruction: 0x4d3c0903
 1bc:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 1c0:	004a0601 	subeq	r0, sl, r1, lsl #12
 1c4:	4a020402 	bmi	811d4 <startup-0x1ff7ee2c>
 1c8:	03040200 	movweq	r0, #16896	; 0x4200
 1cc:	764c064a 	strbvc	r0, [ip], -sl, asr #12
 1d0:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
 1d4:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 1d8:	683d5b59 	ldmdavs	sp!, {r0, r3, r4, r6, r8, r9, fp, ip, lr}
 1dc:	4b4c4b3d 	blmi	1312ed8 <startup-0x1eced128>
 1e0:	91c9c93f 	bicls	ip, r9, pc, lsr r9
 1e4:	92a03dbc 	adcls	r3, r0, #188, 26	; 0x2f00
 1e8:	03ac5c03 			; <UNDEFINED> instruction: 0x03ac5c03
 1ec:	4c852025 	stcmi	0, cr2, [r5], {37}	; 0x25
 1f0:	0402006b 	streq	r0, [r2], #-107	; 0xffffff95
 1f4:	02005a03 	andeq	r5, r0, #12288	; 0x3000
 1f8:	13080304 	movwne	r0, #33540	; 0x8304
 1fc:	03040200 	movweq	r0, #16896	; 0x4200
 200:	040200f5 	streq	r0, [r2], #-245	; 0xffffff0b
 204:	827a0303 	rsbshi	r0, sl, #201326592	; 0xc000000
 208:	01040200 	mrseq	r0, R12_usr
 20c:	8a065806 	bhi	19622c <startup-0x1fe69dd4>
 210:	00694c4d 	rsbeq	r4, r9, sp, asr #24
 214:	59030402 	stmdbpl	r3, {r1, sl}
 218:	03040200 	movweq	r0, #16896	; 0x4200
 21c:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 220:	00f30304 	rscseq	r0, r3, r4, lsl #6
 224:	7f030402 	svcvc	0x00030402
 228:	01040200 	mrseq	r0, R12_usr
 22c:	87065806 	strhi	r5, [r6, -r6, lsl #16]
 230:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 234:	754b4b4c 	strbvc	r4, [fp, #-2892]	; 0xfffff4b4
 238:	915a4b76 	cmpls	sl, r6, ror fp
 23c:	915a4b5a 	cmpls	sl, sl, asr fp
 240:	11034b5a 	tstne	r3, sl, asr fp
 244:	773d2f4a 	ldrvc	r2, [sp, -sl, asr #30]!
 248:	332f2f3f 			; <UNDEFINED> instruction: 0x332f2f3f
 24c:	01040200 	mrseq	r0, R12_usr
 250:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 254:	02005901 	andeq	r5, r0, #16384	; 0x4000
 258:	023b0104 	eorseq	r0, fp, #4, 2
 25c:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
   4:	78697000 	stmdavc	r9!, {ip, sp, lr}^
   8:	69006c65 	stmdbvs	r0, {r0, r2, r5, r6, sl, fp, sp, lr}
   c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
  10:	6f687300 	svcvs	0x00687300
  14:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
  18:	6200746e 	andvs	r7, r0, #1845493760	; 0x6e000000
  1c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
  20:	6f654774 	svcvs	0x00654774
  24:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  28:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
  2c:	5f79616c 	svcpl	0x0079616c
  30:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
  34:	616d006f 	cmnvs	sp, pc, rrx
  38:	67006e69 	strvs	r6, [r0, -r9, ror #28]
  3c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  40:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  44:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  48:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffed4 <ball+0xdffff6b8>
  4c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  50:	45475000 	strbmi	r5, [r7, #-0]
  54:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
  58:	76005952 			; <UNDEFINED> instruction: 0x76005952
  5c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  60:	61726700 	cmnvs	r2, r0, lsl #14
  64:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  68:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  6c:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
  70:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
  74:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
  78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  7c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  80:	50006461 	andpl	r6, r0, r1, ror #8
  84:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
  88:	736f7000 	cmnvc	pc, #0
  8c:	6f6c0079 	svcvs	0x006c0079
  90:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  94:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  98:	00746e69 	rsbseq	r6, r4, r9, ror #28
  9c:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  a0:	72696400 	rsbvc	r6, r9, #0, 8
  a4:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
  a8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  ac:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  b0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffee8 <ball+0xdffff6cc>
  b4:	0072656c 	rsbseq	r6, r2, ip, ror #10
  b8:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
  bc:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
  c0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  c4:	614d5c73 	hvcvs	54723	; 0xd5c3
  c8:	5c616972 			; <UNDEFINED> instruction: 0x5c616972
  cc:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  d0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  d4:	54495c73 	strbpl	r5, [r9], #-3187	; 0xfffff38d
  d8:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
  dc:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
  e0:	7475615c 	ldrbtvc	r6, [r5], #-348	; 0xfffffea4
  e4:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  e8:	72670067 	rsbvc	r0, r7, #103	; 0x67
  ec:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  f0:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  f4:	645f6461 	ldrbvs	r6, [pc], #-1121	; fc <startup-0x1fffff04>
  f8:	00617461 	rsbeq	r7, r1, r1, ror #8
  fc:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 100:	5f38746e 	svcpl	0x0038746e
 104:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 108:	0078657a 	rsbseq	r6, r8, sl, ror r5
 10c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 110:	72670079 	rsbvc	r0, r7, #121	; 0x79
 114:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 118:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 11c:	5f657469 	svcpl	0x00657469
 120:	61746164 	cmnvs	r4, r4, ror #2
 124:	2f3a4300 	svccs	0x003a4300
 128:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 12c:	614d2f73 	hvcvs	54003	; 0xd2f3
 130:	2f616972 	svccs	0x00616972
 134:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 138:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 13c:	54492f73 	strbpl	r2, [r9], #-3955	; 0xfffff08d
 140:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 144:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 148:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 14c:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 150:	74732f67 	ldrbtvc	r2, [r3], #-3943	; 0xfffff099
 154:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 158:	00632e70 	rsbeq	r2, r3, r0, ror lr
 15c:	616c6564 	cmnvs	ip, r4, ror #10
 160:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 164:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 168:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 16c:	73007864 	movwvc	r7, #2148	; 0x864
 170:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 174:	5f790079 	svcpl	0x00790079
 178:	726f6f63 	rsbvc	r6, pc, #396	; 0x18c
 17c:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
 180:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 184:	0073746e 	rsbseq	r7, r3, lr, ror #8
 188:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 18c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 190:	61686320 	cmnvs	r8, r0, lsr #6
 194:	72670072 	rsbvc	r0, r7, #114	; 0x72
 198:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 19c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 1a0:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1a4:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 1a8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 1ac:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 1b0:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 1b4:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
 1b8:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 1bc:	30373130 	eorscc	r3, r7, r0, lsr r1
 1c0:	20343039 	eorscs	r3, r4, r9, lsr r0
 1c4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 1c8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 1cc:	415b2029 	cmpmi	fp, r9, lsr #32
 1d0:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff486 <ball+0xdfffec6a>
 1d4:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 1d8:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 1dc:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
 1e0:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 1e4:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 1e8:	6f697369 	svcvs	0x00697369
 1ec:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
 1f0:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
 1f4:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 1f8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1fc:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 200:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 204:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 208:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 20c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 210:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 214:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 218:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 21c:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 220:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 224:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 228:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 22c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 230:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 234:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 238:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 23c:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 240:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 244:	61726700 	cmnvs	r2, r0, lsl #14
 248:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 24c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 250:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
 254:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 258:	6f6c0074 	svcvs	0x006c0074
 25c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 260:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 264:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 268:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 26c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 270:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 274:	6a626f5f 	bvs	189bff8 <startup-0x1e764008>
 278:	5f746365 	svcpl	0x00746365
 27c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 280:	72670064 	rsbvc	r0, r7, #100	; 0x64
 284:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 288:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 28c:	61697469 	cmnvs	r9, r9, ror #8
 290:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 294:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 298:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff93f <ball+0xdffff123>
 29c:	736e3030 	cmnvc	lr, #48	; 0x30
 2a0:	6f687300 	svcvs	0x00687300
 2a4:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 2a8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2ac:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2b4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 2b8:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 2bc:	61726700 	cmnvs	r2, r0, lsl #14
 2c0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2c4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2c8:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2cc:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 2d0:	4f740074 	svcmi	0x00740074
 2d4:	64006a62 	strvs	r6, [r0], #-2658	; 0xfffff59e
 2d8:	00776172 	rsbseq	r6, r7, r2, ror r1
 2dc:	5f746573 	svcpl	0x00746573
 2e0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2e4:	72670064 	rsbvc	r0, r7, #100	; 0x64
 2e8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2ec:	61775f63 	cmnvs	r7, r3, ror #30
 2f0:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 2f4:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 2f8:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 2fc:	6f5f7261 	svcvs	0x005f7261
 300:	63656a62 	cmnvs	r5, #401408	; 0x62000
 304:	61620074 	smcvs	8196	; 0x2004
 308:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 30c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 310:	00797274 	rsbseq	r7, r9, r4, ror r2
 314:	616c6564 	cmnvs	ip, r4, ror #10
 318:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 31c:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 320:	6b73616d 	blvs	1cd88dc <startup-0x1e327724>
 324:	61747300 	cmnvs	r4, r0, lsl #6
 328:	70757472 	rsbsvc	r7, r5, r2, ror r4
 32c:	635f7800 	cmpvs	pc, #0, 16
 330:	64726f6f 	ldrbtvs	r6, [r2], #-3951	; 0xfffff091
 334:	424f5000 	submi	r5, pc, #0
 338:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 33c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 340:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 344:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 348:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 34c:	72640065 	rsbvc	r0, r4, #101	; 0x65
 350:	6f5f7761 	svcvs	0x005f7761
 354:	63656a62 	cmnvs	r5, #401408	; 0x62000
 358:	Address 0x00000358 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffeaf2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000070 	andeq	r0, r0, r0, ror r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	100e4101 	andne	r4, lr, r1, lsl #2
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000080 	andcs	r0, r0, r0, lsl #1
  4c:	00000094 	muleq	r0, r4, r0
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	180e4101 	stmdane	lr, {r0, r8, lr}
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000114 	andcs	r0, r0, r4, lsl r1
  6c:	00000080 	andeq	r0, r0, r0, lsl #1
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	100e4101 	andne	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	20000194 	mulcs	r0, r4, r1
  8c:	00000040 	andeq	r0, r0, r0, asr #32
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200001d4 	ldrdcs	r0, [r0], -r4
  ac:	00000046 	andeq	r0, r0, r6, asr #32
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	100e4101 	andne	r4, lr, r1, lsl #2
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	2000021a 	andcs	r0, r0, sl, lsl r2
  cc:	0000002a 	andeq	r0, r0, sl, lsr #32
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	100e4101 	andne	r4, lr, r1, lsl #2
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	20000244 	andcs	r0, r0, r4, asr #4
  ec:	00000044 	andeq	r0, r0, r4, asr #32
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	180e4101 	stmdane	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000000 	andeq	r0, r0, r0
 108:	20000288 	andcs	r0, r0, r8, lsl #5
 10c:	00000048 	andeq	r0, r0, r8, asr #32
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	180e4101 	stmdane	lr, {r0, r8, lr}
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	00000000 	andeq	r0, r0, r0
 128:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 12c:	0000005a 	andeq	r0, r0, sl, asr r0
 130:	40080e41 	andmi	r0, r8, r1, asr #28
 134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 138:	100e4101 	andne	r4, lr, r1, lsl #2
 13c:	00070d41 	andeq	r0, r7, r1, asr #26
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000000 	andeq	r0, r0, r0
 148:	2000032a 	andcs	r0, r0, sl, lsr #6
 14c:	0000001e 	andeq	r0, r0, lr, lsl r0
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	100e4101 	andne	r4, lr, r1, lsl #2
 15c:	00070d41 	andeq	r0, r7, r1, asr #26
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000000 	andeq	r0, r0, r0
 168:	20000348 	andcs	r0, r0, r8, asr #6
 16c:	0000001e 	andeq	r0, r0, lr, lsl r0
 170:	40080e41 	andmi	r0, r8, r1, asr #28
 174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 178:	100e4101 	andne	r4, lr, r1, lsl #2
 17c:	00070d41 	andeq	r0, r7, r1, asr #26
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	20000366 	andcs	r0, r0, r6, ror #6
 18c:	0000000a 	andeq	r0, r0, sl
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000370 	andcs	r0, r0, r0, ror r3
 1a8:	0000000a 	andeq	r0, r0, sl
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	2000037a 	andcs	r0, r0, sl, ror r3
 1c4:	0000005c 	andeq	r0, r0, ip, asr r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	200003d6 	ldrdcs	r0, [r0], -r6
 1e0:	00000056 	andeq	r0, r0, r6, asr r0
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	2000042c 	andcs	r0, r0, ip, lsr #8
 200:	00000194 	muleq	r0, r4, r1
 204:	40100e41 	andsmi	r0, r0, r1, asr #28
 208:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 20c:	02874003 	addeq	r4, r7, #3
 210:	41018e40 	tstmi	r1, r0, asr #28
 214:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
 220:	00000000 	andeq	r0, r0, r0
 224:	200005c0 	andcs	r0, r0, r0, asr #11
 228:	00000092 	muleq	r0, r2, r0
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 234:	02874003 	addeq	r4, r7, #3
 238:	41018e40 	tstmi	r1, r0, asr #28
 23c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 240:	00000007 	andeq	r0, r0, r7
 244:	00000024 	andeq	r0, r0, r4, lsr #32
 248:	00000000 	andeq	r0, r0, r0
 24c:	20000652 	andcs	r0, r0, r2, asr r6
 250:	00000092 	muleq	r0, r2, r0
 254:	40100e41 	andsmi	r0, r0, r1, asr #28
 258:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 25c:	02874003 	addeq	r4, r7, #3
 260:	41018e40 	tstmi	r1, r0, asr #28
 264:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 268:	00000007 	andeq	r0, r0, r7
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	00000000 	andeq	r0, r0, r0
 274:	200006e4 	andcs	r0, r0, r4, ror #13
 278:	00000020 	andeq	r0, r0, r0, lsr #32
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000704 	andcs	r0, r0, r4, lsl #14
 298:	00000098 	muleq	r0, r8, r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	100e4101 	andne	r4, lr, r1, lsl #2
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	00000018 	andeq	r0, r0, r8, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	2000079c 	mulcs	r0, ip, r7
 2b8:	00000018 	andeq	r0, r0, r8, lsl r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	200007b4 			; <UNDEFINED> instruction: 0x200007b4
 2d4:	00000034 	andeq	r0, r0, r4, lsr r0
 2d8:	40080e41 	andmi	r0, r8, r1, asr #28
 2dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e0:	100e4101 	andne	r4, lr, r1, lsl #2
 2e4:	00070d41 	andeq	r0, r7, r1, asr #26
